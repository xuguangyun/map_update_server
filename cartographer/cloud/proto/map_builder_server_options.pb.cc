// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_server_options.proto

#include "cartographer/cloud/proto/map_builder_server_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto;
namespace cartographer {
namespace cloud {
namespace proto {
class MapBuilderServerOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapBuilderServerOptions> _instance;
} _MapBuilderServerOptions_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
static void InitDefaultsMapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_;
    new (ptr) ::cartographer::cloud::proto::MapBuilderServerOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::MapBuilderServerOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto}, {
      &scc_info_MapBuilderOptions_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto.base,}};

void InitDefaults_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, server_address_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_grpc_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, num_event_threads_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, map_builder_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, uplink_server_address_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, upload_batch_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_ssl_encryption_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::MapBuilderServerOptions, enable_google_auth_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::MapBuilderServerOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = {
  {}, AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, "cartographer/cloud/proto/map_builder_server_options.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto,
};

const char descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto[] =
  "\n9cartographer/cloud/proto/map_builder_s"
  "erver_options.proto\022\030cartographer.cloud."
  "proto\0324cartographer/mapping/proto/map_bu"
  "ilder_options.proto\"\247\002\n\027MapBuilderServer"
  "Options\022\026\n\016server_address\030\001 \001(\t\022\030\n\020num_g"
  "rpc_threads\030\002 \001(\005\022\031\n\021num_event_threads\030\003"
  " \001(\005\022J\n\023map_builder_options\030\004 \001(\0132-.cart"
  "ographer.mapping.proto.MapBuilderOptions"
  "\022\035\n\025uplink_server_address\030\005 \001(\t\022\031\n\021uploa"
  "d_batch_size\030\006 \001(\005\022\035\n\025enable_ssl_encrypt"
  "ion\030\007 \001(\010\022\032\n\022enable_google_auth\030\t \001(\010b\006p"
  "roto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = {
  false, InitDefaults_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, 
  descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto,
  "cartographer/cloud/proto/map_builder_server_options.proto", &assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, 445,
};

void AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fmap_5fbuilder_5foptions_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto = []() { AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto(); return true; }();
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

void MapBuilderServerOptions::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_MapBuilderServerOptions_default_instance_._instance.get_mutable()->map_builder_options_ = const_cast< ::cartographer::mapping::proto::MapBuilderOptions*>(
      ::cartographer::mapping::proto::MapBuilderOptions::internal_default_instance());
}
class MapBuilderServerOptions::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::MapBuilderOptions& map_builder_options(const MapBuilderServerOptions* msg);
};

const ::cartographer::mapping::proto::MapBuilderOptions&
MapBuilderServerOptions::HasBitSetters::map_builder_options(const MapBuilderServerOptions* msg) {
  return *msg->map_builder_options_;
}
void MapBuilderServerOptions::clear_map_builder_options() {
  if (GetArenaNoVirtual() == nullptr && map_builder_options_ != nullptr) {
    delete map_builder_options_;
  }
  map_builder_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapBuilderServerOptions::kServerAddressFieldNumber;
const int MapBuilderServerOptions::kNumGrpcThreadsFieldNumber;
const int MapBuilderServerOptions::kNumEventThreadsFieldNumber;
const int MapBuilderServerOptions::kMapBuilderOptionsFieldNumber;
const int MapBuilderServerOptions::kUplinkServerAddressFieldNumber;
const int MapBuilderServerOptions::kUploadBatchSizeFieldNumber;
const int MapBuilderServerOptions::kEnableSslEncryptionFieldNumber;
const int MapBuilderServerOptions::kEnableGoogleAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapBuilderServerOptions::MapBuilderServerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}
MapBuilderServerOptions::MapBuilderServerOptions(const MapBuilderServerOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_address().size() > 0) {
    server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  uplink_server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uplink_server_address().size() > 0) {
    uplink_server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  if (from.has_map_builder_options()) {
    map_builder_options_ = new ::cartographer::mapping::proto::MapBuilderOptions(*from.map_builder_options_);
  } else {
    map_builder_options_ = nullptr;
  }
  ::memcpy(&num_grpc_threads_, &from.num_grpc_threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_google_auth_) -
    reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.MapBuilderServerOptions)
}

void MapBuilderServerOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base);
  server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_builder_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&map_builder_options_)) + sizeof(enable_google_auth_));
}

MapBuilderServerOptions::~MapBuilderServerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.MapBuilderServerOptions)
  SharedDtor();
}

void MapBuilderServerOptions::SharedDtor() {
  server_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_builder_options_;
}

void MapBuilderServerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapBuilderServerOptions& MapBuilderServerOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MapBuilderServerOptions_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto.base);
  return *internal_default_instance();
}


void MapBuilderServerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uplink_server_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && map_builder_options_ != nullptr) {
    delete map_builder_options_;
  }
  map_builder_options_ = nullptr;
  ::memset(&num_grpc_threads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_google_auth_) -
      reinterpret_cast<char*>(&num_grpc_threads_)) + sizeof(enable_google_auth_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapBuilderServerOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MapBuilderServerOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string server_address = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.cloud.proto.MapBuilderServerOptions.server_address");
        object = msg->mutable_server_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 num_grpc_threads = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_grpc_threads(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 num_event_threads = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_event_threads(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::MapBuilderOptions::_InternalParse;
        object = msg->mutable_map_builder_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string uplink_server_address = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
        object = msg->mutable_uplink_server_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 upload_batch_size = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_upload_batch_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool enable_ssl_encryption = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_enable_ssl_encryption(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool enable_google_auth = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_enable_google_auth(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapBuilderServerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.MapBuilderServerOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string server_address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_address().data(), static_cast<int>(this->server_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.MapBuilderServerOptions.server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_grpc_threads = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_grpc_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_event_threads = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_event_threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uplink_server_address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uplink_server_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 upload_batch_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_ssl_encryption = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ssl_encryption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable_google_auth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_google_auth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.MapBuilderServerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.MapBuilderServerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapBuilderServerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.server_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->server_address(), output);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_grpc_threads(), output);
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_event_threads(), output);
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::map_builder_options(this), output);
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->uplink_server_address(), output);
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->upload_batch_size(), output);
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enable_ssl_encryption(), output);
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->enable_google_auth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.MapBuilderServerOptions)
}

::google::protobuf::uint8* MapBuilderServerOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.MapBuilderServerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_address().data(), static_cast<int>(this->server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.server_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_address(), target);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_grpc_threads(), target);
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_event_threads(), target);
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::map_builder_options(this), target);
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uplink_server_address().data(), static_cast<int>(this->uplink_server_address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.MapBuilderServerOptions.uplink_server_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->uplink_server_address(), target);
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->upload_batch_size(), target);
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enable_ssl_encryption(), target);
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->enable_google_auth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.MapBuilderServerOptions)
  return target;
}

size_t MapBuilderServerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.MapBuilderServerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 1;
  if (this->server_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_address());
  }

  // string uplink_server_address = 5;
  if (this->uplink_server_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uplink_server_address());
  }

  // .cartographer.mapping.proto.MapBuilderOptions map_builder_options = 4;
  if (this->has_map_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *map_builder_options_);
  }

  // int32 num_grpc_threads = 2;
  if (this->num_grpc_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_grpc_threads());
  }

  // int32 num_event_threads = 3;
  if (this->num_event_threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_event_threads());
  }

  // int32 upload_batch_size = 6;
  if (this->upload_batch_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->upload_batch_size());
  }

  // bool enable_ssl_encryption = 7;
  if (this->enable_ssl_encryption() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_google_auth = 9;
  if (this->enable_google_auth() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapBuilderServerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MapBuilderServerOptions* source =
      ::google::protobuf::DynamicCastToGenerated<MapBuilderServerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.MapBuilderServerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.MapBuilderServerOptions)
    MergeFrom(*source);
  }
}

void MapBuilderServerOptions::MergeFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_address().size() > 0) {

    server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_address_);
  }
  if (from.uplink_server_address().size() > 0) {

    uplink_server_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uplink_server_address_);
  }
  if (from.has_map_builder_options()) {
    mutable_map_builder_options()->::cartographer::mapping::proto::MapBuilderOptions::MergeFrom(from.map_builder_options());
  }
  if (from.num_grpc_threads() != 0) {
    set_num_grpc_threads(from.num_grpc_threads());
  }
  if (from.num_event_threads() != 0) {
    set_num_event_threads(from.num_event_threads());
  }
  if (from.upload_batch_size() != 0) {
    set_upload_batch_size(from.upload_batch_size());
  }
  if (from.enable_ssl_encryption() != 0) {
    set_enable_ssl_encryption(from.enable_ssl_encryption());
  }
  if (from.enable_google_auth() != 0) {
    set_enable_google_auth(from.enable_google_auth());
  }
}

void MapBuilderServerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapBuilderServerOptions::CopyFrom(const MapBuilderServerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.MapBuilderServerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapBuilderServerOptions::IsInitialized() const {
  return true;
}

void MapBuilderServerOptions::Swap(MapBuilderServerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapBuilderServerOptions::InternalSwap(MapBuilderServerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  server_address_.Swap(&other->server_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  uplink_server_address_.Swap(&other->uplink_server_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(map_builder_options_, other->map_builder_options_);
  swap(num_grpc_threads_, other->num_grpc_threads_);
  swap(num_event_threads_, other->num_event_threads_);
  swap(upload_batch_size_, other->upload_batch_size_);
  swap(enable_ssl_encryption_, other->enable_ssl_encryption_);
  swap(enable_google_auth_, other->enable_google_auth_);
}

::google::protobuf::Metadata MapBuilderServerOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fserver_5foptions_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::MapBuilderServerOptions* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::MapBuilderServerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::MapBuilderServerOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
