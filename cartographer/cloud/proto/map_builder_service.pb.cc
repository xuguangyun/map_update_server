// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_service.proto

#include "cartographer/cloud/proto/map_builder_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace cloud {
namespace proto {
class SensorMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorMetadata> _instance;
} _SensorMetadata_default_instance_;
class AddRangefinderDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRangefinderDataRequest> _instance;
} _AddRangefinderDataRequest_default_instance_;
class AddRangefinderDataResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddRangefinderDataResponse> _instance;
} _AddRangefinderDataResponse_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
static void InitDefaultsSensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_SensorMetadata_default_instance_;
    new (ptr) ::cartographer::cloud::proto::SensorMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::SensorMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {}};

static void InitDefaultsAddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddRangefinderDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddRangefinderDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsAddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsAddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::cloud::proto::_AddRangefinderDataResponse_default_instance_;
    new (ptr) ::cartographer::cloud::proto::AddRangefinderDataResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::cloud::proto::AddRangefinderDataResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto}, {
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base,}};

void InitDefaults_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::SensorMetadata, client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataRequest, timed_point_cloud_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataResponse, sensor_metadata_),
  PROTOBUF_FIELD_OFFSET(::cartographer::cloud::proto::AddRangefinderDataResponse, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::cloud::proto::SensorMetadata)},
  { 7, -1, sizeof(::cartographer::cloud::proto::AddRangefinderDataRequest)},
  { 16, -1, sizeof(::cartographer::cloud::proto::AddRangefinderDataResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_SensorMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::cloud::proto::_AddRangefinderDataResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = {
  {}, AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, "cartographer/cloud/proto/map_builder_service.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto::offsets,
  file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, 3, file_level_enum_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, file_level_service_descriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto,
};

const char descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[] =
  "\n2cartographer/cloud/proto/map_builder_s"
  "ervice.proto\022\030cartographer.cloud.proto\032&"
  "cartographer/sensor/proto/sensor.proto\032,"
  "cartographer/transform/proto/transform.p"
  "roto\"6\n\016SensorMetadata\022\021\n\tsensor_id\030\001 \001("
  "\t\022\021\n\tclient_id\030\002 \001(\t\"\374\001\n\031AddRangefinderD"
  "ataRequest\022A\n\017sensor_metadata\030\001 \001(\0132(.ca"
  "rtographer.cloud.proto.SensorMetadata\022\021\n"
  "\ttimestamp\030\002 \001(\003\0229\n\nlocal_pose\030\003 \001(\0132%.c"
  "artographer.transform.proto.Rigid3d\022N\n\026t"
  "imed_point_cloud_data\030\004 \001(\0132..cartograph"
  "er.sensor.proto.TimedPointCloudData\"r\n\032A"
  "ddRangefinderDataResponse\022A\n\017sensor_meta"
  "data\030\001 \001(\0132(.cartographer.cloud.proto.Se"
  "nsorMetadata\022\021\n\ttimestamp\030\002 \001(\0032\227\001\n\021MapB"
  "uilderService\022\201\001\n\022AddRangefinderData\0223.c"
  "artographer.cloud.proto.AddRangefinderDa"
  "taRequest\0324.cartographer.cloud.proto.Add"
  "RangefinderDataResponse(\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = {
  false, InitDefaults_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, 
  descriptor_table_protodef_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto,
  "cartographer/cloud/proto/map_builder_service.proto", &assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, 753,
};

void AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto,
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto = []() { AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto(); return true; }();
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

void SensorMetadata::InitAsDefaultInstance() {
}
class SensorMetadata::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorMetadata::kSensorIdFieldNumber;
const int SensorMetadata::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorMetadata::SensorMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.SensorMetadata)
}
SensorMetadata::SensorMetadata(const SensorMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sensor_id().size() > 0) {
    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_id().size() > 0) {
    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.SensorMetadata)
}

void SensorMetadata::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  sensor_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SensorMetadata::~SensorMetadata() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.SensorMetadata)
  SharedDtor();
}

void SensorMetadata::SharedDtor() {
  sensor_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorMetadata& SensorMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorMetadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void SensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorMetadata::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorMetadata*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string sensor_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.cloud.proto.SensorMetadata.sensor_id");
        object = msg->mutable_sensor_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string client_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.cloud.proto.SensorMetadata.client_id");
        object = msg->mutable_client_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.SensorMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.SensorMetadata.sensor_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), static_cast<int>(this->client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.cloud.proto.SensorMetadata.client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.SensorMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.SensorMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.sensor_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_id(), output);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->client_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.SensorMetadata)
}

::google::protobuf::uint8* SensorMetadata::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.SensorMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sensor_id().data(), static_cast<int>(this->sensor_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.sensor_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_id(), target);
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), static_cast<int>(this->client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.cloud.proto.SensorMetadata.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.SensorMetadata)
  return target;
}

size_t SensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.SensorMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensor_id = 1;
  if (this->sensor_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_id());
  }

  // string client_id = 2;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorMetadata* source =
      ::google::protobuf::DynamicCastToGenerated<SensorMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.SensorMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.SensorMetadata)
    MergeFrom(*source);
  }
}

void SensorMetadata::MergeFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_id().size() > 0) {

    sensor_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_id_);
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
}

void SensorMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorMetadata::CopyFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMetadata::IsInitialized() const {
  return true;
}

void SensorMetadata::Swap(SensorMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorMetadata::InternalSwap(SensorMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sensor_id_.Swap(&other->sensor_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_id_.Swap(&other->client_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata SensorMetadata::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto);
  return ::file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddRangefinderDataRequest::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::cloud::proto::_AddRangefinderDataRequest_default_instance_._instance.get_mutable()->timed_point_cloud_data_ = const_cast< ::cartographer::sensor::proto::TimedPointCloudData*>(
      ::cartographer::sensor::proto::TimedPointCloudData::internal_default_instance());
}
class AddRangefinderDataRequest::HasBitSetters {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddRangefinderDataRequest* msg);
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const AddRangefinderDataRequest* msg);
  static const ::cartographer::sensor::proto::TimedPointCloudData& timed_point_cloud_data(const AddRangefinderDataRequest* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddRangefinderDataRequest::HasBitSetters::sensor_metadata(const AddRangefinderDataRequest* msg) {
  return *msg->sensor_metadata_;
}
const ::cartographer::transform::proto::Rigid3d&
AddRangefinderDataRequest::HasBitSetters::local_pose(const AddRangefinderDataRequest* msg) {
  return *msg->local_pose_;
}
const ::cartographer::sensor::proto::TimedPointCloudData&
AddRangefinderDataRequest::HasBitSetters::timed_point_cloud_data(const AddRangefinderDataRequest* msg) {
  return *msg->timed_point_cloud_data_;
}
void AddRangefinderDataRequest::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
void AddRangefinderDataRequest::clear_timed_point_cloud_data() {
  if (GetArenaNoVirtual() == nullptr && timed_point_cloud_data_ != nullptr) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRangefinderDataRequest::kSensorMetadataFieldNumber;
const int AddRangefinderDataRequest::kTimestampFieldNumber;
const int AddRangefinderDataRequest::kLocalPoseFieldNumber;
const int AddRangefinderDataRequest::kTimedPointCloudDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRangefinderDataRequest::AddRangefinderDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}
AddRangefinderDataRequest::AddRangefinderDataRequest(const AddRangefinderDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  if (from.has_timed_point_cloud_data()) {
    timed_point_cloud_data_ = new ::cartographer::sensor::proto::TimedPointCloudData(*from.timed_point_cloud_data_);
  } else {
    timed_point_cloud_data_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddRangefinderDataRequest)
}

void AddRangefinderDataRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(timestamp_));
}

AddRangefinderDataRequest::~AddRangefinderDataRequest() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddRangefinderDataRequest)
  SharedDtor();
}

void AddRangefinderDataRequest::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete timed_point_cloud_data_;
}

void AddRangefinderDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRangefinderDataRequest& AddRangefinderDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddRangefinderDataRequest_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddRangefinderDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timed_point_cloud_data_ != nullptr) {
    delete timed_point_cloud_data_;
  }
  timed_point_cloud_data_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddRangefinderDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddRangefinderDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::cloud::proto::SensorMetadata::_InternalParse;
        object = msg->mutable_sensor_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.transform.proto.Rigid3d local_pose = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_local_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::sensor::proto::TimedPointCloudData::_InternalParse;
        object = msg->mutable_timed_point_cloud_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddRangefinderDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d local_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timed_point_cloud_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddRangefinderDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddRangefinderDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddRangefinderDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sensor_metadata(this), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::local_pose(this), output);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (this->has_timed_point_cloud_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::timed_point_cloud_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddRangefinderDataRequest)
}

::google::protobuf::uint8* AddRangefinderDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sensor_metadata(this), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::local_pose(this), target);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (this->has_timed_point_cloud_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::timed_point_cloud_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddRangefinderDataRequest)
  return target;
}

size_t AddRangefinderDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  if (this->has_timed_point_cloud_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timed_point_cloud_data_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRangefinderDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRangefinderDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AddRangefinderDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddRangefinderDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddRangefinderDataRequest)
    MergeFrom(*source);
  }
}

void AddRangefinderDataRequest::MergeFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_timed_point_cloud_data()) {
    mutable_timed_point_cloud_data()->::cartographer::sensor::proto::TimedPointCloudData::MergeFrom(from.timed_point_cloud_data());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AddRangefinderDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRangefinderDataRequest::CopyFrom(const AddRangefinderDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddRangefinderDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRangefinderDataRequest::IsInitialized() const {
  return true;
}

void AddRangefinderDataRequest::Swap(AddRangefinderDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRangefinderDataRequest::InternalSwap(AddRangefinderDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(local_pose_, other->local_pose_);
  swap(timed_point_cloud_data_, other->timed_point_cloud_data_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata AddRangefinderDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto);
  return ::file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AddRangefinderDataResponse::InitAsDefaultInstance() {
  ::cartographer::cloud::proto::_AddRangefinderDataResponse_default_instance_._instance.get_mutable()->sensor_metadata_ = const_cast< ::cartographer::cloud::proto::SensorMetadata*>(
      ::cartographer::cloud::proto::SensorMetadata::internal_default_instance());
}
class AddRangefinderDataResponse::HasBitSetters {
 public:
  static const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata(const AddRangefinderDataResponse* msg);
};

const ::cartographer::cloud::proto::SensorMetadata&
AddRangefinderDataResponse::HasBitSetters::sensor_metadata(const AddRangefinderDataResponse* msg) {
  return *msg->sensor_metadata_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddRangefinderDataResponse::kSensorMetadataFieldNumber;
const int AddRangefinderDataResponse::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddRangefinderDataResponse::AddRangefinderDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.cloud.proto.AddRangefinderDataResponse)
}
AddRangefinderDataResponse::AddRangefinderDataResponse(const AddRangefinderDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_metadata()) {
    sensor_metadata_ = new ::cartographer::cloud::proto::SensorMetadata(*from.sensor_metadata_);
  } else {
    sensor_metadata_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.cloud.proto.AddRangefinderDataResponse)
}

void AddRangefinderDataResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  ::memset(&sensor_metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&sensor_metadata_)) + sizeof(timestamp_));
}

AddRangefinderDataResponse::~AddRangefinderDataResponse() {
  // @@protoc_insertion_point(destructor:cartographer.cloud.proto.AddRangefinderDataResponse)
  SharedDtor();
}

void AddRangefinderDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_metadata_;
}

void AddRangefinderDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddRangefinderDataResponse& AddRangefinderDataResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AddRangefinderDataResponse_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AddRangefinderDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AddRangefinderDataResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AddRangefinderDataResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::cloud::proto::SensorMetadata::_InternalParse;
        object = msg->mutable_sensor_metadata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int64 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AddRangefinderDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.cloud.proto.AddRangefinderDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.cloud.proto.AddRangefinderDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AddRangefinderDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::sensor_metadata(this), output);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.cloud.proto.AddRangefinderDataResponse)
}

::google::protobuf::uint8* AddRangefinderDataResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::sensor_metadata(this), target);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.cloud.proto.AddRangefinderDataResponse)
  return target;
}

size_t AddRangefinderDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  if (this->has_sensor_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *sensor_metadata_);
  }

  // int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddRangefinderDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddRangefinderDataResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AddRangefinderDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.cloud.proto.AddRangefinderDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.cloud.proto.AddRangefinderDataResponse)
    MergeFrom(*source);
  }
}

void AddRangefinderDataResponse::MergeFrom(const AddRangefinderDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_metadata()) {
    mutable_sensor_metadata()->::cartographer::cloud::proto::SensorMetadata::MergeFrom(from.sensor_metadata());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AddRangefinderDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRangefinderDataResponse::CopyFrom(const AddRangefinderDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.cloud.proto.AddRangefinderDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRangefinderDataResponse::IsInitialized() const {
  return true;
}

void AddRangefinderDataResponse::Swap(AddRangefinderDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddRangefinderDataResponse::InternalSwap(AddRangefinderDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_metadata_, other->sensor_metadata_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata AddRangefinderDataResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto);
  return ::file_level_metadata_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::SensorMetadata* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::SensorMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::SensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddRangefinderDataRequest* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddRangefinderDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddRangefinderDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::cloud::proto::AddRangefinderDataResponse* Arena::CreateMaybeMessage< ::cartographer::cloud::proto::AddRangefinderDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::cloud::proto::AddRangefinderDataResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
