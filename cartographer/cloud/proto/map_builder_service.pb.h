// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/cloud/proto/map_builder_service.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/sensor/proto/sensor.pb.h"
#include "cartographer/transform/proto/transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto();
namespace cartographer {
namespace cloud {
namespace proto {
class AddRangefinderDataRequest;
class AddRangefinderDataRequestDefaultTypeInternal;
extern AddRangefinderDataRequestDefaultTypeInternal _AddRangefinderDataRequest_default_instance_;
class AddRangefinderDataResponse;
class AddRangefinderDataResponseDefaultTypeInternal;
extern AddRangefinderDataResponseDefaultTypeInternal _AddRangefinderDataResponse_default_instance_;
class SensorMetadata;
class SensorMetadataDefaultTypeInternal;
extern SensorMetadataDefaultTypeInternal _SensorMetadata_default_instance_;
}  // namespace proto
}  // namespace cloud
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::cloud::proto::AddRangefinderDataRequest* Arena::CreateMaybeMessage<::cartographer::cloud::proto::AddRangefinderDataRequest>(Arena*);
template<> ::cartographer::cloud::proto::AddRangefinderDataResponse* Arena::CreateMaybeMessage<::cartographer::cloud::proto::AddRangefinderDataResponse>(Arena*);
template<> ::cartographer::cloud::proto::SensorMetadata* Arena::CreateMaybeMessage<::cartographer::cloud::proto::SensorMetadata>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace cloud {
namespace proto {

// ===================================================================

class SensorMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.cloud.proto.SensorMetadata) */ {
 public:
  SensorMetadata();
  virtual ~SensorMetadata();

  SensorMetadata(const SensorMetadata& from);

  inline SensorMetadata& operator=(const SensorMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorMetadata(SensorMetadata&& from) noexcept
    : SensorMetadata() {
    *this = ::std::move(from);
  }

  inline SensorMetadata& operator=(SensorMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorMetadata* internal_default_instance() {
    return reinterpret_cast<const SensorMetadata*>(
               &_SensorMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SensorMetadata* other);
  friend void swap(SensorMetadata& a, SensorMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorMetadata* New() const final {
    return CreateMaybeMessage<SensorMetadata>(nullptr);
  }

  SensorMetadata* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorMetadata>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorMetadata& from);
  void MergeFrom(const SensorMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sensor_id = 1;
  void clear_sensor_id();
  static const int kSensorIdFieldNumber = 1;
  const ::std::string& sensor_id() const;
  void set_sensor_id(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_id(::std::string&& value);
  #endif
  void set_sensor_id(const char* value);
  void set_sensor_id(const char* value, size_t size);
  ::std::string* mutable_sensor_id();
  ::std::string* release_sensor_id();
  void set_allocated_sensor_id(::std::string* sensor_id);

  // string client_id = 2;
  void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // @@protoc_insertion_point(class_scope:cartographer.cloud.proto.SensorMetadata)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sensor_id_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddRangefinderDataRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.cloud.proto.AddRangefinderDataRequest) */ {
 public:
  AddRangefinderDataRequest();
  virtual ~AddRangefinderDataRequest();

  AddRangefinderDataRequest(const AddRangefinderDataRequest& from);

  inline AddRangefinderDataRequest& operator=(const AddRangefinderDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRangefinderDataRequest(AddRangefinderDataRequest&& from) noexcept
    : AddRangefinderDataRequest() {
    *this = ::std::move(from);
  }

  inline AddRangefinderDataRequest& operator=(AddRangefinderDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddRangefinderDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRangefinderDataRequest* internal_default_instance() {
    return reinterpret_cast<const AddRangefinderDataRequest*>(
               &_AddRangefinderDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddRangefinderDataRequest* other);
  friend void swap(AddRangefinderDataRequest& a, AddRangefinderDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRangefinderDataRequest* New() const final {
    return CreateMaybeMessage<AddRangefinderDataRequest>(nullptr);
  }

  AddRangefinderDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRangefinderDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRangefinderDataRequest& from);
  void MergeFrom(const AddRangefinderDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRangefinderDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  bool has_sensor_metadata() const;
  void clear_sensor_metadata();
  static const int kSensorMetadataFieldNumber = 1;
  const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata() const;
  ::cartographer::cloud::proto::SensorMetadata* release_sensor_metadata();
  ::cartographer::cloud::proto::SensorMetadata* mutable_sensor_metadata();
  void set_allocated_sensor_metadata(::cartographer::cloud::proto::SensorMetadata* sensor_metadata);

  // .cartographer.transform.proto.Rigid3d local_pose = 3;
  bool has_local_pose() const;
  void clear_local_pose();
  static const int kLocalPoseFieldNumber = 3;
  const ::cartographer::transform::proto::Rigid3d& local_pose() const;
  ::cartographer::transform::proto::Rigid3d* release_local_pose();
  ::cartographer::transform::proto::Rigid3d* mutable_local_pose();
  void set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose);

  // .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
  bool has_timed_point_cloud_data() const;
  void clear_timed_point_cloud_data();
  static const int kTimedPointCloudDataFieldNumber = 4;
  const ::cartographer::sensor::proto::TimedPointCloudData& timed_point_cloud_data() const;
  ::cartographer::sensor::proto::TimedPointCloudData* release_timed_point_cloud_data();
  ::cartographer::sensor::proto::TimedPointCloudData* mutable_timed_point_cloud_data();
  void set_allocated_timed_point_cloud_data(::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cartographer.cloud.proto.AddRangefinderDataRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::cloud::proto::SensorMetadata* sensor_metadata_;
  ::cartographer::transform::proto::Rigid3d* local_pose_;
  ::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddRangefinderDataResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.cloud.proto.AddRangefinderDataResponse) */ {
 public:
  AddRangefinderDataResponse();
  virtual ~AddRangefinderDataResponse();

  AddRangefinderDataResponse(const AddRangefinderDataResponse& from);

  inline AddRangefinderDataResponse& operator=(const AddRangefinderDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddRangefinderDataResponse(AddRangefinderDataResponse&& from) noexcept
    : AddRangefinderDataResponse() {
    *this = ::std::move(from);
  }

  inline AddRangefinderDataResponse& operator=(AddRangefinderDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddRangefinderDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddRangefinderDataResponse* internal_default_instance() {
    return reinterpret_cast<const AddRangefinderDataResponse*>(
               &_AddRangefinderDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AddRangefinderDataResponse* other);
  friend void swap(AddRangefinderDataResponse& a, AddRangefinderDataResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddRangefinderDataResponse* New() const final {
    return CreateMaybeMessage<AddRangefinderDataResponse>(nullptr);
  }

  AddRangefinderDataResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddRangefinderDataResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddRangefinderDataResponse& from);
  void MergeFrom(const AddRangefinderDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRangefinderDataResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
  bool has_sensor_metadata() const;
  void clear_sensor_metadata();
  static const int kSensorMetadataFieldNumber = 1;
  const ::cartographer::cloud::proto::SensorMetadata& sensor_metadata() const;
  ::cartographer::cloud::proto::SensorMetadata* release_sensor_metadata();
  ::cartographer::cloud::proto::SensorMetadata* mutable_sensor_metadata();
  void set_allocated_sensor_metadata(::cartographer::cloud::proto::SensorMetadata* sensor_metadata);

  // int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cartographer.cloud.proto.AddRangefinderDataResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cartographer::cloud::proto::SensorMetadata* sensor_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorMetadata

// string sensor_id = 1;
inline void SensorMetadata::clear_sensor_id() {
  sensor_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMetadata::sensor_id() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.SensorMetadata.sensor_id)
  return sensor_id_.GetNoArena();
}
inline void SensorMetadata::set_sensor_id(const ::std::string& value) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.SensorMetadata.sensor_id)
}
#if LANG_CXX11
inline void SensorMetadata::set_sensor_id(::std::string&& value) {
  
  sensor_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.cloud.proto.SensorMetadata.sensor_id)
}
#endif
inline void SensorMetadata::set_sensor_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.cloud.proto.SensorMetadata.sensor_id)
}
inline void SensorMetadata::set_sensor_id(const char* value, size_t size) {
  
  sensor_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.cloud.proto.SensorMetadata.sensor_id)
}
inline ::std::string* SensorMetadata::mutable_sensor_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.SensorMetadata.sensor_id)
  return sensor_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMetadata::release_sensor_id() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.SensorMetadata.sensor_id)
  
  return sensor_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMetadata::set_allocated_sensor_id(::std::string* sensor_id) {
  if (sensor_id != nullptr) {
    
  } else {
    
  }
  sensor_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorMetadata.sensor_id)
}

// string client_id = 2;
inline void SensorMetadata::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SensorMetadata::client_id() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.SensorMetadata.client_id)
  return client_id_.GetNoArena();
}
inline void SensorMetadata::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.SensorMetadata.client_id)
}
#if LANG_CXX11
inline void SensorMetadata::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cartographer.cloud.proto.SensorMetadata.client_id)
}
#endif
inline void SensorMetadata::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cartographer.cloud.proto.SensorMetadata.client_id)
}
inline void SensorMetadata::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cartographer.cloud.proto.SensorMetadata.client_id)
}
inline ::std::string* SensorMetadata::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.SensorMetadata.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorMetadata::release_client_id() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.SensorMetadata.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SensorMetadata::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.SensorMetadata.client_id)
}

// -------------------------------------------------------------------

// AddRangefinderDataRequest

// .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
inline bool AddRangefinderDataRequest::has_sensor_metadata() const {
  return this != internal_default_instance() && sensor_metadata_ != nullptr;
}
inline void AddRangefinderDataRequest::clear_sensor_metadata() {
  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
}
inline const ::cartographer::cloud::proto::SensorMetadata& AddRangefinderDataRequest::sensor_metadata() const {
  const ::cartographer::cloud::proto::SensorMetadata* p = sensor_metadata_;
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataRequest.sensor_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::cloud::proto::SensorMetadata*>(
      &::cartographer::cloud::proto::_SensorMetadata_default_instance_);
}
inline ::cartographer::cloud::proto::SensorMetadata* AddRangefinderDataRequest::release_sensor_metadata() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.AddRangefinderDataRequest.sensor_metadata)
  
  ::cartographer::cloud::proto::SensorMetadata* temp = sensor_metadata_;
  sensor_metadata_ = nullptr;
  return temp;
}
inline ::cartographer::cloud::proto::SensorMetadata* AddRangefinderDataRequest::mutable_sensor_metadata() {
  
  if (sensor_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::cloud::proto::SensorMetadata>(GetArenaNoVirtual());
    sensor_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.AddRangefinderDataRequest.sensor_metadata)
  return sensor_metadata_;
}
inline void AddRangefinderDataRequest::set_allocated_sensor_metadata(::cartographer::cloud::proto::SensorMetadata* sensor_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensor_metadata_;
  }
  if (sensor_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_metadata, submessage_arena);
    }
    
  } else {
    
  }
  sensor_metadata_ = sensor_metadata;
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.AddRangefinderDataRequest.sensor_metadata)
}

// int64 timestamp = 2;
inline void AddRangefinderDataRequest::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddRangefinderDataRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataRequest.timestamp)
  return timestamp_;
}
inline void AddRangefinderDataRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.AddRangefinderDataRequest.timestamp)
}

// .cartographer.transform.proto.Rigid3d local_pose = 3;
inline bool AddRangefinderDataRequest::has_local_pose() const {
  return this != internal_default_instance() && local_pose_ != nullptr;
}
inline const ::cartographer::transform::proto::Rigid3d& AddRangefinderDataRequest::local_pose() const {
  const ::cartographer::transform::proto::Rigid3d* p = local_pose_;
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataRequest.local_pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::transform::proto::Rigid3d*>(
      &::cartographer::transform::proto::_Rigid3d_default_instance_);
}
inline ::cartographer::transform::proto::Rigid3d* AddRangefinderDataRequest::release_local_pose() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.AddRangefinderDataRequest.local_pose)
  
  ::cartographer::transform::proto::Rigid3d* temp = local_pose_;
  local_pose_ = nullptr;
  return temp;
}
inline ::cartographer::transform::proto::Rigid3d* AddRangefinderDataRequest::mutable_local_pose() {
  
  if (local_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::transform::proto::Rigid3d>(GetArenaNoVirtual());
    local_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.AddRangefinderDataRequest.local_pose)
  return local_pose_;
}
inline void AddRangefinderDataRequest::set_allocated_local_pose(::cartographer::transform::proto::Rigid3d* local_pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(local_pose_);
  }
  if (local_pose) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_pose, submessage_arena);
    }
    
  } else {
    
  }
  local_pose_ = local_pose;
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.AddRangefinderDataRequest.local_pose)
}

// .cartographer.sensor.proto.TimedPointCloudData timed_point_cloud_data = 4;
inline bool AddRangefinderDataRequest::has_timed_point_cloud_data() const {
  return this != internal_default_instance() && timed_point_cloud_data_ != nullptr;
}
inline const ::cartographer::sensor::proto::TimedPointCloudData& AddRangefinderDataRequest::timed_point_cloud_data() const {
  const ::cartographer::sensor::proto::TimedPointCloudData* p = timed_point_cloud_data_;
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataRequest.timed_point_cloud_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::sensor::proto::TimedPointCloudData*>(
      &::cartographer::sensor::proto::_TimedPointCloudData_default_instance_);
}
inline ::cartographer::sensor::proto::TimedPointCloudData* AddRangefinderDataRequest::release_timed_point_cloud_data() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.AddRangefinderDataRequest.timed_point_cloud_data)
  
  ::cartographer::sensor::proto::TimedPointCloudData* temp = timed_point_cloud_data_;
  timed_point_cloud_data_ = nullptr;
  return temp;
}
inline ::cartographer::sensor::proto::TimedPointCloudData* AddRangefinderDataRequest::mutable_timed_point_cloud_data() {
  
  if (timed_point_cloud_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::sensor::proto::TimedPointCloudData>(GetArenaNoVirtual());
    timed_point_cloud_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.AddRangefinderDataRequest.timed_point_cloud_data)
  return timed_point_cloud_data_;
}
inline void AddRangefinderDataRequest::set_allocated_timed_point_cloud_data(::cartographer::sensor::proto::TimedPointCloudData* timed_point_cloud_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timed_point_cloud_data_);
  }
  if (timed_point_cloud_data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timed_point_cloud_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timed_point_cloud_data, submessage_arena);
    }
    
  } else {
    
  }
  timed_point_cloud_data_ = timed_point_cloud_data;
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.AddRangefinderDataRequest.timed_point_cloud_data)
}

// -------------------------------------------------------------------

// AddRangefinderDataResponse

// .cartographer.cloud.proto.SensorMetadata sensor_metadata = 1;
inline bool AddRangefinderDataResponse::has_sensor_metadata() const {
  return this != internal_default_instance() && sensor_metadata_ != nullptr;
}
inline void AddRangefinderDataResponse::clear_sensor_metadata() {
  if (GetArenaNoVirtual() == nullptr && sensor_metadata_ != nullptr) {
    delete sensor_metadata_;
  }
  sensor_metadata_ = nullptr;
}
inline const ::cartographer::cloud::proto::SensorMetadata& AddRangefinderDataResponse::sensor_metadata() const {
  const ::cartographer::cloud::proto::SensorMetadata* p = sensor_metadata_;
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataResponse.sensor_metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::cloud::proto::SensorMetadata*>(
      &::cartographer::cloud::proto::_SensorMetadata_default_instance_);
}
inline ::cartographer::cloud::proto::SensorMetadata* AddRangefinderDataResponse::release_sensor_metadata() {
  // @@protoc_insertion_point(field_release:cartographer.cloud.proto.AddRangefinderDataResponse.sensor_metadata)
  
  ::cartographer::cloud::proto::SensorMetadata* temp = sensor_metadata_;
  sensor_metadata_ = nullptr;
  return temp;
}
inline ::cartographer::cloud::proto::SensorMetadata* AddRangefinderDataResponse::mutable_sensor_metadata() {
  
  if (sensor_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::cloud::proto::SensorMetadata>(GetArenaNoVirtual());
    sensor_metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.cloud.proto.AddRangefinderDataResponse.sensor_metadata)
  return sensor_metadata_;
}
inline void AddRangefinderDataResponse::set_allocated_sensor_metadata(::cartographer::cloud::proto::SensorMetadata* sensor_metadata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensor_metadata_;
  }
  if (sensor_metadata) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor_metadata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor_metadata, submessage_arena);
    }
    
  } else {
    
  }
  sensor_metadata_ = sensor_metadata;
  // @@protoc_insertion_point(field_set_allocated:cartographer.cloud.proto.AddRangefinderDataResponse.sensor_metadata)
}

// int64 timestamp = 2;
inline void AddRangefinderDataResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AddRangefinderDataResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:cartographer.cloud.proto.AddRangefinderDataResponse.timestamp)
  return timestamp_;
}
inline void AddRangefinderDataResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:cartographer.cloud.proto.AddRangefinderDataResponse.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cloud
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_cartographer_2fcloud_2fproto_2fmap_5fbuilder_5fservice_2eproto
