// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/grid_2d.proto

#include "cartographer/mapping/proto/2d/grid_2d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Grid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProbabilityGrid_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5f2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TSDF2D_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5f2d_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class Grid2D_CellBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Grid2D_CellBox> _instance;
} _Grid2D_CellBox_default_instance_;
class Grid2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Grid2D> _instance;
  const ::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d_;
  const ::cartographer::mapping::proto::TSDF2D* tsdf_2d_;
} _Grid2D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsGrid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Grid2D_CellBox_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Grid2D_CellBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Grid2D_CellBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Grid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGrid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto}, {}};

static void InitDefaultsGrid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_Grid2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::Grid2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::Grid2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Grid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsGrid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto}, {
      &scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto.base,
      &scc_info_Grid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base,
      &scc_info_ProbabilityGrid_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto.base,
      &scc_info_TSDF2D_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5f2d_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Grid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Grid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, max_x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, max_y_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, min_x_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D_CellBox, min_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, limits_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, cells_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, known_cells_box_),
  offsetof(::cartographer::mapping::proto::Grid2DDefaultTypeInternal, probability_grid_2d_),
  offsetof(::cartographer::mapping::proto::Grid2DDefaultTypeInternal, tsdf_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, min_correspondence_cost_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, max_correspondence_cost_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::Grid2D, grid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::Grid2D_CellBox)},
  { 9, -1, sizeof(::cartographer::mapping::proto::Grid2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Grid2D_CellBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_Grid2D_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, "cartographer/mapping/proto/2d/grid_2d.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, 2, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto[] =
  "\n+cartographer/mapping/proto/2d/grid_2d."
  "proto\022\032cartographer.mapping.proto\032.carto"
  "grapher/mapping/proto/2d/map_limits.prot"
  "o\0324cartographer/mapping/proto/2d/probabi"
  "lity_grid.proto\032+cartographer/mapping/pr"
  "oto/2d/tsdf_2d.proto\"\247\003\n\006Grid2D\0225\n\006limit"
  "s\030\001 \001(\0132%.cartographer.mapping.proto.Map"
  "Limits\022\r\n\005cells\030\002 \003(\005\022C\n\017known_cells_box"
  "\030\003 \001(\0132*.cartographer.mapping.proto.Grid"
  "2D.CellBox\022J\n\023probability_grid_2d\030\004 \001(\0132"
  "+.cartographer.mapping.proto.Probability"
  "GridH\000\0225\n\007tsdf_2d\030\005 \001(\0132\".cartographer.m"
  "apping.proto.TSDF2DH\000\022\037\n\027min_corresponde"
  "nce_cost\030\006 \001(\002\022\037\n\027max_correspondence_cos"
  "t\030\007 \001(\002\032E\n\007CellBox\022\r\n\005max_x\030\001 \001(\005\022\r\n\005max"
  "_y\030\002 \001(\005\022\r\n\005min_x\030\003 \001(\005\022\r\n\005min_y\030\004 \001(\005B\006"
  "\n\004gridb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto,
  "cartographer/mapping/proto/2d/grid_2d.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, 654,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5f2d_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void Grid2D_CellBox::InitAsDefaultInstance() {
}
class Grid2D_CellBox::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D_CellBox::kMaxXFieldNumber;
const int Grid2D_CellBox::kMaxYFieldNumber;
const int Grid2D_CellBox::kMinXFieldNumber;
const int Grid2D_CellBox::kMinYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D_CellBox::Grid2D_CellBox()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D.CellBox)
}
Grid2D_CellBox::Grid2D_CellBox(const Grid2D_CellBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_x_, &from.max_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_y_) -
    reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D.CellBox)
}

void Grid2D_CellBox::SharedCtor() {
  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
}

Grid2D_CellBox::~Grid2D_CellBox() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D.CellBox)
  SharedDtor();
}

void Grid2D_CellBox::SharedDtor() {
}

void Grid2D_CellBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grid2D_CellBox& Grid2D_CellBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Grid2D_CellBox_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base);
  return *internal_default_instance();
}


void Grid2D_CellBox::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_y_) -
      reinterpret_cast<char*>(&max_x_)) + sizeof(min_y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grid2D_CellBox::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Grid2D_CellBox*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 max_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 max_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_max_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 min_x = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_min_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 min_y = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_min_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grid2D_CellBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D.CellBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D.CellBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D.CellBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grid2D_CellBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_x(), output);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_y(), output);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_x(), output);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D.CellBox)
}

::google::protobuf::uint8* Grid2D_CellBox::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D.CellBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_x(), target);
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_y(), target);
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_x(), target);
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D.CellBox)
  return target;
}

size_t Grid2D_CellBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D.CellBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_x = 1;
  if (this->max_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_x());
  }

  // int32 max_y = 2;
  if (this->max_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_y());
  }

  // int32 min_x = 3;
  if (this->min_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_x());
  }

  // int32 min_y = 4;
  if (this->min_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid2D_CellBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid2D_CellBox* source =
      ::google::protobuf::DynamicCastToGenerated<Grid2D_CellBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D.CellBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D.CellBox)
    MergeFrom(*source);
  }
}

void Grid2D_CellBox::MergeFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_x() != 0) {
    set_max_x(from.max_x());
  }
  if (from.max_y() != 0) {
    set_max_y(from.max_y());
  }
  if (from.min_x() != 0) {
    set_min_x(from.min_x());
  }
  if (from.min_y() != 0) {
    set_min_y(from.min_y());
  }
}

void Grid2D_CellBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D_CellBox::CopyFrom(const Grid2D_CellBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D.CellBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D_CellBox::IsInitialized() const {
  return true;
}

void Grid2D_CellBox::Swap(Grid2D_CellBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D_CellBox::InternalSwap(Grid2D_CellBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_x_, other->max_x_);
  swap(max_y_, other->max_y_);
  swap(min_x_, other->min_x_);
  swap(min_y_, other->min_y_);
}

::google::protobuf::Metadata Grid2D_CellBox::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Grid2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_Grid2D_default_instance_._instance.get_mutable()->limits_ = const_cast< ::cartographer::mapping::proto::MapLimits*>(
      ::cartographer::mapping::proto::MapLimits::internal_default_instance());
  ::cartographer::mapping::proto::_Grid2D_default_instance_._instance.get_mutable()->known_cells_box_ = const_cast< ::cartographer::mapping::proto::Grid2D_CellBox*>(
      ::cartographer::mapping::proto::Grid2D_CellBox::internal_default_instance());
  ::cartographer::mapping::proto::_Grid2D_default_instance_.probability_grid_2d_ = const_cast< ::cartographer::mapping::proto::ProbabilityGrid*>(
      ::cartographer::mapping::proto::ProbabilityGrid::internal_default_instance());
  ::cartographer::mapping::proto::_Grid2D_default_instance_.tsdf_2d_ = const_cast< ::cartographer::mapping::proto::TSDF2D*>(
      ::cartographer::mapping::proto::TSDF2D::internal_default_instance());
}
class Grid2D::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::MapLimits& limits(const Grid2D* msg);
  static const ::cartographer::mapping::proto::Grid2D_CellBox& known_cells_box(const Grid2D* msg);
  static const ::cartographer::mapping::proto::ProbabilityGrid& probability_grid_2d(const Grid2D* msg);
  static const ::cartographer::mapping::proto::TSDF2D& tsdf_2d(const Grid2D* msg);
};

const ::cartographer::mapping::proto::MapLimits&
Grid2D::HasBitSetters::limits(const Grid2D* msg) {
  return *msg->limits_;
}
const ::cartographer::mapping::proto::Grid2D_CellBox&
Grid2D::HasBitSetters::known_cells_box(const Grid2D* msg) {
  return *msg->known_cells_box_;
}
const ::cartographer::mapping::proto::ProbabilityGrid&
Grid2D::HasBitSetters::probability_grid_2d(const Grid2D* msg) {
  return *msg->grid_.probability_grid_2d_;
}
const ::cartographer::mapping::proto::TSDF2D&
Grid2D::HasBitSetters::tsdf_2d(const Grid2D* msg) {
  return *msg->grid_.tsdf_2d_;
}
void Grid2D::clear_limits() {
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
}
void Grid2D::set_allocated_probability_grid_2d(::cartographer::mapping::proto::ProbabilityGrid* probability_grid_2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_grid();
  if (probability_grid_2d) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      probability_grid_2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, probability_grid_2d, submessage_arena);
    }
    set_has_probability_grid_2d();
    grid_.probability_grid_2d_ = probability_grid_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.probability_grid_2d)
}
void Grid2D::clear_probability_grid_2d() {
  if (has_probability_grid_2d()) {
    delete grid_.probability_grid_2d_;
    clear_has_grid();
  }
}
void Grid2D::set_allocated_tsdf_2d(::cartographer::mapping::proto::TSDF2D* tsdf_2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_grid();
  if (tsdf_2d) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tsdf_2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, tsdf_2d, submessage_arena);
    }
    set_has_tsdf_2d();
    grid_.tsdf_2d_ = tsdf_2d;
  }
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.Grid2D.tsdf_2d)
}
void Grid2D::clear_tsdf_2d() {
  if (has_tsdf_2d()) {
    delete grid_.tsdf_2d_;
    clear_has_grid();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid2D::kLimitsFieldNumber;
const int Grid2D::kCellsFieldNumber;
const int Grid2D::kKnownCellsBoxFieldNumber;
const int Grid2D::kProbabilityGrid2DFieldNumber;
const int Grid2D::kTsdf2DFieldNumber;
const int Grid2D::kMinCorrespondenceCostFieldNumber;
const int Grid2D::kMaxCorrespondenceCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid2D::Grid2D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.Grid2D)
}
Grid2D::Grid2D(const Grid2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_limits()) {
    limits_ = new ::cartographer::mapping::proto::MapLimits(*from.limits_);
  } else {
    limits_ = nullptr;
  }
  if (from.has_known_cells_box()) {
    known_cells_box_ = new ::cartographer::mapping::proto::Grid2D_CellBox(*from.known_cells_box_);
  } else {
    known_cells_box_ = nullptr;
  }
  ::memcpy(&min_correspondence_cost_, &from.min_correspondence_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_correspondence_cost_) -
    reinterpret_cast<char*>(&min_correspondence_cost_)) + sizeof(max_correspondence_cost_));
  clear_has_grid();
  switch (from.grid_case()) {
    case kProbabilityGrid2D: {
      mutable_probability_grid_2d()->::cartographer::mapping::proto::ProbabilityGrid::MergeFrom(from.probability_grid_2d());
      break;
    }
    case kTsdf2D: {
      mutable_tsdf_2d()->::cartographer::mapping::proto::TSDF2D::MergeFrom(from.tsdf_2d());
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.Grid2D)
}

void Grid2D::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Grid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base);
  ::memset(&limits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_correspondence_cost_) -
      reinterpret_cast<char*>(&limits_)) + sizeof(max_correspondence_cost_));
  clear_has_grid();
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.Grid2D)
  SharedDtor();
}

void Grid2D::SharedDtor() {
  if (this != internal_default_instance()) delete limits_;
  if (this != internal_default_instance()) delete known_cells_box_;
  if (has_grid()) {
    clear_grid();
  }
}

void Grid2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grid2D& Grid2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Grid2D_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto.base);
  return *internal_default_instance();
}


void Grid2D::clear_grid() {
// @@protoc_insertion_point(one_of_clear_start:cartographer.mapping.proto.Grid2D)
  switch (grid_case()) {
    case kProbabilityGrid2D: {
      delete grid_.probability_grid_2d_;
      break;
    }
    case kTsdf2D: {
      delete grid_.tsdf_2d_;
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GRID_NOT_SET;
}


void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  if (GetArenaNoVirtual() == nullptr && limits_ != nullptr) {
    delete limits_;
  }
  limits_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && known_cells_box_ != nullptr) {
    delete known_cells_box_;
  }
  known_cells_box_ = nullptr;
  ::memset(&min_correspondence_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_correspondence_cost_) -
      reinterpret_cast<char*>(&min_correspondence_cost_)) + sizeof(max_correspondence_cost_));
  clear_grid();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grid2D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Grid2D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.MapLimits limits = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::MapLimits::_InternalParse;
        object = msg->mutable_limits();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated int32 cells = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_cells();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        do {
          msg->add_cells(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
        break;
      }
      // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::Grid2D_CellBox::_InternalParse;
        object = msg->mutable_known_cells_box();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::ProbabilityGrid::_InternalParse;
        object = msg->mutable_probability_grid_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TSDF2D::_InternalParse;
        object = msg->mutable_tsdf_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // float min_correspondence_cost = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_min_correspondence_cost(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float max_correspondence_cost = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_max_correspondence_cost(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grid2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.Grid2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.MapLimits limits = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 cells = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cells())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_cells())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_known_cells_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probability_grid_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsdf_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_correspondence_cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_correspondence_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_correspondence_cost = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_correspondence_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.Grid2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.Grid2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grid2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::limits(this), output);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cells_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->cells(i), output);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::known_cells_box(this), output);
  }

  // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::probability_grid_2d(this), output);
  }

  // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
  if (has_tsdf_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::tsdf_2d(this), output);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min_correspondence_cost(), output);
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_correspondence_cost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.Grid2D)
}

::google::protobuf::uint8* Grid2D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.Grid2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::limits(this), target);
  }

  // repeated int32 cells = 2;
  if (this->cells_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _cells_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->cells_, target);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::known_cells_box(this), target);
  }

  // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
  if (has_probability_grid_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::probability_grid_2d(this), target);
  }

  // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
  if (has_tsdf_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::tsdf_2d(this), target);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min_correspondence_cost(), target);
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_correspondence_cost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.Grid2D)
  return target;
}

size_t Grid2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.Grid2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cells = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->cells_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _cells_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .cartographer.mapping.proto.MapLimits limits = 1;
  if (this->has_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *limits_);
  }

  // .cartographer.mapping.proto.Grid2D.CellBox known_cells_box = 3;
  if (this->has_known_cells_box()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *known_cells_box_);
  }

  // float min_correspondence_cost = 6;
  if (this->min_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  // float max_correspondence_cost = 7;
  if (this->max_correspondence_cost() != 0) {
    total_size += 1 + 4;
  }

  switch (grid_case()) {
    // .cartographer.mapping.proto.ProbabilityGrid probability_grid_2d = 4;
    case kProbabilityGrid2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *grid_.probability_grid_2d_);
      break;
    }
    // .cartographer.mapping.proto.TSDF2D tsdf_2d = 5;
    case kTsdf2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *grid_.tsdf_2d_);
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid2D* source =
      ::google::protobuf::DynamicCastToGenerated<Grid2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.Grid2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.Grid2D)
    MergeFrom(*source);
  }
}

void Grid2D::MergeFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  if (from.has_limits()) {
    mutable_limits()->::cartographer::mapping::proto::MapLimits::MergeFrom(from.limits());
  }
  if (from.has_known_cells_box()) {
    mutable_known_cells_box()->::cartographer::mapping::proto::Grid2D_CellBox::MergeFrom(from.known_cells_box());
  }
  if (from.min_correspondence_cost() != 0) {
    set_min_correspondence_cost(from.min_correspondence_cost());
  }
  if (from.max_correspondence_cost() != 0) {
    set_max_correspondence_cost(from.max_correspondence_cost());
  }
  switch (from.grid_case()) {
    case kProbabilityGrid2D: {
      mutable_probability_grid_2d()->::cartographer::mapping::proto::ProbabilityGrid::MergeFrom(from.probability_grid_2d());
      break;
    }
    case kTsdf2D: {
      mutable_tsdf_2d()->::cartographer::mapping::proto::TSDF2D::MergeFrom(from.tsdf_2d());
      break;
    }
    case GRID_NOT_SET: {
      break;
    }
  }
}

void Grid2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {
  return true;
}

void Grid2D::Swap(Grid2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid2D::InternalSwap(Grid2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
  swap(limits_, other->limits_);
  swap(known_cells_box_, other->known_cells_box_);
  swap(min_correspondence_cost_, other->min_correspondence_cost_);
  swap(max_correspondence_cost_, other->max_correspondence_cost_);
  swap(grid_, other->grid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata Grid2D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fgrid_5f2d_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Grid2D_CellBox* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Grid2D_CellBox >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Grid2D_CellBox >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::Grid2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::Grid2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::Grid2D >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
