// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/2d/map_limits.proto

#include "cartographer/mapping/proto/2d/map_limits.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2fcell_5flimits_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CellLimits_cartographer_2fmapping_2fproto_2f2d_2fcell_5flimits_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class MapLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapLimits> _instance;
} _MapLimits_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsMapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_MapLimits_default_instance_;
    new (ptr) ::cartographer::mapping::proto::MapLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::MapLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto}, {
      &scc_info_Vector2d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_CellLimits_cartographer_2fmapping_2fproto_2f2d_2fcell_5flimits_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, resolution_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, max_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::MapLimits, cell_limits_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::MapLimits)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_MapLimits_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, "cartographer/mapping/proto/2d/map_limits.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto[] =
  "\n.cartographer/mapping/proto/2d/map_limi"
  "ts.proto\022\032cartographer.mapping.proto\032/ca"
  "rtographer/mapping/proto/2d/cell_limits."
  "proto\032,cartographer/transform/proto/tran"
  "sform.proto\"\221\001\n\tMapLimits\022\022\n\nresolution\030"
  "\001 \001(\001\0223\n\003max\030\002 \001(\0132&.cartographer.transf"
  "orm.proto.Vector2d\022;\n\013cell_limits\030\003 \001(\0132"
  "&.cartographer.mapping.proto.CellLimitsb"
  "\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto,
  "cartographer/mapping/proto/2d/map_limits.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, 327,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fcell_5flimits_2eproto,
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void MapLimits::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_MapLimits_default_instance_._instance.get_mutable()->max_ = const_cast< ::cartographer::transform::proto::Vector2d*>(
      ::cartographer::transform::proto::Vector2d::internal_default_instance());
  ::cartographer::mapping::proto::_MapLimits_default_instance_._instance.get_mutable()->cell_limits_ = const_cast< ::cartographer::mapping::proto::CellLimits*>(
      ::cartographer::mapping::proto::CellLimits::internal_default_instance());
}
class MapLimits::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector2d& max(const MapLimits* msg);
  static const ::cartographer::mapping::proto::CellLimits& cell_limits(const MapLimits* msg);
};

const ::cartographer::transform::proto::Vector2d&
MapLimits::HasBitSetters::max(const MapLimits* msg) {
  return *msg->max_;
}
const ::cartographer::mapping::proto::CellLimits&
MapLimits::HasBitSetters::cell_limits(const MapLimits* msg) {
  return *msg->cell_limits_;
}
void MapLimits::clear_max() {
  if (GetArenaNoVirtual() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
void MapLimits::clear_cell_limits() {
  if (GetArenaNoVirtual() == nullptr && cell_limits_ != nullptr) {
    delete cell_limits_;
  }
  cell_limits_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapLimits::kResolutionFieldNumber;
const int MapLimits::kMaxFieldNumber;
const int MapLimits::kCellLimitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapLimits::MapLimits()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.MapLimits)
}
MapLimits::MapLimits(const MapLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max()) {
    max_ = new ::cartographer::transform::proto::Vector2d(*from.max_);
  } else {
    max_ = nullptr;
  }
  if (from.has_cell_limits()) {
    cell_limits_ = new ::cartographer::mapping::proto::CellLimits(*from.cell_limits_);
  } else {
    cell_limits_ = nullptr;
  }
  resolution_ = from.resolution_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.MapLimits)
}

void MapLimits::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto.base);
  ::memset(&max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&max_)) + sizeof(resolution_));
}

MapLimits::~MapLimits() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.MapLimits)
  SharedDtor();
}

void MapLimits::SharedDtor() {
  if (this != internal_default_instance()) delete max_;
  if (this != internal_default_instance()) delete cell_limits_;
}

void MapLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapLimits& MapLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MapLimits_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto.base);
  return *internal_default_instance();
}


void MapLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.MapLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cell_limits_ != nullptr) {
    delete cell_limits_;
  }
  cell_limits_ = nullptr;
  resolution_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapLimits::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MapLimits*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double resolution = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_resolution(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // .cartographer.transform.proto.Vector2d max = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector2d::_InternalParse;
        object = msg->mutable_max();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.CellLimits cell_limits = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::CellLimits::_InternalParse;
        object = msg->mutable_cell_limits();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.MapLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double resolution = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector2d max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.CellLimits cell_limits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cell_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.MapLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.MapLimits)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.MapLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->resolution(), output);
  }

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::max(this), output);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::cell_limits(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.MapLimits)
}

::google::protobuf::uint8* MapLimits::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.MapLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->resolution(), target);
  }

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::max(this), target);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::cell_limits(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.MapLimits)
  return target;
}

size_t MapLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.MapLimits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector2d max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *max_);
  }

  // .cartographer.mapping.proto.CellLimits cell_limits = 3;
  if (this->has_cell_limits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cell_limits_);
  }

  // double resolution = 1;
  if (this->resolution() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.MapLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const MapLimits* source =
      ::google::protobuf::DynamicCastToGenerated<MapLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.MapLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.MapLimits)
    MergeFrom(*source);
  }
}

void MapLimits::MergeFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.MapLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max()) {
    mutable_max()->::cartographer::transform::proto::Vector2d::MergeFrom(from.max());
  }
  if (from.has_cell_limits()) {
    mutable_cell_limits()->::cartographer::mapping::proto::CellLimits::MergeFrom(from.cell_limits());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
}

void MapLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapLimits::CopyFrom(const MapLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.MapLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLimits::IsInitialized() const {
  return true;
}

void MapLimits::Swap(MapLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapLimits::InternalSwap(MapLimits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_, other->max_);
  swap(cell_limits_, other->cell_limits_);
  swap(resolution_, other->resolution_);
}

::google::protobuf::Metadata MapLimits::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2f2d_2fmap_5flimits_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::MapLimits* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::MapLimits >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::MapLimits >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
