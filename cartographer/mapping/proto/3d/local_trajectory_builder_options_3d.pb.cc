// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto

#include "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SubmapsOptions3D_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MotionFilterOptions_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RealTimeCorrelativeScanMatcherOptions_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class LocalTrajectoryBuilderOptions3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalTrajectoryBuilderOptions3D> _instance;
} _LocalTrajectoryBuilderOptions3D_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsLocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsLocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto}, {
      &scc_info_AdaptiveVoxelFilterOptions_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto.base,
      &scc_info_RealTimeCorrelativeScanMatcherOptions_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto.base,
      &scc_info_CeresScanMatcherOptions3D_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto.base,
      &scc_info_MotionFilterOptions_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto.base,
      &scc_info_SubmapsOptions3D_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, min_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, max_range_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, num_accumulated_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, voxel_filter_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, high_resolution_adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, low_resolution_adaptive_voxel_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, use_online_correlative_scan_matching_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, real_time_correlative_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, ceres_scan_matcher_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, motion_filter_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, imu_gravity_time_constant_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, rotational_histogram_size_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D, submaps_options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto[] =
  "\nGcartographer/mapping/proto/3d/local_tr"
  "ajectory_builder_options_3d.proto\022\032carto"
  "grapher.mapping.proto\0326cartographer/mapp"
  "ing/proto/3d/submaps_options_3d.proto\0326c"
  "artographer/mapping/proto/motion_filter_"
  "options.proto\032Lcartographer/mapping/prot"
  "o/scan_matching/ceres_scan_matcher_optio"
  "ns_3d.proto\032Ycartographer/mapping/proto/"
  "scan_matching/real_time_correlative_scan"
  "_matcher_options.proto\032=cartographer/sen"
  "sor/proto/adaptive_voxel_filter_options."
  "proto\"\333\006\n\037LocalTrajectoryBuilderOptions3"
  "D\022\021\n\tmin_range\030\001 \001(\002\022\021\n\tmax_range\030\002 \001(\002\022"
  "\"\n\032num_accumulated_range_data\030\003 \001(\005\022\031\n\021v"
  "oxel_filter_size\030\004 \001(\002\022l\n-high_resolutio"
  "n_adaptive_voxel_filter_options\030\005 \001(\01325."
  "cartographer.sensor.proto.AdaptiveVoxelF"
  "ilterOptions\022k\n,low_resolution_adaptive_"
  "voxel_filter_options\030\014 \001(\01325.cartographe"
  "r.sensor.proto.AdaptiveVoxelFilterOption"
  "s\022,\n$use_online_correlative_scan_matchin"
  "g\030\r \001(\010\022\203\001\n*real_time_correlative_scan_m"
  "atcher_options\030\016 \001(\0132O.cartographer.mapp"
  "ing.scan_matching.proto.RealTimeCorrelat"
  "iveScanMatcherOptions\022g\n\032ceres_scan_matc"
  "her_options\030\006 \001(\0132C.cartographer.mapping"
  ".scan_matching.proto.CeresScanMatcherOpt"
  "ions3D\022N\n\025motion_filter_options\030\007 \001(\0132/."
  "cartographer.mapping.proto.MotionFilterO"
  "ptions\022!\n\031imu_gravity_time_constant\030\017 \001("
  "\001\022!\n\031rotational_histogram_size\030\021 \001(\005\022E\n\017"
  "submaps_options\030\010 \001(\0132,.cartographer.map"
  "ping.proto.SubmapsOptions3Db\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto,
  "cartographer/mapping/proto/3d/local_trajectory_builder_options_3d.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, 1315,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[5] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2fsubmaps_5foptions_5f3d_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fmotion_5ffilter_5foptions_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2fceres_5fscan_5fmatcher_5foptions_5f3d_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fscan_5fmatching_2freal_5ftime_5fcorrelative_5fscan_5fmatcher_5foptions_2eproto,
    ::AddDescriptors_cartographer_2fsensor_2fproto_2fadaptive_5fvoxel_5ffilter_5foptions_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto, deps, 5);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LocalTrajectoryBuilderOptions3D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->high_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->low_resolution_adaptive_voxel_filter_options_ = const_cast< ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions*>(
      ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->real_time_correlative_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions*>(
      ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->ceres_scan_matcher_options_ = const_cast< ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D*>(
      ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->motion_filter_options_ = const_cast< ::cartographer::mapping::proto::MotionFilterOptions*>(
      ::cartographer::mapping::proto::MotionFilterOptions::internal_default_instance());
  ::cartographer::mapping::proto::_LocalTrajectoryBuilderOptions3D_default_instance_._instance.get_mutable()->submaps_options_ = const_cast< ::cartographer::mapping::proto::SubmapsOptions3D*>(
      ::cartographer::mapping::proto::SubmapsOptions3D::internal_default_instance());
}
class LocalTrajectoryBuilderOptions3D::HasBitSetters {
 public:
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& high_resolution_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions3D* msg);
  static const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions& low_resolution_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions3D* msg);
  static const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions& real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions3D* msg);
  static const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D& ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions3D* msg);
  static const ::cartographer::mapping::proto::MotionFilterOptions& motion_filter_options(const LocalTrajectoryBuilderOptions3D* msg);
  static const ::cartographer::mapping::proto::SubmapsOptions3D& submaps_options(const LocalTrajectoryBuilderOptions3D* msg);
};

const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions3D::HasBitSetters::high_resolution_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->high_resolution_adaptive_voxel_filter_options_;
}
const ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions&
LocalTrajectoryBuilderOptions3D::HasBitSetters::low_resolution_adaptive_voxel_filter_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->low_resolution_adaptive_voxel_filter_options_;
}
const ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions&
LocalTrajectoryBuilderOptions3D::HasBitSetters::real_time_correlative_scan_matcher_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->real_time_correlative_scan_matcher_options_;
}
const ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D&
LocalTrajectoryBuilderOptions3D::HasBitSetters::ceres_scan_matcher_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->ceres_scan_matcher_options_;
}
const ::cartographer::mapping::proto::MotionFilterOptions&
LocalTrajectoryBuilderOptions3D::HasBitSetters::motion_filter_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->motion_filter_options_;
}
const ::cartographer::mapping::proto::SubmapsOptions3D&
LocalTrajectoryBuilderOptions3D::HasBitSetters::submaps_options(const LocalTrajectoryBuilderOptions3D* msg) {
  return *msg->submaps_options_;
}
void LocalTrajectoryBuilderOptions3D::clear_high_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == nullptr && high_resolution_adaptive_voxel_filter_options_ != nullptr) {
    delete high_resolution_adaptive_voxel_filter_options_;
  }
  high_resolution_adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions3D::clear_low_resolution_adaptive_voxel_filter_options() {
  if (GetArenaNoVirtual() == nullptr && low_resolution_adaptive_voxel_filter_options_ != nullptr) {
    delete low_resolution_adaptive_voxel_filter_options_;
  }
  low_resolution_adaptive_voxel_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions3D::clear_real_time_correlative_scan_matcher_options() {
  if (GetArenaNoVirtual() == nullptr && real_time_correlative_scan_matcher_options_ != nullptr) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions3D::clear_ceres_scan_matcher_options() {
  if (GetArenaNoVirtual() == nullptr && ceres_scan_matcher_options_ != nullptr) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions3D::clear_motion_filter_options() {
  if (GetArenaNoVirtual() == nullptr && motion_filter_options_ != nullptr) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = nullptr;
}
void LocalTrajectoryBuilderOptions3D::clear_submaps_options() {
  if (GetArenaNoVirtual() == nullptr && submaps_options_ != nullptr) {
    delete submaps_options_;
  }
  submaps_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalTrajectoryBuilderOptions3D::kMinRangeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kMaxRangeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kNumAccumulatedRangeDataFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kVoxelFilterSizeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kHighResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kLowResolutionAdaptiveVoxelFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kUseOnlineCorrelativeScanMatchingFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kRealTimeCorrelativeScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kCeresScanMatcherOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kMotionFilterOptionsFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kImuGravityTimeConstantFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kRotationalHistogramSizeFieldNumber;
const int LocalTrajectoryBuilderOptions3D::kSubmapsOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalTrajectoryBuilderOptions3D::LocalTrajectoryBuilderOptions3D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}
LocalTrajectoryBuilderOptions3D::LocalTrajectoryBuilderOptions3D(const LocalTrajectoryBuilderOptions3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_high_resolution_adaptive_voxel_filter_options()) {
    high_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.high_resolution_adaptive_voxel_filter_options_);
  } else {
    high_resolution_adaptive_voxel_filter_options_ = nullptr;
  }
  if (from.has_ceres_scan_matcher_options()) {
    ceres_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D(*from.ceres_scan_matcher_options_);
  } else {
    ceres_scan_matcher_options_ = nullptr;
  }
  if (from.has_motion_filter_options()) {
    motion_filter_options_ = new ::cartographer::mapping::proto::MotionFilterOptions(*from.motion_filter_options_);
  } else {
    motion_filter_options_ = nullptr;
  }
  if (from.has_submaps_options()) {
    submaps_options_ = new ::cartographer::mapping::proto::SubmapsOptions3D(*from.submaps_options_);
  } else {
    submaps_options_ = nullptr;
  }
  if (from.has_low_resolution_adaptive_voxel_filter_options()) {
    low_resolution_adaptive_voxel_filter_options_ = new ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions(*from.low_resolution_adaptive_voxel_filter_options_);
  } else {
    low_resolution_adaptive_voxel_filter_options_ = nullptr;
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    real_time_correlative_scan_matcher_options_ = new ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions(*from.real_time_correlative_scan_matcher_options_);
  } else {
    real_time_correlative_scan_matcher_options_ = nullptr;
  }
  ::memcpy(&min_range_, &from.min_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotational_histogram_size_) -
    reinterpret_cast<char*>(&min_range_)) + sizeof(rotational_histogram_size_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}

void LocalTrajectoryBuilderOptions3D::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto.base);
  ::memset(&high_resolution_adaptive_voxel_filter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_histogram_size_) -
      reinterpret_cast<char*>(&high_resolution_adaptive_voxel_filter_options_)) + sizeof(rotational_histogram_size_));
}

LocalTrajectoryBuilderOptions3D::~LocalTrajectoryBuilderOptions3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  SharedDtor();
}

void LocalTrajectoryBuilderOptions3D::SharedDtor() {
  if (this != internal_default_instance()) delete high_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete ceres_scan_matcher_options_;
  if (this != internal_default_instance()) delete motion_filter_options_;
  if (this != internal_default_instance()) delete submaps_options_;
  if (this != internal_default_instance()) delete low_resolution_adaptive_voxel_filter_options_;
  if (this != internal_default_instance()) delete real_time_correlative_scan_matcher_options_;
}

void LocalTrajectoryBuilderOptions3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalTrajectoryBuilderOptions3D& LocalTrajectoryBuilderOptions3D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto.base);
  return *internal_default_instance();
}


void LocalTrajectoryBuilderOptions3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && high_resolution_adaptive_voxel_filter_options_ != nullptr) {
    delete high_resolution_adaptive_voxel_filter_options_;
  }
  high_resolution_adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ceres_scan_matcher_options_ != nullptr) {
    delete ceres_scan_matcher_options_;
  }
  ceres_scan_matcher_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && motion_filter_options_ != nullptr) {
    delete motion_filter_options_;
  }
  motion_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submaps_options_ != nullptr) {
    delete submaps_options_;
  }
  submaps_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_resolution_adaptive_voxel_filter_options_ != nullptr) {
    delete low_resolution_adaptive_voxel_filter_options_;
  }
  low_resolution_adaptive_voxel_filter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && real_time_correlative_scan_matcher_options_ != nullptr) {
    delete real_time_correlative_scan_matcher_options_;
  }
  real_time_correlative_scan_matcher_options_ = nullptr;
  ::memset(&min_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotational_histogram_size_) -
      reinterpret_cast<char*>(&min_range_)) + sizeof(rotational_histogram_size_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalTrajectoryBuilderOptions3D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LocalTrajectoryBuilderOptions3D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float min_range = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_min_range(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float max_range = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_max_range(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // int32 num_accumulated_range_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_num_accumulated_range_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float voxel_filter_size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_voxel_filter_size(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::_InternalParse;
        object = msg->mutable_high_resolution_adaptive_voxel_filter_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::_InternalParse;
        object = msg->mutable_ceres_scan_matcher_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::MotionFilterOptions::_InternalParse;
        object = msg->mutable_motion_filter_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::SubmapsOptions3D::_InternalParse;
        object = msg->mutable_submaps_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::_InternalParse;
        object = msg->mutable_low_resolution_adaptive_voxel_filter_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool use_online_correlative_scan_matching = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_use_online_correlative_scan_matching(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::_InternalParse;
        object = msg->mutable_real_time_correlative_scan_matcher_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double imu_gravity_time_constant = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_imu_gravity_time_constant(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 rotational_histogram_size = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_rotational_histogram_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalTrajectoryBuilderOptions3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float min_range = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_range = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_accumulated_range_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_accumulated_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float voxel_filter_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voxel_filter_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ceres_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_motion_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submaps_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_resolution_adaptive_voxel_filter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_online_correlative_scan_matching = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_correlative_scan_matching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_real_time_correlative_scan_matcher_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double imu_gravity_time_constant = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &imu_gravity_time_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rotational_histogram_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotational_histogram_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalTrajectoryBuilderOptions3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_range = 1;
  if (this->min_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_range(), output);
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_range(), output);
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_accumulated_range_data(), output);
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->voxel_filter_size(), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::high_resolution_adaptive_voxel_filter_options(this), output);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::ceres_scan_matcher_options(this), output);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::motion_filter_options(this), output);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::submaps_options(this), output);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::low_resolution_adaptive_voxel_filter_options(this), output);
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->use_online_correlative_scan_matching(), output);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::real_time_correlative_scan_matcher_options(this), output);
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->imu_gravity_time_constant(), output);
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rotational_histogram_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
}

::google::protobuf::uint8* LocalTrajectoryBuilderOptions3D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float min_range = 1;
  if (this->min_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_range(), target);
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_range(), target);
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_accumulated_range_data(), target);
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->voxel_filter_size(), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::high_resolution_adaptive_voxel_filter_options(this), target);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::ceres_scan_matcher_options(this), target);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::motion_filter_options(this), target);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::submaps_options(this), target);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::low_resolution_adaptive_voxel_filter_options(this), target);
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->use_online_correlative_scan_matching(), target);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::real_time_correlative_scan_matcher_options(this), target);
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->imu_gravity_time_constant(), target);
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rotational_histogram_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  return target;
}

size_t LocalTrajectoryBuilderOptions3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions high_resolution_adaptive_voxel_filter_options = 5;
  if (this->has_high_resolution_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_resolution_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.CeresScanMatcherOptions3D ceres_scan_matcher_options = 6;
  if (this->has_ceres_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ceres_scan_matcher_options_);
  }

  // .cartographer.mapping.proto.MotionFilterOptions motion_filter_options = 7;
  if (this->has_motion_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *motion_filter_options_);
  }

  // .cartographer.mapping.proto.SubmapsOptions3D submaps_options = 8;
  if (this->has_submaps_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submaps_options_);
  }

  // .cartographer.sensor.proto.AdaptiveVoxelFilterOptions low_resolution_adaptive_voxel_filter_options = 12;
  if (this->has_low_resolution_adaptive_voxel_filter_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_resolution_adaptive_voxel_filter_options_);
  }

  // .cartographer.mapping.scan_matching.proto.RealTimeCorrelativeScanMatcherOptions real_time_correlative_scan_matcher_options = 14;
  if (this->has_real_time_correlative_scan_matcher_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *real_time_correlative_scan_matcher_options_);
  }

  // float min_range = 1;
  if (this->min_range() != 0) {
    total_size += 1 + 4;
  }

  // float max_range = 2;
  if (this->max_range() != 0) {
    total_size += 1 + 4;
  }

  // int32 num_accumulated_range_data = 3;
  if (this->num_accumulated_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_accumulated_range_data());
  }

  // float voxel_filter_size = 4;
  if (this->voxel_filter_size() != 0) {
    total_size += 1 + 4;
  }

  // double imu_gravity_time_constant = 15;
  if (this->imu_gravity_time_constant() != 0) {
    total_size += 1 + 8;
  }

  // bool use_online_correlative_scan_matching = 13;
  if (this->use_online_correlative_scan_matching() != 0) {
    total_size += 1 + 1;
  }

  // int32 rotational_histogram_size = 17;
  if (this->rotational_histogram_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rotational_histogram_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalTrajectoryBuilderOptions3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalTrajectoryBuilderOptions3D* source =
      ::google::protobuf::DynamicCastToGenerated<LocalTrajectoryBuilderOptions3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
    MergeFrom(*source);
  }
}

void LocalTrajectoryBuilderOptions3D::MergeFrom(const LocalTrajectoryBuilderOptions3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_high_resolution_adaptive_voxel_filter_options()) {
    mutable_high_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.high_resolution_adaptive_voxel_filter_options());
  }
  if (from.has_ceres_scan_matcher_options()) {
    mutable_ceres_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::CeresScanMatcherOptions3D::MergeFrom(from.ceres_scan_matcher_options());
  }
  if (from.has_motion_filter_options()) {
    mutable_motion_filter_options()->::cartographer::mapping::proto::MotionFilterOptions::MergeFrom(from.motion_filter_options());
  }
  if (from.has_submaps_options()) {
    mutable_submaps_options()->::cartographer::mapping::proto::SubmapsOptions3D::MergeFrom(from.submaps_options());
  }
  if (from.has_low_resolution_adaptive_voxel_filter_options()) {
    mutable_low_resolution_adaptive_voxel_filter_options()->::cartographer::sensor::proto::AdaptiveVoxelFilterOptions::MergeFrom(from.low_resolution_adaptive_voxel_filter_options());
  }
  if (from.has_real_time_correlative_scan_matcher_options()) {
    mutable_real_time_correlative_scan_matcher_options()->::cartographer::mapping::scan_matching::proto::RealTimeCorrelativeScanMatcherOptions::MergeFrom(from.real_time_correlative_scan_matcher_options());
  }
  if (from.min_range() != 0) {
    set_min_range(from.min_range());
  }
  if (from.max_range() != 0) {
    set_max_range(from.max_range());
  }
  if (from.num_accumulated_range_data() != 0) {
    set_num_accumulated_range_data(from.num_accumulated_range_data());
  }
  if (from.voxel_filter_size() != 0) {
    set_voxel_filter_size(from.voxel_filter_size());
  }
  if (from.imu_gravity_time_constant() != 0) {
    set_imu_gravity_time_constant(from.imu_gravity_time_constant());
  }
  if (from.use_online_correlative_scan_matching() != 0) {
    set_use_online_correlative_scan_matching(from.use_online_correlative_scan_matching());
  }
  if (from.rotational_histogram_size() != 0) {
    set_rotational_histogram_size(from.rotational_histogram_size());
  }
}

void LocalTrajectoryBuilderOptions3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalTrajectoryBuilderOptions3D::CopyFrom(const LocalTrajectoryBuilderOptions3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalTrajectoryBuilderOptions3D::IsInitialized() const {
  return true;
}

void LocalTrajectoryBuilderOptions3D::Swap(LocalTrajectoryBuilderOptions3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalTrajectoryBuilderOptions3D::InternalSwap(LocalTrajectoryBuilderOptions3D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(high_resolution_adaptive_voxel_filter_options_, other->high_resolution_adaptive_voxel_filter_options_);
  swap(ceres_scan_matcher_options_, other->ceres_scan_matcher_options_);
  swap(motion_filter_options_, other->motion_filter_options_);
  swap(submaps_options_, other->submaps_options_);
  swap(low_resolution_adaptive_voxel_filter_options_, other->low_resolution_adaptive_voxel_filter_options_);
  swap(real_time_correlative_scan_matcher_options_, other->real_time_correlative_scan_matcher_options_);
  swap(min_range_, other->min_range_);
  swap(max_range_, other->max_range_);
  swap(num_accumulated_range_data_, other->num_accumulated_range_data_);
  swap(voxel_filter_size_, other->voxel_filter_size_);
  swap(imu_gravity_time_constant_, other->imu_gravity_time_constant_);
  swap(use_online_correlative_scan_matching_, other->use_online_correlative_scan_matching_);
  swap(rotational_histogram_size_, other->rotational_histogram_size_);
}

::google::protobuf::Metadata LocalTrajectoryBuilderOptions3D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
