// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_probability_grid.proto

#ifndef PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto
#define PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cartographer/mapping/proto/2d/map_limits.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto();
namespace cartographer {
namespace mapping {
namespace proto {
class LegacyProbabilityGrid;
class LegacyProbabilityGridDefaultTypeInternal;
extern LegacyProbabilityGridDefaultTypeInternal _LegacyProbabilityGrid_default_instance_;
class LegacyProbabilityGrid_CellBox;
class LegacyProbabilityGrid_CellBoxDefaultTypeInternal;
extern LegacyProbabilityGrid_CellBoxDefaultTypeInternal _LegacyProbabilityGrid_CellBox_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> ::cartographer::mapping::proto::LegacyProbabilityGrid* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LegacyProbabilityGrid>(Arena*);
template<> ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* Arena::CreateMaybeMessage<::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

class LegacyProbabilityGrid_CellBox final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox) */ {
 public:
  LegacyProbabilityGrid_CellBox();
  virtual ~LegacyProbabilityGrid_CellBox();

  LegacyProbabilityGrid_CellBox(const LegacyProbabilityGrid_CellBox& from);

  inline LegacyProbabilityGrid_CellBox& operator=(const LegacyProbabilityGrid_CellBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacyProbabilityGrid_CellBox(LegacyProbabilityGrid_CellBox&& from) noexcept
    : LegacyProbabilityGrid_CellBox() {
    *this = ::std::move(from);
  }

  inline LegacyProbabilityGrid_CellBox& operator=(LegacyProbabilityGrid_CellBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LegacyProbabilityGrid_CellBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacyProbabilityGrid_CellBox* internal_default_instance() {
    return reinterpret_cast<const LegacyProbabilityGrid_CellBox*>(
               &_LegacyProbabilityGrid_CellBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LegacyProbabilityGrid_CellBox* other);
  friend void swap(LegacyProbabilityGrid_CellBox& a, LegacyProbabilityGrid_CellBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacyProbabilityGrid_CellBox* New() const final {
    return CreateMaybeMessage<LegacyProbabilityGrid_CellBox>(nullptr);
  }

  LegacyProbabilityGrid_CellBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LegacyProbabilityGrid_CellBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LegacyProbabilityGrid_CellBox& from);
  void MergeFrom(const LegacyProbabilityGrid_CellBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegacyProbabilityGrid_CellBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_x = 1;
  void clear_max_x();
  static const int kMaxXFieldNumber = 1;
  ::google::protobuf::int32 max_x() const;
  void set_max_x(::google::protobuf::int32 value);

  // int32 max_y = 2;
  void clear_max_y();
  static const int kMaxYFieldNumber = 2;
  ::google::protobuf::int32 max_y() const;
  void set_max_y(::google::protobuf::int32 value);

  // int32 min_x = 3;
  void clear_min_x();
  static const int kMinXFieldNumber = 3;
  ::google::protobuf::int32 min_x() const;
  void set_min_x(::google::protobuf::int32 value);

  // int32 min_y = 4;
  void clear_min_y();
  static const int kMinYFieldNumber = 4;
  ::google::protobuf::int32 min_y() const;
  void set_min_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_x_;
  ::google::protobuf::int32 max_y_;
  ::google::protobuf::int32 min_x_;
  ::google::protobuf::int32 min_y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto;
};
// -------------------------------------------------------------------

class LegacyProbabilityGrid final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cartographer.mapping.proto.LegacyProbabilityGrid) */ {
 public:
  LegacyProbabilityGrid();
  virtual ~LegacyProbabilityGrid();

  LegacyProbabilityGrid(const LegacyProbabilityGrid& from);

  inline LegacyProbabilityGrid& operator=(const LegacyProbabilityGrid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacyProbabilityGrid(LegacyProbabilityGrid&& from) noexcept
    : LegacyProbabilityGrid() {
    *this = ::std::move(from);
  }

  inline LegacyProbabilityGrid& operator=(LegacyProbabilityGrid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LegacyProbabilityGrid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacyProbabilityGrid* internal_default_instance() {
    return reinterpret_cast<const LegacyProbabilityGrid*>(
               &_LegacyProbabilityGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LegacyProbabilityGrid* other);
  friend void swap(LegacyProbabilityGrid& a, LegacyProbabilityGrid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacyProbabilityGrid* New() const final {
    return CreateMaybeMessage<LegacyProbabilityGrid>(nullptr);
  }

  LegacyProbabilityGrid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LegacyProbabilityGrid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LegacyProbabilityGrid& from);
  void MergeFrom(const LegacyProbabilityGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegacyProbabilityGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LegacyProbabilityGrid_CellBox CellBox;

  // accessors -------------------------------------------------------

  // repeated int32 cells = 2;
  int cells_size() const;
  void clear_cells();
  static const int kCellsFieldNumber = 2;
  ::google::protobuf::int32 cells(int index) const;
  void set_cells(int index, ::google::protobuf::int32 value);
  void add_cells(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cells() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cells();

  // .cartographer.mapping.proto.MapLimits limits = 1;
  bool has_limits() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 1;
  const ::cartographer::mapping::proto::MapLimits& limits() const;
  ::cartographer::mapping::proto::MapLimits* release_limits();
  ::cartographer::mapping::proto::MapLimits* mutable_limits();
  void set_allocated_limits(::cartographer::mapping::proto::MapLimits* limits);

  // .cartographer.mapping.proto.LegacyProbabilityGrid.CellBox known_cells_box = 8;
  bool has_known_cells_box() const;
  void clear_known_cells_box();
  static const int kKnownCellsBoxFieldNumber = 8;
  const ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox& known_cells_box() const;
  ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* release_known_cells_box();
  ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* mutable_known_cells_box();
  void set_allocated_known_cells_box(::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* known_cells_box);

  // @@protoc_insertion_point(class_scope:cartographer.mapping.proto.LegacyProbabilityGrid)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cells_;
  mutable std::atomic<int> _cells_cached_byte_size_;
  ::cartographer::mapping::proto::MapLimits* limits_;
  ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* known_cells_box_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LegacyProbabilityGrid_CellBox

// int32 max_x = 1;
inline void LegacyProbabilityGrid_CellBox::clear_max_x() {
  max_x_ = 0;
}
inline ::google::protobuf::int32 LegacyProbabilityGrid_CellBox::max_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.max_x)
  return max_x_;
}
inline void LegacyProbabilityGrid_CellBox::set_max_x(::google::protobuf::int32 value) {
  
  max_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.max_x)
}

// int32 max_y = 2;
inline void LegacyProbabilityGrid_CellBox::clear_max_y() {
  max_y_ = 0;
}
inline ::google::protobuf::int32 LegacyProbabilityGrid_CellBox::max_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.max_y)
  return max_y_;
}
inline void LegacyProbabilityGrid_CellBox::set_max_y(::google::protobuf::int32 value) {
  
  max_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.max_y)
}

// int32 min_x = 3;
inline void LegacyProbabilityGrid_CellBox::clear_min_x() {
  min_x_ = 0;
}
inline ::google::protobuf::int32 LegacyProbabilityGrid_CellBox::min_x() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.min_x)
  return min_x_;
}
inline void LegacyProbabilityGrid_CellBox::set_min_x(::google::protobuf::int32 value) {
  
  min_x_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.min_x)
}

// int32 min_y = 4;
inline void LegacyProbabilityGrid_CellBox::clear_min_y() {
  min_y_ = 0;
}
inline ::google::protobuf::int32 LegacyProbabilityGrid_CellBox::min_y() const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.min_y)
  return min_y_;
}
inline void LegacyProbabilityGrid_CellBox::set_min_y(::google::protobuf::int32 value) {
  
  min_y_ = value;
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacyProbabilityGrid.CellBox.min_y)
}

// -------------------------------------------------------------------

// LegacyProbabilityGrid

// .cartographer.mapping.proto.MapLimits limits = 1;
inline bool LegacyProbabilityGrid::has_limits() const {
  return this != internal_default_instance() && limits_ != nullptr;
}
inline const ::cartographer::mapping::proto::MapLimits& LegacyProbabilityGrid::limits() const {
  const ::cartographer::mapping::proto::MapLimits* p = limits_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.limits)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::MapLimits*>(
      &::cartographer::mapping::proto::_MapLimits_default_instance_);
}
inline ::cartographer::mapping::proto::MapLimits* LegacyProbabilityGrid::release_limits() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacyProbabilityGrid.limits)
  
  ::cartographer::mapping::proto::MapLimits* temp = limits_;
  limits_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::MapLimits* LegacyProbabilityGrid::mutable_limits() {
  
  if (limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::MapLimits>(GetArenaNoVirtual());
    limits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacyProbabilityGrid.limits)
  return limits_;
}
inline void LegacyProbabilityGrid::set_allocated_limits(::cartographer::mapping::proto::MapLimits* limits) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(limits_);
  }
  if (limits) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      limits = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    
  } else {
    
  }
  limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacyProbabilityGrid.limits)
}

// repeated int32 cells = 2;
inline int LegacyProbabilityGrid::cells_size() const {
  return cells_.size();
}
inline void LegacyProbabilityGrid::clear_cells() {
  cells_.Clear();
}
inline ::google::protobuf::int32 LegacyProbabilityGrid::cells(int index) const {
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.cells)
  return cells_.Get(index);
}
inline void LegacyProbabilityGrid::set_cells(int index, ::google::protobuf::int32 value) {
  cells_.Set(index, value);
  // @@protoc_insertion_point(field_set:cartographer.mapping.proto.LegacyProbabilityGrid.cells)
}
inline void LegacyProbabilityGrid::add_cells(::google::protobuf::int32 value) {
  cells_.Add(value);
  // @@protoc_insertion_point(field_add:cartographer.mapping.proto.LegacyProbabilityGrid.cells)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LegacyProbabilityGrid::cells() const {
  // @@protoc_insertion_point(field_list:cartographer.mapping.proto.LegacyProbabilityGrid.cells)
  return cells_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LegacyProbabilityGrid::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:cartographer.mapping.proto.LegacyProbabilityGrid.cells)
  return &cells_;
}

// .cartographer.mapping.proto.LegacyProbabilityGrid.CellBox known_cells_box = 8;
inline bool LegacyProbabilityGrid::has_known_cells_box() const {
  return this != internal_default_instance() && known_cells_box_ != nullptr;
}
inline void LegacyProbabilityGrid::clear_known_cells_box() {
  if (GetArenaNoVirtual() == nullptr && known_cells_box_ != nullptr) {
    delete known_cells_box_;
  }
  known_cells_box_ = nullptr;
}
inline const ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox& LegacyProbabilityGrid::known_cells_box() const {
  const ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* p = known_cells_box_;
  // @@protoc_insertion_point(field_get:cartographer.mapping.proto.LegacyProbabilityGrid.known_cells_box)
  return p != nullptr ? *p : *reinterpret_cast<const ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox*>(
      &::cartographer::mapping::proto::_LegacyProbabilityGrid_CellBox_default_instance_);
}
inline ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* LegacyProbabilityGrid::release_known_cells_box() {
  // @@protoc_insertion_point(field_release:cartographer.mapping.proto.LegacyProbabilityGrid.known_cells_box)
  
  ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* temp = known_cells_box_;
  known_cells_box_ = nullptr;
  return temp;
}
inline ::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* LegacyProbabilityGrid::mutable_known_cells_box() {
  
  if (known_cells_box_ == nullptr) {
    auto* p = CreateMaybeMessage<::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox>(GetArenaNoVirtual());
    known_cells_box_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cartographer.mapping.proto.LegacyProbabilityGrid.known_cells_box)
  return known_cells_box_;
}
inline void LegacyProbabilityGrid::set_allocated_known_cells_box(::cartographer::mapping::proto::LegacyProbabilityGrid_CellBox* known_cells_box) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete known_cells_box_;
  }
  if (known_cells_box) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      known_cells_box = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, known_cells_box, submessage_arena);
    }
    
  } else {
    
  }
  known_cells_box_ = known_cells_box;
  // @@protoc_insertion_point(field_set_allocated:cartographer.mapping.proto.LegacyProbabilityGrid.known_cells_box)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto
