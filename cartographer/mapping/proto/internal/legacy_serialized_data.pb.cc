// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_serialized_data.proto

#include "cartographer/mapping/proto/internal/legacy_serialized_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fserialization_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class LegacySerializedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySerializedData> _instance;
} _LegacySerializedData_default_instance_;
class LegacySerializedDataLegacySubmapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySerializedDataLegacySubmap> _instance;
} _LegacySerializedDataLegacySubmap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsLegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LegacySerializedData_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySerializedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySerializedData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_LegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsLegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto}, {
      &scc_info_Submap_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

static void InitDefaultsLegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySerializedDataLegacySubmap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySerializedDataLegacySubmap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_LegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsLegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto}, {
      &scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base,
      &scc_info_Node_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_ImuData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_OdometryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_FixedFramePoseData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_TrajectoryData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,
      &scc_info_LandmarkData_cartographer_2fmapping_2fproto_2fserialization_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, submap_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, node_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, imu_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, odometry_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, fixed_frame_pose_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, trajectory_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedData, landmark_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, submap_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, node_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, imu_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, odometry_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, fixed_frame_pose_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, trajectory_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap, landmark_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LegacySerializedData)},
  { 12, -1, sizeof(::cartographer::mapping::proto::LegacySerializedDataLegacySubmap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySerializedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, "cartographer/mapping/proto/internal/legacy_serialized_data.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, 2, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto[] =
  "\n@cartographer/mapping/proto/internal/le"
  "gacy_serialized_data.proto\022\032cartographer"
  ".mapping.proto\032.cartographer/mapping/pro"
  "to/serialization.proto\0327cartographer/map"
  "ping/proto/internal/legacy_submap.proto\""
  "\307\003\n\024LegacySerializedData\0222\n\006submap\030\001 \001(\013"
  "2\".cartographer.mapping.proto.Submap\022.\n\004"
  "node\030\002 \001(\0132 .cartographer.mapping.proto."
  "Node\0225\n\010imu_data\030\003 \001(\0132#.cartographer.ma"
  "pping.proto.ImuData\022\?\n\rodometry_data\030\004 \001"
  "(\0132(.cartographer.mapping.proto.Odometry"
  "Data\022M\n\025fixed_frame_pose_data\030\005 \001(\0132..ca"
  "rtographer.mapping.proto.FixedFramePoseD"
  "ata\022C\n\017trajectory_data\030\006 \001(\0132*.cartograp"
  "her.mapping.proto.TrajectoryData\022\?\n\rland"
  "mark_data\030\007 \001(\0132(.cartographer.mapping.p"
  "roto.LandmarkData\"\331\003\n LegacySerializedDa"
  "taLegacySubmap\0228\n\006submap\030\001 \001(\0132(.cartogr"
  "apher.mapping.proto.LegacySubmap\022.\n\004node"
  "\030\002 \001(\0132 .cartographer.mapping.proto.Node"
  "\0225\n\010imu_data\030\003 \001(\0132#.cartographer.mappin"
  "g.proto.ImuData\022\?\n\rodometry_data\030\004 \001(\0132("
  ".cartographer.mapping.proto.OdometryData"
  "\022M\n\025fixed_frame_pose_data\030\005 \001(\0132..cartog"
  "rapher.mapping.proto.FixedFramePoseData\022"
  "C\n\017trajectory_data\030\006 \001(\0132*.cartographer."
  "mapping.proto.TrajectoryData\022\?\n\rlandmark"
  "_data\030\007 \001(\0132(.cartographer.mapping.proto"
  ".LandmarkDatab\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto,
  "cartographer/mapping/proto/internal/legacy_serialized_data.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, 1141,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fserialization_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LegacySerializedData::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->submap_ = const_cast< ::cartographer::mapping::proto::Submap*>(
      ::cartographer::mapping::proto::Submap::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(
      ::cartographer::mapping::proto::ImuData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(
      ::cartographer::mapping::proto::OdometryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(
      ::cartographer::mapping::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(
      ::cartographer::mapping::proto::TrajectoryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedData_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(
      ::cartographer::mapping::proto::LandmarkData::internal_default_instance());
}
class LegacySerializedData::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::Submap& submap(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::Node& node(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::ImuData& imu_data(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::OdometryData& odometry_data(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::TrajectoryData& trajectory_data(const LegacySerializedData* msg);
  static const ::cartographer::mapping::proto::LandmarkData& landmark_data(const LegacySerializedData* msg);
};

const ::cartographer::mapping::proto::Submap&
LegacySerializedData::HasBitSetters::submap(const LegacySerializedData* msg) {
  return *msg->submap_;
}
const ::cartographer::mapping::proto::Node&
LegacySerializedData::HasBitSetters::node(const LegacySerializedData* msg) {
  return *msg->node_;
}
const ::cartographer::mapping::proto::ImuData&
LegacySerializedData::HasBitSetters::imu_data(const LegacySerializedData* msg) {
  return *msg->imu_data_;
}
const ::cartographer::mapping::proto::OdometryData&
LegacySerializedData::HasBitSetters::odometry_data(const LegacySerializedData* msg) {
  return *msg->odometry_data_;
}
const ::cartographer::mapping::proto::FixedFramePoseData&
LegacySerializedData::HasBitSetters::fixed_frame_pose_data(const LegacySerializedData* msg) {
  return *msg->fixed_frame_pose_data_;
}
const ::cartographer::mapping::proto::TrajectoryData&
LegacySerializedData::HasBitSetters::trajectory_data(const LegacySerializedData* msg) {
  return *msg->trajectory_data_;
}
const ::cartographer::mapping::proto::LandmarkData&
LegacySerializedData::HasBitSetters::landmark_data(const LegacySerializedData* msg) {
  return *msg->landmark_data_;
}
void LegacySerializedData::clear_submap() {
  if (GetArenaNoVirtual() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
void LegacySerializedData::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
void LegacySerializedData::clear_imu_data() {
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
}
void LegacySerializedData::clear_odometry_data() {
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
}
void LegacySerializedData::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
}
void LegacySerializedData::clear_trajectory_data() {
  if (GetArenaNoVirtual() == nullptr && trajectory_data_ != nullptr) {
    delete trajectory_data_;
  }
  trajectory_data_ = nullptr;
}
void LegacySerializedData::clear_landmark_data() {
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySerializedData::kSubmapFieldNumber;
const int LegacySerializedData::kNodeFieldNumber;
const int LegacySerializedData::kImuDataFieldNumber;
const int LegacySerializedData::kOdometryDataFieldNumber;
const int LegacySerializedData::kFixedFramePoseDataFieldNumber;
const int LegacySerializedData::kTrajectoryDataFieldNumber;
const int LegacySerializedData::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySerializedData::LegacySerializedData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySerializedData)
}
LegacySerializedData::LegacySerializedData(const LegacySerializedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap()) {
    submap_ = new ::cartographer::mapping::proto::Submap(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  if (from.has_node()) {
    node_ = new ::cartographer::mapping::proto::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = nullptr;
  }
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = nullptr;
  }
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = nullptr;
  }
  if (from.has_trajectory_data()) {
    trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData(*from.trajectory_data_);
  } else {
    trajectory_data_ = nullptr;
  }
  if (from.has_landmark_data()) {
    landmark_data_ = new ::cartographer::mapping::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySerializedData)
}

void LegacySerializedData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_data_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(landmark_data_));
}

LegacySerializedData::~LegacySerializedData() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySerializedData)
  SharedDtor();
}

void LegacySerializedData::SharedDtor() {
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete odometry_data_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
  if (this != internal_default_instance()) delete trajectory_data_;
  if (this != internal_default_instance()) delete landmark_data_;
}

void LegacySerializedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegacySerializedData& LegacySerializedData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LegacySerializedData_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LegacySerializedData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectory_data_ != nullptr) {
    delete trajectory_data_;
  }
  trajectory_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LegacySerializedData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LegacySerializedData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::Submap::_InternalParse;
        object = msg->mutable_submap();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::Node::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::ImuData::_InternalParse;
        object = msg->mutable_imu_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::OdometryData::_InternalParse;
        object = msg->mutable_odometry_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::FixedFramePoseData::_InternalParse;
        object = msg->mutable_fixed_frame_pose_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TrajectoryData::_InternalParse;
        object = msg->mutable_trajectory_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LandmarkData::_InternalParse;
        object = msg->mutable_landmark_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LegacySerializedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySerializedData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.Submap submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySerializedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySerializedData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LegacySerializedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::submap(this), output);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node(this), output);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::imu_data(this), output);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::odometry_data(this), output);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::fixed_frame_pose_data(this), output);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::trajectory_data(this), output);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::landmark_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySerializedData)
}

::google::protobuf::uint8* LegacySerializedData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySerializedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::submap(this), target);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node(this), target);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::imu_data(this), target);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::odometry_data(this), target);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::fixed_frame_pose_data(this), target);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::trajectory_data(this), target);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::landmark_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySerializedData)
  return target;
}

size_t LegacySerializedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySerializedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.Submap submap = 1;
  if (this->has_submap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *odometry_data_);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fixed_frame_pose_data_);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_data_);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegacySerializedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySerializedData* source =
      ::google::protobuf::DynamicCastToGenerated<LegacySerializedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySerializedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySerializedData)
    MergeFrom(*source);
  }
}

void LegacySerializedData::MergeFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySerializedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    mutable_submap()->::cartographer::mapping::proto::Submap::MergeFrom(from.submap());
  }
  if (from.has_node()) {
    mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
  if (from.has_trajectory_data()) {
    mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from.trajectory_data());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void LegacySerializedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySerializedData::CopyFrom(const LegacySerializedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySerializedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySerializedData::IsInitialized() const {
  return true;
}

void LegacySerializedData::Swap(LegacySerializedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySerializedData::InternalSwap(LegacySerializedData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_, other->submap_);
  swap(node_, other->node_);
  swap(imu_data_, other->imu_data_);
  swap(odometry_data_, other->odometry_data_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  swap(trajectory_data_, other->trajectory_data_);
  swap(landmark_data_, other->landmark_data_);
}

::google::protobuf::Metadata LegacySerializedData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LegacySerializedDataLegacySubmap::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->submap_ = const_cast< ::cartographer::mapping::proto::LegacySubmap*>(
      ::cartographer::mapping::proto::LegacySubmap::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->node_ = const_cast< ::cartographer::mapping::proto::Node*>(
      ::cartographer::mapping::proto::Node::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::cartographer::mapping::proto::ImuData*>(
      ::cartographer::mapping::proto::ImuData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->odometry_data_ = const_cast< ::cartographer::mapping::proto::OdometryData*>(
      ::cartographer::mapping::proto::OdometryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->fixed_frame_pose_data_ = const_cast< ::cartographer::mapping::proto::FixedFramePoseData*>(
      ::cartographer::mapping::proto::FixedFramePoseData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->trajectory_data_ = const_cast< ::cartographer::mapping::proto::TrajectoryData*>(
      ::cartographer::mapping::proto::TrajectoryData::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySerializedDataLegacySubmap_default_instance_._instance.get_mutable()->landmark_data_ = const_cast< ::cartographer::mapping::proto::LandmarkData*>(
      ::cartographer::mapping::proto::LandmarkData::internal_default_instance());
}
class LegacySerializedDataLegacySubmap::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::LegacySubmap& submap(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::Node& node(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::ImuData& imu_data(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::OdometryData& odometry_data(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::FixedFramePoseData& fixed_frame_pose_data(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::TrajectoryData& trajectory_data(const LegacySerializedDataLegacySubmap* msg);
  static const ::cartographer::mapping::proto::LandmarkData& landmark_data(const LegacySerializedDataLegacySubmap* msg);
};

const ::cartographer::mapping::proto::LegacySubmap&
LegacySerializedDataLegacySubmap::HasBitSetters::submap(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->submap_;
}
const ::cartographer::mapping::proto::Node&
LegacySerializedDataLegacySubmap::HasBitSetters::node(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->node_;
}
const ::cartographer::mapping::proto::ImuData&
LegacySerializedDataLegacySubmap::HasBitSetters::imu_data(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->imu_data_;
}
const ::cartographer::mapping::proto::OdometryData&
LegacySerializedDataLegacySubmap::HasBitSetters::odometry_data(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->odometry_data_;
}
const ::cartographer::mapping::proto::FixedFramePoseData&
LegacySerializedDataLegacySubmap::HasBitSetters::fixed_frame_pose_data(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->fixed_frame_pose_data_;
}
const ::cartographer::mapping::proto::TrajectoryData&
LegacySerializedDataLegacySubmap::HasBitSetters::trajectory_data(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->trajectory_data_;
}
const ::cartographer::mapping::proto::LandmarkData&
LegacySerializedDataLegacySubmap::HasBitSetters::landmark_data(const LegacySerializedDataLegacySubmap* msg) {
  return *msg->landmark_data_;
}
void LegacySerializedDataLegacySubmap::clear_submap() {
  if (GetArenaNoVirtual() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_imu_data() {
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_odometry_data() {
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_fixed_frame_pose_data() {
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_trajectory_data() {
  if (GetArenaNoVirtual() == nullptr && trajectory_data_ != nullptr) {
    delete trajectory_data_;
  }
  trajectory_data_ = nullptr;
}
void LegacySerializedDataLegacySubmap::clear_landmark_data() {
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySerializedDataLegacySubmap::kSubmapFieldNumber;
const int LegacySerializedDataLegacySubmap::kNodeFieldNumber;
const int LegacySerializedDataLegacySubmap::kImuDataFieldNumber;
const int LegacySerializedDataLegacySubmap::kOdometryDataFieldNumber;
const int LegacySerializedDataLegacySubmap::kFixedFramePoseDataFieldNumber;
const int LegacySerializedDataLegacySubmap::kTrajectoryDataFieldNumber;
const int LegacySerializedDataLegacySubmap::kLandmarkDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySerializedDataLegacySubmap::LegacySerializedDataLegacySubmap()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
}
LegacySerializedDataLegacySubmap::LegacySerializedDataLegacySubmap(const LegacySerializedDataLegacySubmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap()) {
    submap_ = new ::cartographer::mapping::proto::LegacySubmap(*from.submap_);
  } else {
    submap_ = nullptr;
  }
  if (from.has_node()) {
    node_ = new ::cartographer::mapping::proto::Node(*from.node_);
  } else {
    node_ = nullptr;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::cartographer::mapping::proto::ImuData(*from.imu_data_);
  } else {
    imu_data_ = nullptr;
  }
  if (from.has_odometry_data()) {
    odometry_data_ = new ::cartographer::mapping::proto::OdometryData(*from.odometry_data_);
  } else {
    odometry_data_ = nullptr;
  }
  if (from.has_fixed_frame_pose_data()) {
    fixed_frame_pose_data_ = new ::cartographer::mapping::proto::FixedFramePoseData(*from.fixed_frame_pose_data_);
  } else {
    fixed_frame_pose_data_ = nullptr;
  }
  if (from.has_trajectory_data()) {
    trajectory_data_ = new ::cartographer::mapping::proto::TrajectoryData(*from.trajectory_data_);
  } else {
    trajectory_data_ = nullptr;
  }
  if (from.has_landmark_data()) {
    landmark_data_ = new ::cartographer::mapping::proto::LandmarkData(*from.landmark_data_);
  } else {
    landmark_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
}

void LegacySerializedDataLegacySubmap::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
  ::memset(&submap_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&landmark_data_) -
      reinterpret_cast<char*>(&submap_)) + sizeof(landmark_data_));
}

LegacySerializedDataLegacySubmap::~LegacySerializedDataLegacySubmap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  SharedDtor();
}

void LegacySerializedDataLegacySubmap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_;
  if (this != internal_default_instance()) delete node_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete odometry_data_;
  if (this != internal_default_instance()) delete fixed_frame_pose_data_;
  if (this != internal_default_instance()) delete trajectory_data_;
  if (this != internal_default_instance()) delete landmark_data_;
}

void LegacySerializedDataLegacySubmap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegacySerializedDataLegacySubmap& LegacySerializedDataLegacySubmap::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LegacySerializedDataLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto.base);
  return *internal_default_instance();
}


void LegacySerializedDataLegacySubmap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_ != nullptr) {
    delete submap_;
  }
  submap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && odometry_data_ != nullptr) {
    delete odometry_data_;
  }
  odometry_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fixed_frame_pose_data_ != nullptr) {
    delete fixed_frame_pose_data_;
  }
  fixed_frame_pose_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectory_data_ != nullptr) {
    delete trajectory_data_;
  }
  trajectory_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && landmark_data_ != nullptr) {
    delete landmark_data_;
  }
  landmark_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LegacySerializedDataLegacySubmap::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LegacySerializedDataLegacySubmap*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.LegacySubmap submap = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LegacySubmap::_InternalParse;
        object = msg->mutable_submap();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::Node::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::ImuData::_InternalParse;
        object = msg->mutable_imu_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::OdometryData::_InternalParse;
        object = msg->mutable_odometry_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::FixedFramePoseData::_InternalParse;
        object = msg->mutable_fixed_frame_pose_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TrajectoryData::_InternalParse;
        object = msg->mutable_trajectory_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LandmarkData::_InternalParse;
        object = msg->mutable_landmark_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LegacySerializedDataLegacySubmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.LegacySubmap submap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.Node node = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ImuData imu_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.OdometryData odometry_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_odometry_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_frame_pose_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LegacySerializedDataLegacySubmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LegacySubmap submap = 1;
  if (this->has_submap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::submap(this), output);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node(this), output);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::imu_data(this), output);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::odometry_data(this), output);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::fixed_frame_pose_data(this), output);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::trajectory_data(this), output);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::landmark_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
}

::google::protobuf::uint8* LegacySerializedDataLegacySubmap::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LegacySubmap submap = 1;
  if (this->has_submap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::submap(this), target);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node(this), target);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::imu_data(this), target);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::odometry_data(this), target);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::fixed_frame_pose_data(this), target);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::trajectory_data(this), target);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::landmark_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  return target;
}

size_t LegacySerializedDataLegacySubmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LegacySubmap submap = 1;
  if (this->has_submap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_);
  }

  // .cartographer.mapping.proto.Node node = 2;
  if (this->has_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // .cartographer.mapping.proto.ImuData imu_data = 3;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  // .cartographer.mapping.proto.OdometryData odometry_data = 4;
  if (this->has_odometry_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *odometry_data_);
  }

  // .cartographer.mapping.proto.FixedFramePoseData fixed_frame_pose_data = 5;
  if (this->has_fixed_frame_pose_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fixed_frame_pose_data_);
  }

  // .cartographer.mapping.proto.TrajectoryData trajectory_data = 6;
  if (this->has_trajectory_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_data_);
  }

  // .cartographer.mapping.proto.LandmarkData landmark_data = 7;
  if (this->has_landmark_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegacySerializedDataLegacySubmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySerializedDataLegacySubmap* source =
      ::google::protobuf::DynamicCastToGenerated<LegacySerializedDataLegacySubmap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
    MergeFrom(*source);
  }
}

void LegacySerializedDataLegacySubmap::MergeFrom(const LegacySerializedDataLegacySubmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap()) {
    mutable_submap()->::cartographer::mapping::proto::LegacySubmap::MergeFrom(from.submap());
  }
  if (from.has_node()) {
    mutable_node()->::cartographer::mapping::proto::Node::MergeFrom(from.node());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::cartographer::mapping::proto::ImuData::MergeFrom(from.imu_data());
  }
  if (from.has_odometry_data()) {
    mutable_odometry_data()->::cartographer::mapping::proto::OdometryData::MergeFrom(from.odometry_data());
  }
  if (from.has_fixed_frame_pose_data()) {
    mutable_fixed_frame_pose_data()->::cartographer::mapping::proto::FixedFramePoseData::MergeFrom(from.fixed_frame_pose_data());
  }
  if (from.has_trajectory_data()) {
    mutable_trajectory_data()->::cartographer::mapping::proto::TrajectoryData::MergeFrom(from.trajectory_data());
  }
  if (from.has_landmark_data()) {
    mutable_landmark_data()->::cartographer::mapping::proto::LandmarkData::MergeFrom(from.landmark_data());
  }
}

void LegacySerializedDataLegacySubmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySerializedDataLegacySubmap::CopyFrom(const LegacySerializedDataLegacySubmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySerializedDataLegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySerializedDataLegacySubmap::IsInitialized() const {
  return true;
}

void LegacySerializedDataLegacySubmap::Swap(LegacySerializedDataLegacySubmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySerializedDataLegacySubmap::InternalSwap(LegacySerializedDataLegacySubmap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_, other->submap_);
  swap(node_, other->node_);
  swap(imu_data_, other->imu_data_);
  swap(odometry_data_, other->odometry_data_);
  swap(fixed_frame_pose_data_, other->fixed_frame_pose_data_);
  swap(trajectory_data_, other->trajectory_data_);
  swap(landmark_data_, other->landmark_data_);
}

::google::protobuf::Metadata LegacySerializedDataLegacySubmap::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fserialized_5fdata_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LegacySerializedData* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LegacySerializedData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LegacySerializedData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LegacySerializedDataLegacySubmap* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LegacySerializedDataLegacySubmap >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LegacySerializedDataLegacySubmap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
