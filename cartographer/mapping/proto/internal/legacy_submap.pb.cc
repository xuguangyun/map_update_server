// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/internal/legacy_submap.proto

#include "cartographer/mapping/proto/internal/legacy_submap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_HybridGrid_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LegacyProbabilityGrid_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class LegacySubmap2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap2D> _instance;
} _LegacySubmap2D_default_instance_;
class LegacySubmap3DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap3D> _instance;
} _LegacySubmap3D_default_instance_;
class LegacySubmapDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LegacySubmap> _instance;
} _LegacySubmap_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsLegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LegacySubmap2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySubmap2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySubmap2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_LegacyProbabilityGrid_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto.base,}};

static void InitDefaultsLegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LegacySubmap3D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySubmap3D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySubmap3D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_HybridGrid_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto.base,}};

static void InitDefaultsLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_LegacySubmap_default_instance_;
    new (ptr) ::cartographer::mapping::proto::LegacySubmap();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::LegacySubmap::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base,
      &scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto[3];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap2D, local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap2D, num_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap2D, finished_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap2D, probability_grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, local_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, num_range_data_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, finished_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, high_resolution_hybrid_grid_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap3D, low_resolution_hybrid_grid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap, submap_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap, submap_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::LegacySubmap, submap_3d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::LegacySubmap2D)},
  { 9, -1, sizeof(::cartographer::mapping::proto::LegacySubmap3D)},
  { 19, -1, sizeof(::cartographer::mapping::proto::LegacySubmap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySubmap2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySubmap3D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_LegacySubmap_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, "cartographer/mapping/proto/internal/legacy_submap.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, 3, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto[] =
  "\n7cartographer/mapping/proto/internal/le"
  "gacy_submap.proto\022\032cartographer.mapping."
  "proto\032+cartographer/mapping/proto/pose_g"
  "raph.proto\032Acartographer/mapping/proto/i"
  "nternal/legacy_probability_grid.proto\032/c"
  "artographer/mapping/proto/3d/hybrid_grid"
  ".proto\032,cartographer/transform/proto/tra"
  "nsform.proto\"\302\001\n\016LegacySubmap2D\0229\n\nlocal"
  "_pose\030\001 \001(\0132%.cartographer.transform.pro"
  "to.Rigid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010fi"
  "nished\030\003 \001(\010\022K\n\020probability_grid\030\004 \001(\01321"
  ".cartographer.mapping.proto.LegacyProbab"
  "ilityGrid\"\216\002\n\016LegacySubmap3D\0229\n\nlocal_po"
  "se\030\001 \001(\0132%.cartographer.transform.proto."
  "Rigid3d\022\026\n\016num_range_data\030\002 \001(\005\022\020\n\010finis"
  "hed\030\003 \001(\010\022K\n\033high_resolution_hybrid_grid"
  "\030\004 \001(\0132&.cartographer.mapping.proto.Hybr"
  "idGrid\022J\n\032low_resolution_hybrid_grid\030\005 \001"
  "(\0132&.cartographer.mapping.proto.HybridGr"
  "id\"\305\001\n\014LegacySubmap\0227\n\tsubmap_id\030\001 \001(\0132$"
  ".cartographer.mapping.proto.SubmapId\022=\n\t"
  "submap_2d\030\002 \001(\0132*.cartographer.mapping.p"
  "roto.LegacySubmap2D\022=\n\tsubmap_3d\030\003 \001(\0132*"
  ".cartographer.mapping.proto.LegacySubmap"
  "3Db\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto,
  "cartographer/mapping/proto/internal/legacy_submap.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, 970,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[4] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fprobability_5fgrid_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2fhybrid_5fgrid_2eproto,
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto, deps, 4);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void LegacySubmap2D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySubmap2D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySubmap2D_default_instance_._instance.get_mutable()->probability_grid_ = const_cast< ::cartographer::mapping::proto::LegacyProbabilityGrid*>(
      ::cartographer::mapping::proto::LegacyProbabilityGrid::internal_default_instance());
}
class LegacySubmap2D::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const LegacySubmap2D* msg);
  static const ::cartographer::mapping::proto::LegacyProbabilityGrid& probability_grid(const LegacySubmap2D* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LegacySubmap2D::HasBitSetters::local_pose(const LegacySubmap2D* msg) {
  return *msg->local_pose_;
}
const ::cartographer::mapping::proto::LegacyProbabilityGrid&
LegacySubmap2D::HasBitSetters::probability_grid(const LegacySubmap2D* msg) {
  return *msg->probability_grid_;
}
void LegacySubmap2D::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
void LegacySubmap2D::clear_probability_grid() {
  if (GetArenaNoVirtual() == nullptr && probability_grid_ != nullptr) {
    delete probability_grid_;
  }
  probability_grid_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap2D::kLocalPoseFieldNumber;
const int LegacySubmap2D::kNumRangeDataFieldNumber;
const int LegacySubmap2D::kFinishedFieldNumber;
const int LegacySubmap2D::kProbabilityGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap2D::LegacySubmap2D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap2D)
}
LegacySubmap2D::LegacySubmap2D(const LegacySubmap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  if (from.has_probability_grid()) {
    probability_grid_ = new ::cartographer::mapping::proto::LegacyProbabilityGrid(*from.probability_grid_);
  } else {
    probability_grid_ = nullptr;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap2D)
}

void LegacySubmap2D::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
}

LegacySubmap2D::~LegacySubmap2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap2D)
  SharedDtor();
}

void LegacySubmap2D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete probability_grid_;
}

void LegacySubmap2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegacySubmap2D& LegacySubmap2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LegacySubmap2D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  return *internal_default_instance();
}


void LegacySubmap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && probability_grid_ != nullptr) {
    delete probability_grid_;
  }
  probability_grid_ = nullptr;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LegacySubmap2D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LegacySubmap2D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_local_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 num_range_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_range_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool finished = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_finished(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LegacyProbabilityGrid::_InternalParse;
        object = msg->mutable_probability_grid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LegacySubmap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probability_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LegacySubmap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local_pose(this), output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::probability_grid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap2D)
}

::google::protobuf::uint8* LegacySubmap2D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local_pose(this), target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::probability_grid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap2D)
  return target;
}

size_t LegacySubmap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .cartographer.mapping.proto.LegacyProbabilityGrid probability_grid = 4;
  if (this->has_probability_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *probability_grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegacySubmap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap2D* source =
      ::google::protobuf::DynamicCastToGenerated<LegacySubmap2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap2D)
    MergeFrom(*source);
  }
}

void LegacySubmap2D::MergeFrom(const LegacySubmap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_probability_grid()) {
    mutable_probability_grid()->::cartographer::mapping::proto::LegacyProbabilityGrid::MergeFrom(from.probability_grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void LegacySubmap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap2D::CopyFrom(const LegacySubmap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap2D::IsInitialized() const {
  return true;
}

void LegacySubmap2D::Swap(LegacySubmap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap2D::InternalSwap(LegacySubmap2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_pose_, other->local_pose_);
  swap(probability_grid_, other->probability_grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
}

::google::protobuf::Metadata LegacySubmap2D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LegacySubmap3D::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySubmap3D_default_instance_._instance.get_mutable()->local_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySubmap3D_default_instance_._instance.get_mutable()->high_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySubmap3D_default_instance_._instance.get_mutable()->low_resolution_hybrid_grid_ = const_cast< ::cartographer::mapping::proto::HybridGrid*>(
      ::cartographer::mapping::proto::HybridGrid::internal_default_instance());
}
class LegacySubmap3D::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& local_pose(const LegacySubmap3D* msg);
  static const ::cartographer::mapping::proto::HybridGrid& high_resolution_hybrid_grid(const LegacySubmap3D* msg);
  static const ::cartographer::mapping::proto::HybridGrid& low_resolution_hybrid_grid(const LegacySubmap3D* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LegacySubmap3D::HasBitSetters::local_pose(const LegacySubmap3D* msg) {
  return *msg->local_pose_;
}
const ::cartographer::mapping::proto::HybridGrid&
LegacySubmap3D::HasBitSetters::high_resolution_hybrid_grid(const LegacySubmap3D* msg) {
  return *msg->high_resolution_hybrid_grid_;
}
const ::cartographer::mapping::proto::HybridGrid&
LegacySubmap3D::HasBitSetters::low_resolution_hybrid_grid(const LegacySubmap3D* msg) {
  return *msg->low_resolution_hybrid_grid_;
}
void LegacySubmap3D::clear_local_pose() {
  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
}
void LegacySubmap3D::clear_high_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == nullptr && high_resolution_hybrid_grid_ != nullptr) {
    delete high_resolution_hybrid_grid_;
  }
  high_resolution_hybrid_grid_ = nullptr;
}
void LegacySubmap3D::clear_low_resolution_hybrid_grid() {
  if (GetArenaNoVirtual() == nullptr && low_resolution_hybrid_grid_ != nullptr) {
    delete low_resolution_hybrid_grid_;
  }
  low_resolution_hybrid_grid_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap3D::kLocalPoseFieldNumber;
const int LegacySubmap3D::kNumRangeDataFieldNumber;
const int LegacySubmap3D::kFinishedFieldNumber;
const int LegacySubmap3D::kHighResolutionHybridGridFieldNumber;
const int LegacySubmap3D::kLowResolutionHybridGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap3D::LegacySubmap3D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap3D)
}
LegacySubmap3D::LegacySubmap3D(const LegacySubmap3D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_pose()) {
    local_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.local_pose_);
  } else {
    local_pose_ = nullptr;
  }
  if (from.has_high_resolution_hybrid_grid()) {
    high_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.high_resolution_hybrid_grid_);
  } else {
    high_resolution_hybrid_grid_ = nullptr;
  }
  if (from.has_low_resolution_hybrid_grid()) {
    low_resolution_hybrid_grid_ = new ::cartographer::mapping::proto::HybridGrid(*from.low_resolution_hybrid_grid_);
  } else {
    low_resolution_hybrid_grid_ = nullptr;
  }
  ::memcpy(&num_range_data_, &from.num_range_data_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_) -
    reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap3D)
}

void LegacySubmap3D::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  ::memset(&local_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&local_pose_)) + sizeof(finished_));
}

LegacySubmap3D::~LegacySubmap3D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap3D)
  SharedDtor();
}

void LegacySubmap3D::SharedDtor() {
  if (this != internal_default_instance()) delete local_pose_;
  if (this != internal_default_instance()) delete high_resolution_hybrid_grid_;
  if (this != internal_default_instance()) delete low_resolution_hybrid_grid_;
}

void LegacySubmap3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegacySubmap3D& LegacySubmap3D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LegacySubmap3D_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  return *internal_default_instance();
}


void LegacySubmap3D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_pose_ != nullptr) {
    delete local_pose_;
  }
  local_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_resolution_hybrid_grid_ != nullptr) {
    delete high_resolution_hybrid_grid_;
  }
  high_resolution_hybrid_grid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_resolution_hybrid_grid_ != nullptr) {
    delete low_resolution_hybrid_grid_;
  }
  low_resolution_hybrid_grid_ = nullptr;
  ::memset(&num_range_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_) -
      reinterpret_cast<char*>(&num_range_data_)) + sizeof(finished_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LegacySubmap3D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LegacySubmap3D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_local_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 num_range_data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_range_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool finished = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_finished(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::HybridGrid::_InternalParse;
        object = msg->mutable_high_resolution_hybrid_grid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::HybridGrid::_InternalParse;
        object = msg->mutable_low_resolution_hybrid_grid();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LegacySubmap3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap3D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d local_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_range_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_range_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool finished = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_high_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_low_resolution_hybrid_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap3D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LegacySubmap3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::local_pose(this), output);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_range_data(), output);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finished(), output);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::high_resolution_hybrid_grid(this), output);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::low_resolution_hybrid_grid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap3D)
}

::google::protobuf::uint8* LegacySubmap3D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::local_pose(this), target);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_range_data(), target);
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finished(), target);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::high_resolution_hybrid_grid(this), target);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::low_resolution_hybrid_grid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap3D)
  return target;
}

size_t LegacySubmap3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap3D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d local_pose = 1;
  if (this->has_local_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *local_pose_);
  }

  // .cartographer.mapping.proto.HybridGrid high_resolution_hybrid_grid = 4;
  if (this->has_high_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *high_resolution_hybrid_grid_);
  }

  // .cartographer.mapping.proto.HybridGrid low_resolution_hybrid_grid = 5;
  if (this->has_low_resolution_hybrid_grid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *low_resolution_hybrid_grid_);
  }

  // int32 num_range_data = 2;
  if (this->num_range_data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_range_data());
  }

  // bool finished = 3;
  if (this->finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegacySubmap3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap3D)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap3D* source =
      ::google::protobuf::DynamicCastToGenerated<LegacySubmap3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap3D)
    MergeFrom(*source);
  }
}

void LegacySubmap3D::MergeFrom(const LegacySubmap3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_pose()) {
    mutable_local_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.local_pose());
  }
  if (from.has_high_resolution_hybrid_grid()) {
    mutable_high_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.high_resolution_hybrid_grid());
  }
  if (from.has_low_resolution_hybrid_grid()) {
    mutable_low_resolution_hybrid_grid()->::cartographer::mapping::proto::HybridGrid::MergeFrom(from.low_resolution_hybrid_grid());
  }
  if (from.num_range_data() != 0) {
    set_num_range_data(from.num_range_data());
  }
  if (from.finished() != 0) {
    set_finished(from.finished());
  }
}

void LegacySubmap3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap3D::CopyFrom(const LegacySubmap3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap3D::IsInitialized() const {
  return true;
}

void LegacySubmap3D::Swap(LegacySubmap3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap3D::InternalSwap(LegacySubmap3D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_pose_, other->local_pose_);
  swap(high_resolution_hybrid_grid_, other->high_resolution_hybrid_grid_);
  swap(low_resolution_hybrid_grid_, other->low_resolution_hybrid_grid_);
  swap(num_range_data_, other->num_range_data_);
  swap(finished_, other->finished_);
}

::google::protobuf::Metadata LegacySubmap3D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LegacySubmap::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_LegacySubmap_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySubmap_default_instance_._instance.get_mutable()->submap_2d_ = const_cast< ::cartographer::mapping::proto::LegacySubmap2D*>(
      ::cartographer::mapping::proto::LegacySubmap2D::internal_default_instance());
  ::cartographer::mapping::proto::_LegacySubmap_default_instance_._instance.get_mutable()->submap_3d_ = const_cast< ::cartographer::mapping::proto::LegacySubmap3D*>(
      ::cartographer::mapping::proto::LegacySubmap3D::internal_default_instance());
}
class LegacySubmap::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const LegacySubmap* msg);
  static const ::cartographer::mapping::proto::LegacySubmap2D& submap_2d(const LegacySubmap* msg);
  static const ::cartographer::mapping::proto::LegacySubmap3D& submap_3d(const LegacySubmap* msg);
};

const ::cartographer::mapping::proto::SubmapId&
LegacySubmap::HasBitSetters::submap_id(const LegacySubmap* msg) {
  return *msg->submap_id_;
}
const ::cartographer::mapping::proto::LegacySubmap2D&
LegacySubmap::HasBitSetters::submap_2d(const LegacySubmap* msg) {
  return *msg->submap_2d_;
}
const ::cartographer::mapping::proto::LegacySubmap3D&
LegacySubmap::HasBitSetters::submap_3d(const LegacySubmap* msg) {
  return *msg->submap_3d_;
}
void LegacySubmap::clear_submap_id() {
  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LegacySubmap::kSubmapIdFieldNumber;
const int LegacySubmap::kSubmap2DFieldNumber;
const int LegacySubmap::kSubmap3DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LegacySubmap::LegacySubmap()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.LegacySubmap)
}
LegacySubmap::LegacySubmap(const LegacySubmap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  if (from.has_submap_2d()) {
    submap_2d_ = new ::cartographer::mapping::proto::LegacySubmap2D(*from.submap_2d_);
  } else {
    submap_2d_ = nullptr;
  }
  if (from.has_submap_3d()) {
    submap_3d_ = new ::cartographer::mapping::proto::LegacySubmap3D(*from.submap_3d_);
  } else {
    submap_3d_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.LegacySubmap)
}

void LegacySubmap::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_3d_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(submap_3d_));
}

LegacySubmap::~LegacySubmap() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.LegacySubmap)
  SharedDtor();
}

void LegacySubmap::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete submap_2d_;
  if (this != internal_default_instance()) delete submap_3d_;
}

void LegacySubmap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegacySubmap& LegacySubmap::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LegacySubmap_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto.base);
  return *internal_default_instance();
}


void LegacySubmap::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submap_2d_ != nullptr) {
    delete submap_2d_;
  }
  submap_2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && submap_3d_ != nullptr) {
    delete submap_3d_;
  }
  submap_3d_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LegacySubmap::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LegacySubmap*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::SubmapId::_InternalParse;
        object = msg->mutable_submap_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LegacySubmap2D::_InternalParse;
        object = msg->mutable_submap_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LegacySubmap3D::_InternalParse;
        object = msg->mutable_submap_3d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LegacySubmap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.LegacySubmap)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_3d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.LegacySubmap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.LegacySubmap)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LegacySubmap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::submap_id(this), output);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::submap_2d(this), output);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::submap_3d(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.LegacySubmap)
}

::google::protobuf::uint8* LegacySubmap::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.LegacySubmap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::submap_id(this), target);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::submap_2d(this), target);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::submap_3d(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.LegacySubmap)
  return target;
}

size_t LegacySubmap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.LegacySubmap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.mapping.proto.LegacySubmap2D submap_2d = 2;
  if (this->has_submap_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_2d_);
  }

  // .cartographer.mapping.proto.LegacySubmap3D submap_3d = 3;
  if (this->has_submap_3d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_3d_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegacySubmap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.LegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  const LegacySubmap* source =
      ::google::protobuf::DynamicCastToGenerated<LegacySubmap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.LegacySubmap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.LegacySubmap)
    MergeFrom(*source);
  }
}

void LegacySubmap::MergeFrom(const LegacySubmap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.LegacySubmap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_submap_2d()) {
    mutable_submap_2d()->::cartographer::mapping::proto::LegacySubmap2D::MergeFrom(from.submap_2d());
  }
  if (from.has_submap_3d()) {
    mutable_submap_3d()->::cartographer::mapping::proto::LegacySubmap3D::MergeFrom(from.submap_3d());
  }
}

void LegacySubmap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.LegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegacySubmap::CopyFrom(const LegacySubmap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.LegacySubmap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegacySubmap::IsInitialized() const {
  return true;
}

void LegacySubmap::Swap(LegacySubmap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LegacySubmap::InternalSwap(LegacySubmap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_id_, other->submap_id_);
  swap(submap_2d_, other->submap_2d_);
  swap(submap_3d_, other->submap_3d_);
}

::google::protobuf::Metadata LegacySubmap::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2finternal_2flegacy_5fsubmap_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LegacySubmap2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LegacySubmap2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LegacySubmap2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LegacySubmap3D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LegacySubmap3D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LegacySubmap3D >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::LegacySubmap* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::LegacySubmap >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::LegacySubmap >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
