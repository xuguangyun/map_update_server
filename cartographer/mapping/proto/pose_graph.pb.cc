// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph.proto

#include "cartographer/mapping/proto/pose_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class SubmapIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SubmapId> _instance;
} _SubmapId_default_instance_;
class NodeIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeId> _instance;
} _NodeId_default_instance_;
class PoseGraph_ConstraintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph_Constraint> _instance;
} _PoseGraph_Constraint_default_instance_;
class PoseGraph_LandmarkPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph_LandmarkPose> _instance;
} _PoseGraph_LandmarkPose_default_instance_;
class PoseGraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraph> _instance;
} _PoseGraph_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsSubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SubmapId_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SubmapId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SubmapId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto}, {}};

static void InitDefaultsNodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_NodeId_default_instance_;
    new (ptr) ::cartographer::mapping::proto::NodeId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::NodeId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto}, {}};

static void InitDefaultsPoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraph_Constraint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraph_Constraint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto}, {
      &scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsPoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraph_LandmarkPose_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraph_LandmarkPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraph_LandmarkPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsPoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraph_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraph::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsPoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto}, {
      &scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,
      &scc_info_Trajectory_cartographer_2fmapping_2fproto_2ftrajectory_2eproto.base,
      &scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SubmapId, submap_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::NodeId, node_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, submap_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, node_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, relative_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_Constraint, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, landmark_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph_LandmarkPose, global_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, constraint_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, trajectory_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraph, landmark_poses_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::SubmapId)},
  { 7, -1, sizeof(::cartographer::mapping::proto::NodeId)},
  { 14, -1, sizeof(::cartographer::mapping::proto::PoseGraph_Constraint)},
  { 25, -1, sizeof(::cartographer::mapping::proto::PoseGraph_LandmarkPose)},
  { 32, -1, sizeof(::cartographer::mapping::proto::PoseGraph)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_SubmapId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_NodeId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraph_LandmarkPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraph_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, "cartographer/mapping/proto/pose_graph.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, 5, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[] =
  "\n+cartographer/mapping/proto/pose_graph."
  "proto\022\032cartographer.mapping.proto\032+carto"
  "grapher/mapping/proto/trajectory.proto\032,"
  "cartographer/transform/proto/transform.p"
  "roto\"7\n\010SubmapId\022\025\n\rtrajectory_id\030\001 \001(\005\022"
  "\024\n\014submap_index\030\002 \001(\005\"3\n\006NodeId\022\025\n\rtraje"
  "ctory_id\030\001 \001(\005\022\022\n\nnode_index\030\002 \001(\005\"\230\005\n\tP"
  "oseGraph\022D\n\nconstraint\030\002 \003(\01320.cartograp"
  "her.mapping.proto.PoseGraph.Constraint\022:"
  "\n\ntrajectory\030\004 \003(\0132&.cartographer.mappin"
  "g.proto.Trajectory\022J\n\016landmark_poses\030\005 \003"
  "(\01322.cartographer.mapping.proto.PoseGrap"
  "h.LandmarkPose\032\333\002\n\nConstraint\0227\n\tsubmap_"
  "id\030\001 \001(\0132$.cartographer.mapping.proto.Su"
  "bmapId\0223\n\007node_id\030\002 \001(\0132\".cartographer.m"
  "apping.proto.NodeId\022<\n\rrelative_pose\030\003 \001"
  "(\0132%.cartographer.transform.proto.Rigid3"
  "d\022\032\n\022translation_weight\030\006 \001(\001\022\027\n\017rotatio"
  "n_weight\030\007 \001(\001\022A\n\003tag\030\005 \001(\01624.cartograph"
  "er.mapping.proto.PoseGraph.Constraint.Ta"
  "g\")\n\003Tag\022\020\n\014INTRA_SUBMAP\020\000\022\020\n\014INTER_SUBM"
  "AP\020\001\032_\n\014LandmarkPose\022\023\n\013landmark_id\030\001 \001("
  "\t\022:\n\013global_pose\030\002 \001(\0132%.cartographer.tr"
  "ansform.proto.Rigid3db\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto,
  "cartographer/mapping/proto/pose_graph.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, 949,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2ftrajectory_2eproto,
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {
const ::google::protobuf::EnumDescriptor* PoseGraph_Constraint_Tag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[0];
}
bool PoseGraph_Constraint_Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PoseGraph_Constraint_Tag PoseGraph_Constraint::INTRA_SUBMAP;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::INTER_SUBMAP;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MIN;
const PoseGraph_Constraint_Tag PoseGraph_Constraint::Tag_MAX;
const int PoseGraph_Constraint::Tag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void SubmapId::InitAsDefaultInstance() {
}
class SubmapId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubmapId::kTrajectoryIdFieldNumber;
const int SubmapId::kSubmapIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubmapId::SubmapId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SubmapId)
}
SubmapId::SubmapId(const SubmapId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&submap_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SubmapId)
}

void SubmapId::SharedCtor() {
  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
}

SubmapId::~SubmapId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SubmapId)
  SharedDtor();
}

void SubmapId::SharedDtor() {
}

void SubmapId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubmapId& SubmapId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SubmapId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void SubmapId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&submap_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(submap_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubmapId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SubmapId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_trajectory_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 submap_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_submap_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubmapId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SubmapId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 submap_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &submap_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SubmapId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SubmapId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubmapId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->submap_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SubmapId)
}

::google::protobuf::uint8* SubmapId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SubmapId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->submap_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SubmapId)
  return target;
}

size_t SubmapId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SubmapId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // int32 submap_index = 2;
  if (this->submap_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->submap_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubmapId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SubmapId)
  GOOGLE_DCHECK_NE(&from, this);
  const SubmapId* source =
      ::google::protobuf::DynamicCastToGenerated<SubmapId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SubmapId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SubmapId)
    MergeFrom(*source);
  }
}

void SubmapId::MergeFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SubmapId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.submap_index() != 0) {
    set_submap_index(from.submap_index());
  }
}

void SubmapId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SubmapId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmapId::CopyFrom(const SubmapId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SubmapId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmapId::IsInitialized() const {
  return true;
}

void SubmapId::Swap(SubmapId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubmapId::InternalSwap(SubmapId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
  swap(submap_index_, other->submap_index_);
}

::google::protobuf::Metadata SubmapId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NodeId::InitAsDefaultInstance() {
}
class NodeId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeId::kTrajectoryIdFieldNumber;
const int NodeId::kNodeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeId::NodeId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.NodeId)
}
NodeId::NodeId(const NodeId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trajectory_id_, &from.trajectory_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_index_) -
    reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.NodeId)
}

void NodeId::SharedCtor() {
  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
}

NodeId::~NodeId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.NodeId)
  SharedDtor();
}

void NodeId::SharedDtor() {
}

void NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeId& NodeId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NodeId_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trajectory_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_index_) -
      reinterpret_cast<char*>(&trajectory_id_)) + sizeof(node_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NodeId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_trajectory_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 node_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.NodeId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 trajectory_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 node_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.NodeId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.NodeId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trajectory_id(), output);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.NodeId)
}

::google::protobuf::uint8* NodeId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.NodeId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trajectory_id(), target);
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.NodeId)
  return target;
}

size_t NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.NodeId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 trajectory_id = 1;
  if (this->trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trajectory_id());
  }

  // int32 node_index = 2;
  if (this->node_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->node_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeId* source =
      ::google::protobuf::DynamicCastToGenerated<NodeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.NodeId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.NodeId)
    MergeFrom(*source);
  }
}

void NodeId::MergeFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trajectory_id() != 0) {
    set_trajectory_id(from.trajectory_id());
  }
  if (from.node_index() != 0) {
    set_node_index(from.node_index());
  }
}

void NodeId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeId::CopyFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeId::IsInitialized() const {
  return true;
}

void NodeId::Swap(NodeId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeId::InternalSwap(NodeId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_id_, other->trajectory_id_);
  swap(node_index_, other->node_index_);
}

::google::protobuf::Metadata NodeId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PoseGraph_Constraint::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_._instance.get_mutable()->submap_id_ = const_cast< ::cartographer::mapping::proto::SubmapId*>(
      ::cartographer::mapping::proto::SubmapId::internal_default_instance());
  ::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_._instance.get_mutable()->node_id_ = const_cast< ::cartographer::mapping::proto::NodeId*>(
      ::cartographer::mapping::proto::NodeId::internal_default_instance());
  ::cartographer::mapping::proto::_PoseGraph_Constraint_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class PoseGraph_Constraint::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::SubmapId& submap_id(const PoseGraph_Constraint* msg);
  static const ::cartographer::mapping::proto::NodeId& node_id(const PoseGraph_Constraint* msg);
  static const ::cartographer::transform::proto::Rigid3d& relative_pose(const PoseGraph_Constraint* msg);
};

const ::cartographer::mapping::proto::SubmapId&
PoseGraph_Constraint::HasBitSetters::submap_id(const PoseGraph_Constraint* msg) {
  return *msg->submap_id_;
}
const ::cartographer::mapping::proto::NodeId&
PoseGraph_Constraint::HasBitSetters::node_id(const PoseGraph_Constraint* msg) {
  return *msg->node_id_;
}
const ::cartographer::transform::proto::Rigid3d&
PoseGraph_Constraint::HasBitSetters::relative_pose(const PoseGraph_Constraint* msg) {
  return *msg->relative_pose_;
}
void PoseGraph_Constraint::clear_relative_pose() {
  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph_Constraint::kSubmapIdFieldNumber;
const int PoseGraph_Constraint::kNodeIdFieldNumber;
const int PoseGraph_Constraint::kRelativePoseFieldNumber;
const int PoseGraph_Constraint::kTranslationWeightFieldNumber;
const int PoseGraph_Constraint::kRotationWeightFieldNumber;
const int PoseGraph_Constraint::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph_Constraint::PoseGraph_Constraint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}
PoseGraph_Constraint::PoseGraph_Constraint(const PoseGraph_Constraint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_submap_id()) {
    submap_id_ = new ::cartographer::mapping::proto::SubmapId(*from.submap_id_);
  } else {
    submap_id_ = nullptr;
  }
  if (from.has_node_id()) {
    node_id_ = new ::cartographer::mapping::proto::NodeId(*from.node_id_);
  } else {
    node_id_ = nullptr;
  }
  if (from.has_relative_pose()) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = nullptr;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.Constraint)
}

void PoseGraph_Constraint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  ::memset(&submap_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&submap_id_)) + sizeof(tag_));
}

PoseGraph_Constraint::~PoseGraph_Constraint() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.Constraint)
  SharedDtor();
}

void PoseGraph_Constraint::SharedDtor() {
  if (this != internal_default_instance()) delete submap_id_;
  if (this != internal_default_instance()) delete node_id_;
  if (this != internal_default_instance()) delete relative_pose_;
}

void PoseGraph_Constraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseGraph_Constraint& PoseGraph_Constraint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PoseGraph_Constraint_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void PoseGraph_Constraint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && submap_id_ != nullptr) {
    delete submap_id_;
  }
  submap_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node_id_ != nullptr) {
    delete node_id_;
  }
  node_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(tag_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PoseGraph_Constraint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PoseGraph_Constraint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::SubmapId::_InternalParse;
        object = msg->mutable_submap_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.NodeId node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::NodeId::_InternalParse;
        object = msg->mutable_node_id();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.transform.proto.Rigid3d relative_pose = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_relative_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_tag(static_cast<::cartographer::mapping::proto::PoseGraph_Constraint_Tag>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double translation_weight = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double rotation_weight = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PoseGraph_Constraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph.Constraint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SubmapId submap_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_submap_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.NodeId node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d relative_pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_tag(static_cast< ::cartographer::mapping::proto::PoseGraph_Constraint_Tag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph.Constraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph.Constraint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PoseGraph_Constraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::submap_id(this), output);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::node_id(this), output);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::relative_pose(this), output);
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tag(), output);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->translation_weight(), output);
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rotation_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph.Constraint)
}

::google::protobuf::uint8* PoseGraph_Constraint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.Constraint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::submap_id(this), target);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::node_id(this), target);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::relative_pose(this), target);
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tag(), target);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->translation_weight(), target);
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rotation_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.Constraint)
  return target;
}

size_t PoseGraph_Constraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.Constraint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SubmapId submap_id = 1;
  if (this->has_submap_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *submap_id_);
  }

  // .cartographer.mapping.proto.NodeId node_id = 2;
  if (this->has_node_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_id_);
  }

  // .cartographer.transform.proto.Rigid3d relative_pose = 3;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_pose_);
  }

  // double translation_weight = 6;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 7;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // .cartographer.mapping.proto.PoseGraph.Constraint.Tag tag = 5;
  if (this->tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraph_Constraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph_Constraint* source =
      ::google::protobuf::DynamicCastToGenerated<PoseGraph_Constraint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph.Constraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph.Constraint)
    MergeFrom(*source);
  }
}

void PoseGraph_Constraint::MergeFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_submap_id()) {
    mutable_submap_id()->::cartographer::mapping::proto::SubmapId::MergeFrom(from.submap_id());
  }
  if (from.has_node_id()) {
    mutable_node_id()->::cartographer::mapping::proto::NodeId::MergeFrom(from.node_id());
  }
  if (from.has_relative_pose()) {
    mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.tag() != 0) {
    set_tag(from.tag());
  }
}

void PoseGraph_Constraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph_Constraint::CopyFrom(const PoseGraph_Constraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.Constraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_Constraint::IsInitialized() const {
  return true;
}

void PoseGraph_Constraint::Swap(PoseGraph_Constraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph_Constraint::InternalSwap(PoseGraph_Constraint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(submap_id_, other->submap_id_);
  swap(node_id_, other->node_id_);
  swap(relative_pose_, other->relative_pose_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(tag_, other->tag_);
}

::google::protobuf::Metadata PoseGraph_Constraint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PoseGraph_LandmarkPose::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseGraph_LandmarkPose_default_instance_._instance.get_mutable()->global_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class PoseGraph_LandmarkPose::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& global_pose(const PoseGraph_LandmarkPose* msg);
};

const ::cartographer::transform::proto::Rigid3d&
PoseGraph_LandmarkPose::HasBitSetters::global_pose(const PoseGraph_LandmarkPose* msg) {
  return *msg->global_pose_;
}
void PoseGraph_LandmarkPose::clear_global_pose() {
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph_LandmarkPose::kLandmarkIdFieldNumber;
const int PoseGraph_LandmarkPose::kGlobalPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph_LandmarkPose::PoseGraph_LandmarkPose()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}
PoseGraph_LandmarkPose::PoseGraph_LandmarkPose(const PoseGraph_LandmarkPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  landmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.landmark_id().size() > 0) {
    landmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_global_pose()) {
    global_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.global_pose_);
  } else {
    global_pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}

void PoseGraph_LandmarkPose::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  landmark_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  global_pose_ = nullptr;
}

PoseGraph_LandmarkPose::~PoseGraph_LandmarkPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  SharedDtor();
}

void PoseGraph_LandmarkPose::SharedDtor() {
  landmark_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete global_pose_;
}

void PoseGraph_LandmarkPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseGraph_LandmarkPose& PoseGraph_LandmarkPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PoseGraph_LandmarkPose_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void PoseGraph_LandmarkPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && global_pose_ != nullptr) {
    delete global_pose_;
  }
  global_pose_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PoseGraph_LandmarkPose::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PoseGraph_LandmarkPose*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string landmark_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
        object = msg->mutable_landmark_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_global_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PoseGraph_LandmarkPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string landmark_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_landmark_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d global_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PoseGraph_LandmarkPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->landmark_id(), output);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::global_pose(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph.LandmarkPose)
}

::google::protobuf::uint8* PoseGraph_LandmarkPose::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->landmark_id().data(), static_cast<int>(this->landmark_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.PoseGraph.LandmarkPose.landmark_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->landmark_id(), target);
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::global_pose(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  return target;
}

size_t PoseGraph_LandmarkPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string landmark_id = 1;
  if (this->landmark_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->landmark_id());
  }

  // .cartographer.transform.proto.Rigid3d global_pose = 2;
  if (this->has_global_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *global_pose_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraph_LandmarkPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph_LandmarkPose* source =
      ::google::protobuf::DynamicCastToGenerated<PoseGraph_LandmarkPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph.LandmarkPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph.LandmarkPose)
    MergeFrom(*source);
  }
}

void PoseGraph_LandmarkPose::MergeFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.landmark_id().size() > 0) {

    landmark_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.landmark_id_);
  }
  if (from.has_global_pose()) {
    mutable_global_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.global_pose());
  }
}

void PoseGraph_LandmarkPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph_LandmarkPose::CopyFrom(const PoseGraph_LandmarkPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph.LandmarkPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph_LandmarkPose::IsInitialized() const {
  return true;
}

void PoseGraph_LandmarkPose::Swap(PoseGraph_LandmarkPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph_LandmarkPose::InternalSwap(PoseGraph_LandmarkPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  landmark_id_.Swap(&other->landmark_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(global_pose_, other->global_pose_);
}

::google::protobuf::Metadata PoseGraph_LandmarkPose::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PoseGraph::InitAsDefaultInstance() {
}
class PoseGraph::HasBitSetters {
 public:
};

void PoseGraph::clear_trajectory() {
  trajectory_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraph::kConstraintFieldNumber;
const int PoseGraph::kTrajectoryFieldNumber;
const int PoseGraph::kLandmarkPosesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraph::PoseGraph()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraph)
}
PoseGraph::PoseGraph(const PoseGraph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      constraint_(from.constraint_),
      trajectory_(from.trajectory_),
      landmark_poses_(from.landmark_poses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraph)
}

void PoseGraph::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
}

PoseGraph::~PoseGraph() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraph)
  SharedDtor();
}

void PoseGraph::SharedDtor() {
}

void PoseGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseGraph& PoseGraph::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PoseGraph_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto.base);
  return *internal_default_instance();
}


void PoseGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  constraint_.Clear();
  trajectory_.Clear();
  landmark_poses_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PoseGraph::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PoseGraph*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::mapping::proto::PoseGraph_Constraint::_InternalParse;
          object = msg->add_constraint();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::mapping::proto::Trajectory::_InternalParse;
          object = msg->add_trajectory();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::mapping::proto::PoseGraph_LandmarkPose::_InternalParse;
          object = msg->add_landmark_poses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PoseGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraph)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_constraint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmark_poses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraph)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PoseGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraint_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->constraint(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->trajectory(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->landmark_poses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraph)
}

::google::protobuf::uint8* PoseGraph::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->constraint_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->constraint(static_cast<int>(i)), target);
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->trajectory(static_cast<int>(i)), target);
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_poses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->landmark_poses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraph)
  return target;
}

size_t PoseGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraph)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.PoseGraph.Constraint constraint = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->constraint_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->constraint(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.mapping.proto.Trajectory trajectory = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.mapping.proto.PoseGraph.LandmarkPose landmark_poses = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_poses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmark_poses(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraph* source =
      ::google::protobuf::DynamicCastToGenerated<PoseGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraph)
    MergeFrom(*source);
  }
}

void PoseGraph::MergeFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  constraint_.MergeFrom(from.constraint_);
  trajectory_.MergeFrom(from.trajectory_);
  landmark_poses_.MergeFrom(from.landmark_poses_);
}

void PoseGraph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraph::CopyFrom(const PoseGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraph::IsInitialized() const {
  return true;
}

void PoseGraph::Swap(PoseGraph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraph::InternalSwap(PoseGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&constraint_)->InternalSwap(CastToBase(&other->constraint_));
  CastToBase(&trajectory_)->InternalSwap(CastToBase(&other->trajectory_));
  CastToBase(&landmark_poses_)->InternalSwap(CastToBase(&other->landmark_poses_));
}

::google::protobuf::Metadata PoseGraph::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SubmapId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SubmapId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SubmapId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::NodeId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::NodeId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph_Constraint* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph_Constraint >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraph_Constraint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph_LandmarkPose* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraph_LandmarkPose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraph* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraph >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraph >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
