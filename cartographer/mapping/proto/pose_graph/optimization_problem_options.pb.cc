// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph/optimization_problem_options.proto

#include "cartographer/mapping/proto/pose_graph/optimization_problem_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {
class OptimizationProblemOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OptimizationProblemOptions> _instance;
} _OptimizationProblemOptions_default_instance_;
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsOptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_;
    new (ptr) ::cartographer::mapping::optimization::proto::OptimizationProblemOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::optimization::proto::OptimizationProblemOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto}, {
      &scc_info_CeresSolverOptions_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, huber_scale_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, acceleration_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, local_slam_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, local_slam_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, odometry_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, odometry_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fixed_frame_pose_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, fix_z_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, use_online_imu_extrinsics_in_3d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, log_solver_summary_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::optimization::proto::OptimizationProblemOptions, ceres_solver_options_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::optimization::proto::OptimizationProblemOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[] =
  "\nHcartographer/mapping/proto/pose_graph/"
  "optimization_problem_options.proto\022\'cart"
  "ographer.mapping.optimization.proto\0324car"
  "tographer/common/proto/ceres_solver_opti"
  "ons.proto\"\201\004\n\032OptimizationProblemOptions"
  "\022\023\n\013huber_scale\030\001 \001(\001\022\033\n\023acceleration_we"
  "ight\030\010 \001(\001\022\027\n\017rotation_weight\030\t \001(\001\022*\n\"l"
  "ocal_slam_pose_translation_weight\030\016 \001(\001\022"
  "\'\n\037local_slam_pose_rotation_weight\030\017 \001(\001"
  "\022#\n\033odometry_translation_weight\030\020 \001(\001\022 \n"
  "\030odometry_rotation_weight\030\021 \001(\001\022+\n#fixed"
  "_frame_pose_translation_weight\030\013 \001(\001\022(\n "
  "fixed_frame_pose_rotation_weight\030\014 \001(\001\022\023"
  "\n\013fix_z_in_3d\030\r \001(\010\022\'\n\037use_online_imu_ex"
  "trinsics_in_3d\030\022 \001(\010\022\032\n\022log_solver_summa"
  "ry\030\005 \001(\010\022K\n\024ceres_solver_options\030\007 \001(\0132-"
  ".cartographer.common.proto.CeresSolverOp"
  "tionsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
  "cartographer/mapping/proto/pose_graph/optimization_problem_options.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, 693,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_cartographer_2fcommon_2fproto_2fceres_5fsolver_5foptions_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace optimization {
namespace proto {

// ===================================================================

void OptimizationProblemOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::optimization::proto::_OptimizationProblemOptions_default_instance_._instance.get_mutable()->ceres_solver_options_ = const_cast< ::cartographer::common::proto::CeresSolverOptions*>(
      ::cartographer::common::proto::CeresSolverOptions::internal_default_instance());
}
class OptimizationProblemOptions::HasBitSetters {
 public:
  static const ::cartographer::common::proto::CeresSolverOptions& ceres_solver_options(const OptimizationProblemOptions* msg);
};

const ::cartographer::common::proto::CeresSolverOptions&
OptimizationProblemOptions::HasBitSetters::ceres_solver_options(const OptimizationProblemOptions* msg) {
  return *msg->ceres_solver_options_;
}
void OptimizationProblemOptions::clear_ceres_solver_options() {
  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OptimizationProblemOptions::kHuberScaleFieldNumber;
const int OptimizationProblemOptions::kAccelerationWeightFieldNumber;
const int OptimizationProblemOptions::kRotationWeightFieldNumber;
const int OptimizationProblemOptions::kLocalSlamPoseTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kLocalSlamPoseRotationWeightFieldNumber;
const int OptimizationProblemOptions::kOdometryTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kOdometryRotationWeightFieldNumber;
const int OptimizationProblemOptions::kFixedFramePoseTranslationWeightFieldNumber;
const int OptimizationProblemOptions::kFixedFramePoseRotationWeightFieldNumber;
const int OptimizationProblemOptions::kFixZIn3DFieldNumber;
const int OptimizationProblemOptions::kUseOnlineImuExtrinsicsIn3DFieldNumber;
const int OptimizationProblemOptions::kLogSolverSummaryFieldNumber;
const int OptimizationProblemOptions::kCeresSolverOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OptimizationProblemOptions::OptimizationProblemOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}
OptimizationProblemOptions::OptimizationProblemOptions(const OptimizationProblemOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ceres_solver_options()) {
    ceres_solver_options_ = new ::cartographer::common::proto::CeresSolverOptions(*from.ceres_solver_options_);
  } else {
    ceres_solver_options_ = nullptr;
  }
  ::memcpy(&huber_scale_, &from.huber_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&odometry_rotation_weight_) -
    reinterpret_cast<char*>(&huber_scale_)) + sizeof(odometry_rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

void OptimizationProblemOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base);
  ::memset(&ceres_solver_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&ceres_solver_options_)) + sizeof(odometry_rotation_weight_));
}

OptimizationProblemOptions::~OptimizationProblemOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  SharedDtor();
}

void OptimizationProblemOptions::SharedDtor() {
  if (this != internal_default_instance()) delete ceres_solver_options_;
}

void OptimizationProblemOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OptimizationProblemOptions& OptimizationProblemOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base);
  return *internal_default_instance();
}


void OptimizationProblemOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ceres_solver_options_ != nullptr) {
    delete ceres_solver_options_;
  }
  ceres_solver_options_ = nullptr;
  ::memset(&huber_scale_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&odometry_rotation_weight_) -
      reinterpret_cast<char*>(&huber_scale_)) + sizeof(odometry_rotation_weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OptimizationProblemOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OptimizationProblemOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // double huber_scale = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_huber_scale(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool log_solver_summary = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_log_solver_summary(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::common::proto::CeresSolverOptions::_InternalParse;
        object = msg->mutable_ceres_solver_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double acceleration_weight = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_acceleration_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double rotation_weight = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 73) goto handle_unusual;
        msg->set_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double fixed_frame_pose_translation_weight = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 89) goto handle_unusual;
        msg->set_fixed_frame_pose_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double fixed_frame_pose_rotation_weight = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 97) goto handle_unusual;
        msg->set_fixed_frame_pose_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool fix_z_in_3d = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_fix_z_in_3d(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double local_slam_pose_translation_weight = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 113) goto handle_unusual;
        msg->set_local_slam_pose_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double local_slam_pose_rotation_weight = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 121) goto handle_unusual;
        msg->set_local_slam_pose_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double odometry_translation_weight = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 129) goto handle_unusual;
        msg->set_odometry_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double odometry_rotation_weight = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 137) goto handle_unusual;
        msg->set_odometry_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool use_online_imu_extrinsics_in_3d = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_use_online_imu_extrinsics_in_3d(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OptimizationProblemOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double huber_scale = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &huber_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_solver_summary = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_solver_summary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ceres_solver_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acceleration_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (73 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fixed_frame_pose_translation_weight = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (89 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fixed_frame_pose_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fixed_frame_pose_rotation_weight = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (97 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fixed_frame_pose_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool fix_z_in_3d = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fix_z_in_3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double local_slam_pose_translation_weight = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (113 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &local_slam_pose_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double local_slam_pose_rotation_weight = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (121 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &local_slam_pose_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double odometry_translation_weight = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (129 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double odometry_rotation_weight = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (137 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &odometry_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_online_imu_extrinsics_in_3d = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_online_imu_extrinsics_in_3d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OptimizationProblemOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double huber_scale = 1;
  if (this->huber_scale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->huber_scale(), output);
  }

  // bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->log_solver_summary(), output);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::ceres_solver_options(this), output);
  }

  // double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->acceleration_weight(), output);
  }

  // double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rotation_weight(), output);
  }

  // double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->fixed_frame_pose_translation_weight(), output);
  }

  // double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->fixed_frame_pose_rotation_weight(), output);
  }

  // bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->fix_z_in_3d(), output);
  }

  // double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->local_slam_pose_translation_weight(), output);
  }

  // double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->local_slam_pose_rotation_weight(), output);
  }

  // double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->odometry_translation_weight(), output);
  }

  // double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->odometry_rotation_weight(), output);
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->use_online_imu_extrinsics_in_3d() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->use_online_imu_extrinsics_in_3d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
}

::google::protobuf::uint8* OptimizationProblemOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double huber_scale = 1;
  if (this->huber_scale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->huber_scale(), target);
  }

  // bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->log_solver_summary(), target);
  }

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::ceres_solver_options(this), target);
  }

  // double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->acceleration_weight(), target);
  }

  // double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rotation_weight(), target);
  }

  // double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->fixed_frame_pose_translation_weight(), target);
  }

  // double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->fixed_frame_pose_rotation_weight(), target);
  }

  // bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->fix_z_in_3d(), target);
  }

  // double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->local_slam_pose_translation_weight(), target);
  }

  // double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->local_slam_pose_rotation_weight(), target);
  }

  // double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->odometry_translation_weight(), target);
  }

  // double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->odometry_rotation_weight(), target);
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->use_online_imu_extrinsics_in_3d() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->use_online_imu_extrinsics_in_3d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  return target;
}

size_t OptimizationProblemOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.common.proto.CeresSolverOptions ceres_solver_options = 7;
  if (this->has_ceres_solver_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ceres_solver_options_);
  }

  // double huber_scale = 1;
  if (this->huber_scale() != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_weight = 8;
  if (this->acceleration_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 9;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_translation_weight = 11;
  if (this->fixed_frame_pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double fixed_frame_pose_rotation_weight = 12;
  if (this->fixed_frame_pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double local_slam_pose_translation_weight = 14;
  if (this->local_slam_pose_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // bool fix_z_in_3d = 13;
  if (this->fix_z_in_3d() != 0) {
    total_size += 1 + 1;
  }

  // bool use_online_imu_extrinsics_in_3d = 18;
  if (this->use_online_imu_extrinsics_in_3d() != 0) {
    total_size += 2 + 1;
  }

  // bool log_solver_summary = 5;
  if (this->log_solver_summary() != 0) {
    total_size += 1 + 1;
  }

  // double local_slam_pose_rotation_weight = 15;
  if (this->local_slam_pose_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double odometry_translation_weight = 16;
  if (this->odometry_translation_weight() != 0) {
    total_size += 2 + 8;
  }

  // double odometry_rotation_weight = 17;
  if (this->odometry_rotation_weight() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OptimizationProblemOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const OptimizationProblemOptions* source =
      ::google::protobuf::DynamicCastToGenerated<OptimizationProblemOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
    MergeFrom(*source);
  }
}

void OptimizationProblemOptions::MergeFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ceres_solver_options()) {
    mutable_ceres_solver_options()->::cartographer::common::proto::CeresSolverOptions::MergeFrom(from.ceres_solver_options());
  }
  if (from.huber_scale() != 0) {
    set_huber_scale(from.huber_scale());
  }
  if (from.acceleration_weight() != 0) {
    set_acceleration_weight(from.acceleration_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
  if (from.fixed_frame_pose_translation_weight() != 0) {
    set_fixed_frame_pose_translation_weight(from.fixed_frame_pose_translation_weight());
  }
  if (from.fixed_frame_pose_rotation_weight() != 0) {
    set_fixed_frame_pose_rotation_weight(from.fixed_frame_pose_rotation_weight());
  }
  if (from.local_slam_pose_translation_weight() != 0) {
    set_local_slam_pose_translation_weight(from.local_slam_pose_translation_weight());
  }
  if (from.fix_z_in_3d() != 0) {
    set_fix_z_in_3d(from.fix_z_in_3d());
  }
  if (from.use_online_imu_extrinsics_in_3d() != 0) {
    set_use_online_imu_extrinsics_in_3d(from.use_online_imu_extrinsics_in_3d());
  }
  if (from.log_solver_summary() != 0) {
    set_log_solver_summary(from.log_solver_summary());
  }
  if (from.local_slam_pose_rotation_weight() != 0) {
    set_local_slam_pose_rotation_weight(from.local_slam_pose_rotation_weight());
  }
  if (from.odometry_translation_weight() != 0) {
    set_odometry_translation_weight(from.odometry_translation_weight());
  }
  if (from.odometry_rotation_weight() != 0) {
    set_odometry_rotation_weight(from.odometry_rotation_weight());
  }
}

void OptimizationProblemOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationProblemOptions::CopyFrom(const OptimizationProblemOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.optimization.proto.OptimizationProblemOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationProblemOptions::IsInitialized() const {
  return true;
}

void OptimizationProblemOptions::Swap(OptimizationProblemOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OptimizationProblemOptions::InternalSwap(OptimizationProblemOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ceres_solver_options_, other->ceres_solver_options_);
  swap(huber_scale_, other->huber_scale_);
  swap(acceleration_weight_, other->acceleration_weight_);
  swap(rotation_weight_, other->rotation_weight_);
  swap(fixed_frame_pose_translation_weight_, other->fixed_frame_pose_translation_weight_);
  swap(fixed_frame_pose_rotation_weight_, other->fixed_frame_pose_rotation_weight_);
  swap(local_slam_pose_translation_weight_, other->local_slam_pose_translation_weight_);
  swap(fix_z_in_3d_, other->fix_z_in_3d_);
  swap(use_online_imu_extrinsics_in_3d_, other->use_online_imu_extrinsics_in_3d_);
  swap(log_solver_summary_, other->log_solver_summary_);
  swap(local_slam_pose_rotation_weight_, other->local_slam_pose_rotation_weight_);
  swap(odometry_translation_weight_, other->odometry_translation_weight_);
  swap(odometry_rotation_weight_, other->odometry_rotation_weight_);
}

::google::protobuf::Metadata OptimizationProblemOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::optimization::proto::OptimizationProblemOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
