// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/pose_graph_options.proto

#include "cartographer/mapping/proto/pose_graph_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_ConstraintBuilderOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class PoseGraphOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PoseGraphOptions> _instance;
} _PoseGraphOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsPoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_PoseGraphOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::PoseGraphOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::PoseGraphOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto}, {
      &scc_info_ConstraintBuilderOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto.base,
      &scc_info_OptimizationProblemOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[1];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimize_every_n_nodes_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, constraint_builder_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, matcher_rotation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, optimization_problem_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, max_num_final_iterations_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_sampling_ratio_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, log_residual_histograms_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::PoseGraphOptions, global_constraint_search_after_n_seconds_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::PoseGraphOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_PoseGraphOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, "cartographer/mapping/proto/pose_graph_options.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[] =
  "\n3cartographer/mapping/proto/pose_graph_"
  "options.proto\022\032cartographer.mapping.prot"
  "o\032Fcartographer/mapping/proto/pose_graph"
  "/constraint_builder_options.proto\032Hcarto"
  "grapher/mapping/proto/pose_graph/optimiz"
  "ation_problem_options.proto\"\334\003\n\020PoseGrap"
  "hOptions\022\036\n\026optimize_every_n_nodes\030\001 \001(\005"
  "\022d\n\032constraint_builder_options\030\003 \001(\0132@.c"
  "artographer.mapping.constraints.proto.Co"
  "nstraintBuilderOptions\022\"\n\032matcher_transl"
  "ation_weight\030\007 \001(\001\022\037\n\027matcher_rotation_w"
  "eight\030\010 \001(\001\022i\n\034optimization_problem_opti"
  "ons\030\004 \001(\0132C.cartographer.mapping.optimiz"
  "ation.proto.OptimizationProblemOptions\022 "
  "\n\030max_num_final_iterations\030\006 \001(\005\022\035\n\025glob"
  "al_sampling_ratio\030\005 \001(\001\022\037\n\027log_residual_"
  "histograms\030\t \001(\010\0220\n(global_constraint_se"
  "arch_after_n_seconds\030\n \001(\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto,
  "cartographer/mapping/proto/pose_graph_options.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, 714,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2fconstraint_5fbuilder_5foptions_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_2foptimization_5fproblem_5foptions_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {

// ===================================================================

void PoseGraphOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_PoseGraphOptions_default_instance_._instance.get_mutable()->constraint_builder_options_ = const_cast< ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions*>(
      ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::internal_default_instance());
  ::cartographer::mapping::proto::_PoseGraphOptions_default_instance_._instance.get_mutable()->optimization_problem_options_ = const_cast< ::cartographer::mapping::optimization::proto::OptimizationProblemOptions*>(
      ::cartographer::mapping::optimization::proto::OptimizationProblemOptions::internal_default_instance());
}
class PoseGraphOptions::HasBitSetters {
 public:
  static const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions& constraint_builder_options(const PoseGraphOptions* msg);
  static const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions& optimization_problem_options(const PoseGraphOptions* msg);
};

const ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions&
PoseGraphOptions::HasBitSetters::constraint_builder_options(const PoseGraphOptions* msg) {
  return *msg->constraint_builder_options_;
}
const ::cartographer::mapping::optimization::proto::OptimizationProblemOptions&
PoseGraphOptions::HasBitSetters::optimization_problem_options(const PoseGraphOptions* msg) {
  return *msg->optimization_problem_options_;
}
void PoseGraphOptions::clear_constraint_builder_options() {
  if (GetArenaNoVirtual() == nullptr && constraint_builder_options_ != nullptr) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = nullptr;
}
void PoseGraphOptions::clear_optimization_problem_options() {
  if (GetArenaNoVirtual() == nullptr && optimization_problem_options_ != nullptr) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PoseGraphOptions::kOptimizeEveryNNodesFieldNumber;
const int PoseGraphOptions::kConstraintBuilderOptionsFieldNumber;
const int PoseGraphOptions::kMatcherTranslationWeightFieldNumber;
const int PoseGraphOptions::kMatcherRotationWeightFieldNumber;
const int PoseGraphOptions::kOptimizationProblemOptionsFieldNumber;
const int PoseGraphOptions::kMaxNumFinalIterationsFieldNumber;
const int PoseGraphOptions::kGlobalSamplingRatioFieldNumber;
const int PoseGraphOptions::kLogResidualHistogramsFieldNumber;
const int PoseGraphOptions::kGlobalConstraintSearchAfterNSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PoseGraphOptions::PoseGraphOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.PoseGraphOptions)
}
PoseGraphOptions::PoseGraphOptions(const PoseGraphOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_constraint_builder_options()) {
    constraint_builder_options_ = new ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions(*from.constraint_builder_options_);
  } else {
    constraint_builder_options_ = nullptr;
  }
  if (from.has_optimization_problem_options()) {
    optimization_problem_options_ = new ::cartographer::mapping::optimization::proto::OptimizationProblemOptions(*from.optimization_problem_options_);
  } else {
    optimization_problem_options_ = nullptr;
  }
  ::memcpy(&optimize_every_n_nodes_, &from.optimize_every_n_nodes_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_residual_histograms_) -
    reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.PoseGraphOptions)
}

void PoseGraphOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto.base);
  ::memset(&constraint_builder_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_residual_histograms_) -
      reinterpret_cast<char*>(&constraint_builder_options_)) + sizeof(log_residual_histograms_));
}

PoseGraphOptions::~PoseGraphOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.PoseGraphOptions)
  SharedDtor();
}

void PoseGraphOptions::SharedDtor() {
  if (this != internal_default_instance()) delete constraint_builder_options_;
  if (this != internal_default_instance()) delete optimization_problem_options_;
}

void PoseGraphOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseGraphOptions& PoseGraphOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_PoseGraphOptions_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto.base);
  return *internal_default_instance();
}


void PoseGraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && constraint_builder_options_ != nullptr) {
    delete constraint_builder_options_;
  }
  constraint_builder_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && optimization_problem_options_ != nullptr) {
    delete optimization_problem_options_;
  }
  optimization_problem_options_ = nullptr;
  ::memset(&optimize_every_n_nodes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_residual_histograms_) -
      reinterpret_cast<char*>(&optimize_every_n_nodes_)) + sizeof(log_residual_histograms_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PoseGraphOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<PoseGraphOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 optimize_every_n_nodes = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_optimize_every_n_nodes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::_InternalParse;
        object = msg->mutable_constraint_builder_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::optimization::proto::OptimizationProblemOptions::_InternalParse;
        object = msg->mutable_optimization_problem_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double global_sampling_ratio = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_global_sampling_ratio(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 max_num_final_iterations = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_max_num_final_iterations(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double matcher_translation_weight = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_matcher_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double matcher_rotation_weight = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 65) goto handle_unusual;
        msg->set_matcher_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // bool log_residual_histograms = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_log_residual_histograms(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double global_constraint_search_after_n_seconds = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 81) goto handle_unusual;
        msg->set_global_constraint_search_after_n_seconds(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PoseGraphOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.PoseGraphOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 optimize_every_n_nodes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &optimize_every_n_nodes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_constraint_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_optimization_problem_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_sampling_ratio = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_sampling_ratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_final_iterations = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_final_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matcher_translation_weight = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double matcher_rotation_weight = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (65 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &matcher_rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool log_residual_histograms = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &log_residual_histograms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double global_constraint_search_after_n_seconds = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (81 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &global_constraint_search_after_n_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.PoseGraphOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.PoseGraphOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PoseGraphOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->optimize_every_n_nodes(), output);
  }

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::constraint_builder_options(this), output);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::optimization_problem_options(this), output);
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->global_sampling_ratio(), output);
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_num_final_iterations(), output);
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->matcher_translation_weight(), output);
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->matcher_rotation_weight(), output);
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->log_residual_histograms(), output);
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->global_constraint_search_after_n_seconds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.PoseGraphOptions)
}

::google::protobuf::uint8* PoseGraphOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.PoseGraphOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->optimize_every_n_nodes(), target);
  }

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::constraint_builder_options(this), target);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::optimization_problem_options(this), target);
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->global_sampling_ratio(), target);
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_num_final_iterations(), target);
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->matcher_translation_weight(), target);
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->matcher_rotation_weight(), target);
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->log_residual_histograms(), target);
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->global_constraint_search_after_n_seconds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.PoseGraphOptions)
  return target;
}

size_t PoseGraphOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.PoseGraphOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.constraints.proto.ConstraintBuilderOptions constraint_builder_options = 3;
  if (this->has_constraint_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *constraint_builder_options_);
  }

  // .cartographer.mapping.optimization.proto.OptimizationProblemOptions optimization_problem_options = 4;
  if (this->has_optimization_problem_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *optimization_problem_options_);
  }

  // int32 optimize_every_n_nodes = 1;
  if (this->optimize_every_n_nodes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->optimize_every_n_nodes());
  }

  // int32 max_num_final_iterations = 6;
  if (this->max_num_final_iterations() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_num_final_iterations());
  }

  // double global_sampling_ratio = 5;
  if (this->global_sampling_ratio() != 0) {
    total_size += 1 + 8;
  }

  // double matcher_translation_weight = 7;
  if (this->matcher_translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double matcher_rotation_weight = 8;
  if (this->matcher_rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double global_constraint_search_after_n_seconds = 10;
  if (this->global_constraint_search_after_n_seconds() != 0) {
    total_size += 1 + 8;
  }

  // bool log_residual_histograms = 9;
  if (this->log_residual_histograms() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseGraphOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseGraphOptions* source =
      ::google::protobuf::DynamicCastToGenerated<PoseGraphOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.PoseGraphOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.PoseGraphOptions)
    MergeFrom(*source);
  }
}

void PoseGraphOptions::MergeFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.PoseGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_constraint_builder_options()) {
    mutable_constraint_builder_options()->::cartographer::mapping::constraints::proto::ConstraintBuilderOptions::MergeFrom(from.constraint_builder_options());
  }
  if (from.has_optimization_problem_options()) {
    mutable_optimization_problem_options()->::cartographer::mapping::optimization::proto::OptimizationProblemOptions::MergeFrom(from.optimization_problem_options());
  }
  if (from.optimize_every_n_nodes() != 0) {
    set_optimize_every_n_nodes(from.optimize_every_n_nodes());
  }
  if (from.max_num_final_iterations() != 0) {
    set_max_num_final_iterations(from.max_num_final_iterations());
  }
  if (from.global_sampling_ratio() != 0) {
    set_global_sampling_ratio(from.global_sampling_ratio());
  }
  if (from.matcher_translation_weight() != 0) {
    set_matcher_translation_weight(from.matcher_translation_weight());
  }
  if (from.matcher_rotation_weight() != 0) {
    set_matcher_rotation_weight(from.matcher_rotation_weight());
  }
  if (from.global_constraint_search_after_n_seconds() != 0) {
    set_global_constraint_search_after_n_seconds(from.global_constraint_search_after_n_seconds());
  }
  if (from.log_residual_histograms() != 0) {
    set_log_residual_histograms(from.log_residual_histograms());
  }
}

void PoseGraphOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseGraphOptions::CopyFrom(const PoseGraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.PoseGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseGraphOptions::IsInitialized() const {
  return true;
}

void PoseGraphOptions::Swap(PoseGraphOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PoseGraphOptions::InternalSwap(PoseGraphOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(constraint_builder_options_, other->constraint_builder_options_);
  swap(optimization_problem_options_, other->optimization_problem_options_);
  swap(optimize_every_n_nodes_, other->optimize_every_n_nodes_);
  swap(max_num_final_iterations_, other->max_num_final_iterations_);
  swap(global_sampling_ratio_, other->global_sampling_ratio_);
  swap(matcher_translation_weight_, other->matcher_translation_weight_);
  swap(matcher_rotation_weight_, other->matcher_rotation_weight_);
  swap(global_constraint_search_after_n_seconds_, other->global_constraint_search_after_n_seconds_);
  swap(log_residual_histograms_, other->log_residual_histograms_);
}

::google::protobuf::Metadata PoseGraphOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2fpose_5fgraph_5foptions_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::PoseGraphOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::PoseGraphOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::PoseGraphOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
