// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/range_data_inserter_options.proto

#include "cartographer/mapping/proto/range_data_inserter_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_5frange_5fdata_5finserter_5foptions_5f2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ProbabilityGridRangeDataInserterOptions2D_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_5frange_5fdata_5finserter_5foptions_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TSDFRangeDataInserterOptions2D_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class RangeDataInserterOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeDataInserterOptions> _instance;
} _RangeDataInserterOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsRangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_RangeDataInserterOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::RangeDataInserterOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::RangeDataInserterOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto}, {
      &scc_info_ProbabilityGridRangeDataInserterOptions2D_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_5frange_5fdata_5finserter_5foptions_5f2d_2eproto.base,
      &scc_info_TSDFRangeDataInserterOptions2D_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::RangeDataInserterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::RangeDataInserterOptions, range_data_inserter_type_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::RangeDataInserterOptions, probability_grid_range_data_inserter_options_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::RangeDataInserterOptions, tsdf_range_data_inserter_options_2d_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::RangeDataInserterOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_RangeDataInserterOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, "cartographer/mapping/proto/range_data_inserter_options.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, 1, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto[] =
  "\n<cartographer/mapping/proto/range_data_"
  "inserter_options.proto\022\032cartographer.map"
  "ping.proto\032Scartographer/mapping/proto/2"
  "d/probability_grid_range_data_inserter_o"
  "ptions_2d.proto\032Gcartographer/mapping/pr"
  "oto/2d/tsdf_range_data_inserter_options_"
  "2d.proto\"\330\003\n\030RangeDataInserterOptions\022l\n"
  "\030range_data_inserter_type\030\001 \001(\0162J.cartog"
  "rapher.mapping.proto.RangeDataInserterOp"
  "tions.RangeDataInserterType\022~\n/probabili"
  "ty_grid_range_data_inserter_options_2d\030\002"
  " \001(\0132E.cartographer.mapping.proto.Probab"
  "ilityGridRangeDataInserterOptions2D\022g\n#t"
  "sdf_range_data_inserter_options_2d\030\003 \001(\013"
  "2:.cartographer.mapping.proto.TSDFRangeD"
  "ataInserterOptions2D\"e\n\025RangeDataInserte"
  "rType\022\024\n\020INVALID_INSERTER\020\000\022 \n\034PROBABILI"
  "TY_GRID_INSERTER_2D\020\001\022\024\n\020TSDF_INSERTER_2"
  "D\020\002b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto,
  "cartographer/mapping/proto/range_data_inserter_options.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, 731,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2fprobability_5fgrid_5frange_5fdata_5finserter_5foptions_5f2d_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2ftsdf_5frange_5fdata_5finserter_5foptions_5f2d_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {
const ::google::protobuf::EnumDescriptor* RangeDataInserterOptions_RangeDataInserterType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto);
  return file_level_enum_descriptors_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto[0];
}
bool RangeDataInserterOptions_RangeDataInserterType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::INVALID_INSERTER;
const RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::PROBABILITY_GRID_INSERTER_2D;
const RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::TSDF_INSERTER_2D;
const RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::RangeDataInserterType_MIN;
const RangeDataInserterOptions_RangeDataInserterType RangeDataInserterOptions::RangeDataInserterType_MAX;
const int RangeDataInserterOptions::RangeDataInserterType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void RangeDataInserterOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_RangeDataInserterOptions_default_instance_._instance.get_mutable()->probability_grid_range_data_inserter_options_2d_ = const_cast< ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D*>(
      ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D::internal_default_instance());
  ::cartographer::mapping::proto::_RangeDataInserterOptions_default_instance_._instance.get_mutable()->tsdf_range_data_inserter_options_2d_ = const_cast< ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D*>(
      ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D::internal_default_instance());
}
class RangeDataInserterOptions::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D& probability_grid_range_data_inserter_options_2d(const RangeDataInserterOptions* msg);
  static const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D& tsdf_range_data_inserter_options_2d(const RangeDataInserterOptions* msg);
};

const ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D&
RangeDataInserterOptions::HasBitSetters::probability_grid_range_data_inserter_options_2d(const RangeDataInserterOptions* msg) {
  return *msg->probability_grid_range_data_inserter_options_2d_;
}
const ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D&
RangeDataInserterOptions::HasBitSetters::tsdf_range_data_inserter_options_2d(const RangeDataInserterOptions* msg) {
  return *msg->tsdf_range_data_inserter_options_2d_;
}
void RangeDataInserterOptions::clear_probability_grid_range_data_inserter_options_2d() {
  if (GetArenaNoVirtual() == nullptr && probability_grid_range_data_inserter_options_2d_ != nullptr) {
    delete probability_grid_range_data_inserter_options_2d_;
  }
  probability_grid_range_data_inserter_options_2d_ = nullptr;
}
void RangeDataInserterOptions::clear_tsdf_range_data_inserter_options_2d() {
  if (GetArenaNoVirtual() == nullptr && tsdf_range_data_inserter_options_2d_ != nullptr) {
    delete tsdf_range_data_inserter_options_2d_;
  }
  tsdf_range_data_inserter_options_2d_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeDataInserterOptions::kRangeDataInserterTypeFieldNumber;
const int RangeDataInserterOptions::kProbabilityGridRangeDataInserterOptions2DFieldNumber;
const int RangeDataInserterOptions::kTsdfRangeDataInserterOptions2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeDataInserterOptions::RangeDataInserterOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.RangeDataInserterOptions)
}
RangeDataInserterOptions::RangeDataInserterOptions(const RangeDataInserterOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_probability_grid_range_data_inserter_options_2d()) {
    probability_grid_range_data_inserter_options_2d_ = new ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D(*from.probability_grid_range_data_inserter_options_2d_);
  } else {
    probability_grid_range_data_inserter_options_2d_ = nullptr;
  }
  if (from.has_tsdf_range_data_inserter_options_2d()) {
    tsdf_range_data_inserter_options_2d_ = new ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D(*from.tsdf_range_data_inserter_options_2d_);
  } else {
    tsdf_range_data_inserter_options_2d_ = nullptr;
  }
  range_data_inserter_type_ = from.range_data_inserter_type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.RangeDataInserterOptions)
}

void RangeDataInserterOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto.base);
  ::memset(&probability_grid_range_data_inserter_options_2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&range_data_inserter_type_) -
      reinterpret_cast<char*>(&probability_grid_range_data_inserter_options_2d_)) + sizeof(range_data_inserter_type_));
}

RangeDataInserterOptions::~RangeDataInserterOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.RangeDataInserterOptions)
  SharedDtor();
}

void RangeDataInserterOptions::SharedDtor() {
  if (this != internal_default_instance()) delete probability_grid_range_data_inserter_options_2d_;
  if (this != internal_default_instance()) delete tsdf_range_data_inserter_options_2d_;
}

void RangeDataInserterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeDataInserterOptions& RangeDataInserterOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RangeDataInserterOptions_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto.base);
  return *internal_default_instance();
}


void RangeDataInserterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.RangeDataInserterOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && probability_grid_range_data_inserter_options_2d_ != nullptr) {
    delete probability_grid_range_data_inserter_options_2d_;
  }
  probability_grid_range_data_inserter_options_2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && tsdf_range_data_inserter_options_2d_ != nullptr) {
    delete tsdf_range_data_inserter_options_2d_;
  }
  tsdf_range_data_inserter_options_2d_ = nullptr;
  range_data_inserter_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RangeDataInserterOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RangeDataInserterOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_range_data_inserter_type(static_cast<::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D::_InternalParse;
        object = msg->mutable_probability_grid_range_data_inserter_options_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D::_InternalParse;
        object = msg->mutable_tsdf_range_data_inserter_options_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RangeDataInserterOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.RangeDataInserterOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_range_data_inserter_type(static_cast< ::cartographer::mapping::proto::RangeDataInserterOptions_RangeDataInserterType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_probability_grid_range_data_inserter_options_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tsdf_range_data_inserter_options_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.RangeDataInserterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.RangeDataInserterOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RangeDataInserterOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.RangeDataInserterOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
  if (this->range_data_inserter_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->range_data_inserter_type(), output);
  }

  // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
  if (this->has_probability_grid_range_data_inserter_options_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::probability_grid_range_data_inserter_options_2d(this), output);
  }

  // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
  if (this->has_tsdf_range_data_inserter_options_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::tsdf_range_data_inserter_options_2d(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.RangeDataInserterOptions)
}

::google::protobuf::uint8* RangeDataInserterOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.RangeDataInserterOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
  if (this->range_data_inserter_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->range_data_inserter_type(), target);
  }

  // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
  if (this->has_probability_grid_range_data_inserter_options_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::probability_grid_range_data_inserter_options_2d(this), target);
  }

  // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
  if (this->has_tsdf_range_data_inserter_options_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::tsdf_range_data_inserter_options_2d(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.RangeDataInserterOptions)
  return target;
}

size_t RangeDataInserterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.RangeDataInserterOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.ProbabilityGridRangeDataInserterOptions2D probability_grid_range_data_inserter_options_2d = 2;
  if (this->has_probability_grid_range_data_inserter_options_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *probability_grid_range_data_inserter_options_2d_);
  }

  // .cartographer.mapping.proto.TSDFRangeDataInserterOptions2D tsdf_range_data_inserter_options_2d = 3;
  if (this->has_tsdf_range_data_inserter_options_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *tsdf_range_data_inserter_options_2d_);
  }

  // .cartographer.mapping.proto.RangeDataInserterOptions.RangeDataInserterType range_data_inserter_type = 1;
  if (this->range_data_inserter_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->range_data_inserter_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeDataInserterOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.RangeDataInserterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeDataInserterOptions* source =
      ::google::protobuf::DynamicCastToGenerated<RangeDataInserterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.RangeDataInserterOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.RangeDataInserterOptions)
    MergeFrom(*source);
  }
}

void RangeDataInserterOptions::MergeFrom(const RangeDataInserterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.RangeDataInserterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_probability_grid_range_data_inserter_options_2d()) {
    mutable_probability_grid_range_data_inserter_options_2d()->::cartographer::mapping::proto::ProbabilityGridRangeDataInserterOptions2D::MergeFrom(from.probability_grid_range_data_inserter_options_2d());
  }
  if (from.has_tsdf_range_data_inserter_options_2d()) {
    mutable_tsdf_range_data_inserter_options_2d()->::cartographer::mapping::proto::TSDFRangeDataInserterOptions2D::MergeFrom(from.tsdf_range_data_inserter_options_2d());
  }
  if (from.range_data_inserter_type() != 0) {
    set_range_data_inserter_type(from.range_data_inserter_type());
  }
}

void RangeDataInserterOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.RangeDataInserterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDataInserterOptions::CopyFrom(const RangeDataInserterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.RangeDataInserterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDataInserterOptions::IsInitialized() const {
  return true;
}

void RangeDataInserterOptions::Swap(RangeDataInserterOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeDataInserterOptions::InternalSwap(RangeDataInserterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(probability_grid_range_data_inserter_options_2d_, other->probability_grid_range_data_inserter_options_2d_);
  swap(tsdf_range_data_inserter_options_2d_, other->tsdf_range_data_inserter_options_2d_);
  swap(range_data_inserter_type_, other->range_data_inserter_type_);
}

::google::protobuf::Metadata RangeDataInserterOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2frange_5fdata_5finserter_5foptions_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::RangeDataInserterOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::RangeDataInserterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::RangeDataInserterOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
