// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_builder_options.proto

#include "cartographer/mapping/proto/trajectory_builder_options.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto ::google::protobuf::internal::SCCInfo<5> scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace mapping {
namespace proto {
class InitialTrajectoryPoseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitialTrajectoryPose> _instance;
} _InitialTrajectoryPose_default_instance_;
class TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D> _instance;
} _TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions> _instance;
} _TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
class TrajectoryBuilderOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptions> _instance;
} _TrajectoryBuilderOptions_default_instance_;
class SensorIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorId> _instance;
} _SensorId_default_instance_;
class TrajectoryBuilderOptionsWithSensorIdsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TrajectoryBuilderOptionsWithSensorIds> _instance;
} _TrajectoryBuilderOptionsWithSensorIds_default_instance_;
class AllTrajectoryBuilderOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AllTrajectoryBuilderOptions> _instance;
} _AllTrajectoryBuilderOptions_default_instance_;
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
static void InitDefaultsInitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_;
    new (ptr) ::cartographer::mapping::proto::InitialTrajectoryPose();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::InitialTrajectoryPose::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsTrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {}};

static void InitDefaultsTrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {}};

static void InitDefaultsTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<5> scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_LocalTrajectoryBuilderOptions2D_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto.base,
      &scc_info_LocalTrajectoryBuilderOptions3D_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto.base,
      &scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static void InitDefaultsSensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_SensorId_default_instance_;
    new (ptr) ::cartographer::mapping::proto::SensorId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::SensorId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {}};

static void InitDefaultsTrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_;
    new (ptr) ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,
      &scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

static void InitDefaultsAllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::mapping::proto::_AllTrajectoryBuilderOptions_default_instance_;
    new (ptr) ::cartographer::mapping::proto::AllTrajectoryBuilderOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::mapping::proto::AllTrajectoryBuilderOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto}, {
      &scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base,}};

void InitDefaults_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, relative_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, to_trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::InitialTrajectoryPose, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D, fresh_submaps_count_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D, min_covered_area_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D, min_added_submaps_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions, max_submaps_to_keep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, trajectory_builder_2d_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, trajectory_builder_3d_options_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, initial_trajectory_pose_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, overlapping_submaps_trimmer_2d_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, pure_localization_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, pure_localization_trimmer_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, collate_fixed_frame_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptions, collate_landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, type_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::SensorId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds, trajectory_builder_options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::AllTrajectoryBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::mapping::proto::AllTrajectoryBuilderOptions, options_with_sensor_ids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::mapping::proto::InitialTrajectoryPose)},
  { 8, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D)},
  { 16, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions)},
  { 22, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptions)},
  { 35, -1, sizeof(::cartographer::mapping::proto::SensorId)},
  { 42, -1, sizeof(::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds)},
  { 49, -1, sizeof(::cartographer::mapping::proto::AllTrajectoryBuilderOptions)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_SensorId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::mapping::proto::_AllTrajectoryBuilderOptions_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = {
  {}, AddDescriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, "cartographer/mapping/proto/trajectory_builder_options.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto::offsets,
  file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, 7, file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, file_level_service_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto,
};

const char descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[] =
  "\n;cartographer/mapping/proto/trajectory_"
  "builder_options.proto\022\032cartographer.mapp"
  "ing.proto\032,cartographer/transform/proto/"
  "transform.proto\032Gcartographer/mapping/pr"
  "oto/2d/local_trajectory_builder_options_"
  "2d.proto\032Gcartographer/mapping/proto/3d/"
  "local_trajectory_builder_options_3d.prot"
  "o\"\202\001\n\025InitialTrajectoryPose\022<\n\rrelative_"
  "pose\030\001 \001(\0132%.cartographer.transform.prot"
  "o.Rigid3d\022\030\n\020to_trajectory_id\030\002 \001(\005\022\021\n\tt"
  "imestamp\030\003 \001(\003\"\303\006\n\030TrajectoryBuilderOpti"
  "ons\022b\n\035trajectory_builder_2d_options\030\001 \001"
  "(\0132;.cartographer.mapping.proto.LocalTra"
  "jectoryBuilderOptions2D\022b\n\035trajectory_bu"
  "ilder_3d_options\030\002 \001(\0132;.cartographer.ma"
  "pping.proto.LocalTrajectoryBuilderOption"
  "s3D\022R\n\027initial_trajectory_pose\030\004 \001(\01321.c"
  "artographer.mapping.proto.InitialTraject"
  "oryPose\022\177\n\036overlapping_submaps_trimmer_2"
  "d\030\005 \001(\0132W.cartographer.mapping.proto.Tra"
  "jectoryBuilderOptions.OverlappingSubmaps"
  "TrimmerOptions2D\022\035\n\021pure_localization\030\003 "
  "\001(\010B\002\030\001\022v\n\031pure_localization_trimmer\030\006 \001"
  "(\0132S.cartographer.mapping.proto.Trajecto"
  "ryBuilderOptions.PureLocalizationTrimmer"
  "Options\022\033\n\023collate_fixed_frame\030\007 \001(\010\022\031\n\021"
  "collate_landmarks\030\010 \001(\010\032|\n\"OverlappingSu"
  "bmapsTrimmerOptions2D\022\033\n\023fresh_submaps_c"
  "ount\030\001 \001(\005\022\030\n\020min_covered_area\030\002 \001(\001\022\037\n\027"
  "min_added_submaps_count\030\003 \001(\005\032=\n\036PureLoc"
  "alizationTrimmerOptions\022\033\n\023max_submaps_t"
  "o_keep\030\001 \001(\005\"\300\001\n\010SensorId\022=\n\004type\030\001 \001(\0162"
  "/.cartographer.mapping.proto.SensorId.Se"
  "nsorType\022\n\n\002id\030\002 \001(\t\"i\n\nSensorType\022\t\n\005RA"
  "NGE\020\000\022\007\n\003IMU\020\001\022\014\n\010ODOMETRY\020\002\022\024\n\020FIXED_FR"
  "AME_POSE\020\003\022\014\n\010LANDMARK\020\004\022\025\n\021LOCAL_SLAM_R"
  "ESULT\020\005\"\272\001\n%TrajectoryBuilderOptionsWith"
  "SensorIds\0227\n\tsensor_id\030\001 \003(\0132$.cartograp"
  "her.mapping.proto.SensorId\022X\n\032trajectory"
  "_builder_options\030\002 \001(\01324.cartographer.ma"
  "pping.proto.TrajectoryBuilderOptions\"\201\001\n"
  "\033AllTrajectoryBuilderOptions\022b\n\027options_"
  "with_sensor_ids\030\001 \003(\0132A.cartographer.map"
  "ping.proto.TrajectoryBuilderOptionsWithS"
  "ensorIdsb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = {
  false, InitDefaults_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, 
  descriptor_table_protodef_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto,
  "cartographer/mapping/proto/trajectory_builder_options.proto", &assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, 1776,
};

void AddDescriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[3] =
  {
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f2d_2flocal_5ftrajectory_5fbuilder_5foptions_5f2d_2eproto,
    ::AddDescriptors_cartographer_2fmapping_2fproto_2f3d_2flocal_5ftrajectory_5fbuilder_5foptions_5f3d_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto, deps, 3);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto = []() { AddDescriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto(); return true; }();
namespace cartographer {
namespace mapping {
namespace proto {
const ::google::protobuf::EnumDescriptor* SensorId_SensorType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return file_level_enum_descriptors_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[0];
}
bool SensorId_SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SensorId_SensorType SensorId::RANGE;
const SensorId_SensorType SensorId::IMU;
const SensorId_SensorType SensorId::ODOMETRY;
const SensorId_SensorType SensorId::FIXED_FRAME_POSE;
const SensorId_SensorType SensorId::LANDMARK;
const SensorId_SensorType SensorId::LOCAL_SLAM_RESULT;
const SensorId_SensorType SensorId::SensorType_MIN;
const SensorId_SensorType SensorId::SensorType_MAX;
const int SensorId::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void InitialTrajectoryPose::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_InitialTrajectoryPose_default_instance_._instance.get_mutable()->relative_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class InitialTrajectoryPose::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& relative_pose(const InitialTrajectoryPose* msg);
};

const ::cartographer::transform::proto::Rigid3d&
InitialTrajectoryPose::HasBitSetters::relative_pose(const InitialTrajectoryPose* msg) {
  return *msg->relative_pose_;
}
void InitialTrajectoryPose::clear_relative_pose() {
  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitialTrajectoryPose::kRelativePoseFieldNumber;
const int InitialTrajectoryPose::kToTrajectoryIdFieldNumber;
const int InitialTrajectoryPose::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitialTrajectoryPose::InitialTrajectoryPose()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}
InitialTrajectoryPose::InitialTrajectoryPose(const InitialTrajectoryPose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relative_pose()) {
    relative_pose_ = new ::cartographer::transform::proto::Rigid3d(*from.relative_pose_);
  } else {
    relative_pose_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_trajectory_id_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.InitialTrajectoryPose)
}

void InitialTrajectoryPose::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::memset(&relative_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&relative_pose_)) + sizeof(to_trajectory_id_));
}

InitialTrajectoryPose::~InitialTrajectoryPose() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.InitialTrajectoryPose)
  SharedDtor();
}

void InitialTrajectoryPose::SharedDtor() {
  if (this != internal_default_instance()) delete relative_pose_;
}

void InitialTrajectoryPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialTrajectoryPose& InitialTrajectoryPose::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitialTrajectoryPose_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void InitialTrajectoryPose::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && relative_pose_ != nullptr) {
    delete relative_pose_;
  }
  relative_pose_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_trajectory_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(to_trajectory_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitialTrajectoryPose::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitialTrajectoryPose*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_relative_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // int32 to_trajectory_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_to_trajectory_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int64 timestamp = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitialTrajectoryPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.InitialTrajectoryPose)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Rigid3d relative_pose = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_trajectory_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_trajectory_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.InitialTrajectoryPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.InitialTrajectoryPose)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitialTrajectoryPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::relative_pose(this), output);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_trajectory_id(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.InitialTrajectoryPose)
}

::google::protobuf::uint8* InitialTrajectoryPose::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.InitialTrajectoryPose)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::relative_pose(this), target);
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_trajectory_id(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.InitialTrajectoryPose)
  return target;
}

size_t InitialTrajectoryPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.InitialTrajectoryPose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d relative_pose = 1;
  if (this->has_relative_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *relative_pose_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 to_trajectory_id = 2;
  if (this->to_trajectory_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_trajectory_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialTrajectoryPose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialTrajectoryPose* source =
      ::google::protobuf::DynamicCastToGenerated<InitialTrajectoryPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.InitialTrajectoryPose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.InitialTrajectoryPose)
    MergeFrom(*source);
  }
}

void InitialTrajectoryPose::MergeFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_relative_pose()) {
    mutable_relative_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.relative_pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.to_trajectory_id() != 0) {
    set_to_trajectory_id(from.to_trajectory_id());
  }
}

void InitialTrajectoryPose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialTrajectoryPose::CopyFrom(const InitialTrajectoryPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.InitialTrajectoryPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialTrajectoryPose::IsInitialized() const {
  return true;
}

void InitialTrajectoryPose::Swap(InitialTrajectoryPose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitialTrajectoryPose::InternalSwap(InitialTrajectoryPose* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(relative_pose_, other->relative_pose_);
  swap(timestamp_, other->timestamp_);
  swap(to_trajectory_id_, other->to_trajectory_id_);
}

::google::protobuf::Metadata InitialTrajectoryPose::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::InitAsDefaultInstance() {
}
class TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::kFreshSubmapsCountFieldNumber;
const int TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::kMinCoveredAreaFieldNumber;
const int TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::kMinAddedSubmapsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
}
TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_covered_area_, &from.min_covered_area_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_added_submaps_count_) -
    reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::SharedCtor() {
  ::memset(&min_covered_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_added_submaps_count_) -
      reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
}

TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::~TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  SharedDtor();
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::SharedDtor() {
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_covered_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_added_submaps_count_) -
      reinterpret_cast<char*>(&min_covered_area_)) + sizeof(min_added_submaps_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 fresh_submaps_count = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fresh_submaps_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // double min_covered_area = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_min_covered_area(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // int32 min_added_submaps_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_min_added_submaps_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fresh_submaps_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fresh_submaps_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double min_covered_area = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_covered_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_added_submaps_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_added_submaps_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fresh_submaps_count(), output);
  }

  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->min_covered_area(), output);
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_added_submaps_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
}

::google::protobuf::uint8* TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fresh_submaps_count(), target);
  }

  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->min_covered_area(), target);
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_added_submaps_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  return target;
}

size_t TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min_covered_area = 2;
  if (this->min_covered_area() != 0) {
    total_size += 1 + 8;
  }

  // int32 fresh_submaps_count = 1;
  if (this->fresh_submaps_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fresh_submaps_count());
  }

  // int32 min_added_submaps_count = 3;
  if (this->min_added_submaps_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->min_added_submaps_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* source =
      ::google::protobuf::DynamicCastToGenerated<TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_covered_area() != 0) {
    set_min_covered_area(from.min_covered_area());
  }
  if (from.fresh_submaps_count() != 0) {
    set_fresh_submaps_count(from.fresh_submaps_count());
  }
  if (from.min_added_submaps_count() != 0) {
    set_min_added_submaps_count(from.min_added_submaps_count());
  }
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::CopyFrom(const TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::Swap(TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::InternalSwap(TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_covered_area_, other->min_covered_area_);
  swap(fresh_submaps_count_, other->fresh_submaps_count_);
  swap(min_added_submaps_count_, other->min_added_submaps_count_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InitAsDefaultInstance() {
}
class TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::kMaxSubmapsToKeepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}
TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_submaps_to_keep_ = from.max_submaps_to_keep_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedCtor() {
  max_submaps_to_keep_ = 0;
}

TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::~TrajectoryBuilderOptions_PureLocalizationTrimmerOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SharedDtor() {
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrajectoryBuilderOptions_PureLocalizationTrimmerOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_submaps_to_keep_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 max_submaps_to_keep = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_max_submaps_to_keep(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 max_submaps_to_keep = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_submaps_to_keep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_submaps_to_keep(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_submaps_to_keep(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  return target;
}

size_t TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_submaps_to_keep = 1;
  if (this->max_submaps_to_keep() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_submaps_to_keep());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* source =
      ::google::protobuf::DynamicCastToGenerated<TrajectoryBuilderOptions_PureLocalizationTrimmerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_submaps_to_keep() != 0) {
    set_max_submaps_to_keep(from.max_submaps_to_keep());
  }
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::CopyFrom(const TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::Swap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::InternalSwap(TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_submaps_to_keep_, other->max_submaps_to_keep_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryBuilderOptions::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_2d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D*>(
      ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->trajectory_builder_3d_options_ = const_cast< ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D*>(
      ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->initial_trajectory_pose_ = const_cast< ::cartographer::mapping::proto::InitialTrajectoryPose*>(
      ::cartographer::mapping::proto::InitialTrajectoryPose::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->overlapping_submaps_trimmer_2d_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::internal_default_instance());
  ::cartographer::mapping::proto::_TrajectoryBuilderOptions_default_instance_._instance.get_mutable()->pure_localization_trimmer_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::internal_default_instance());
}
class TrajectoryBuilderOptions::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D& trajectory_builder_2d_options(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D& trajectory_builder_3d_options(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::InitialTrajectoryPose& initial_trajectory_pose(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D& overlapping_submaps_trimmer_2d(const TrajectoryBuilderOptions* msg);
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions& pure_localization_trimmer(const TrajectoryBuilderOptions* msg);
};

const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D&
TrajectoryBuilderOptions::HasBitSetters::trajectory_builder_2d_options(const TrajectoryBuilderOptions* msg) {
  return *msg->trajectory_builder_2d_options_;
}
const ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D&
TrajectoryBuilderOptions::HasBitSetters::trajectory_builder_3d_options(const TrajectoryBuilderOptions* msg) {
  return *msg->trajectory_builder_3d_options_;
}
const ::cartographer::mapping::proto::InitialTrajectoryPose&
TrajectoryBuilderOptions::HasBitSetters::initial_trajectory_pose(const TrajectoryBuilderOptions* msg) {
  return *msg->initial_trajectory_pose_;
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D&
TrajectoryBuilderOptions::HasBitSetters::overlapping_submaps_trimmer_2d(const TrajectoryBuilderOptions* msg) {
  return *msg->overlapping_submaps_trimmer_2d_;
}
const ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions&
TrajectoryBuilderOptions::HasBitSetters::pure_localization_trimmer(const TrajectoryBuilderOptions* msg) {
  return *msg->pure_localization_trimmer_;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_2d_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_2d_options_ != nullptr) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = nullptr;
}
void TrajectoryBuilderOptions::clear_trajectory_builder_3d_options() {
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_3d_options_ != nullptr) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptions::kTrajectoryBuilder2DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kTrajectoryBuilder3DOptionsFieldNumber;
const int TrajectoryBuilderOptions::kInitialTrajectoryPoseFieldNumber;
const int TrajectoryBuilderOptions::kOverlappingSubmapsTrimmer2DFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationFieldNumber;
const int TrajectoryBuilderOptions::kPureLocalizationTrimmerFieldNumber;
const int TrajectoryBuilderOptions::kCollateFixedFrameFieldNumber;
const int TrajectoryBuilderOptions::kCollateLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptions::TrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}
TrajectoryBuilderOptions::TrajectoryBuilderOptions(const TrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_2d_options()) {
    trajectory_builder_2d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D(*from.trajectory_builder_2d_options_);
  } else {
    trajectory_builder_2d_options_ = nullptr;
  }
  if (from.has_trajectory_builder_3d_options()) {
    trajectory_builder_3d_options_ = new ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D(*from.trajectory_builder_3d_options_);
  } else {
    trajectory_builder_3d_options_ = nullptr;
  }
  if (from.has_initial_trajectory_pose()) {
    initial_trajectory_pose_ = new ::cartographer::mapping::proto::InitialTrajectoryPose(*from.initial_trajectory_pose_);
  } else {
    initial_trajectory_pose_ = nullptr;
  }
  if (from.has_overlapping_submaps_trimmer_2d()) {
    overlapping_submaps_trimmer_2d_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D(*from.overlapping_submaps_trimmer_2d_);
  } else {
    overlapping_submaps_trimmer_2d_ = nullptr;
  }
  if (from.has_pure_localization_trimmer()) {
    pure_localization_trimmer_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions(*from.pure_localization_trimmer_);
  } else {
    pure_localization_trimmer_ = nullptr;
  }
  ::memcpy(&pure_localization_, &from.pure_localization_,
    static_cast<size_t>(reinterpret_cast<char*>(&collate_landmarks_) -
    reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

void TrajectoryBuilderOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  ::memset(&trajectory_builder_2d_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&trajectory_builder_2d_options_)) + sizeof(collate_landmarks_));
}

TrajectoryBuilderOptions::~TrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptions)
  SharedDtor();
}

void TrajectoryBuilderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_2d_options_;
  if (this != internal_default_instance()) delete trajectory_builder_3d_options_;
  if (this != internal_default_instance()) delete initial_trajectory_pose_;
  if (this != internal_default_instance()) delete overlapping_submaps_trimmer_2d_;
  if (this != internal_default_instance()) delete pure_localization_trimmer_;
}

void TrajectoryBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptions& TrajectoryBuilderOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_builder_2d_options_ != nullptr) {
    delete trajectory_builder_2d_options_;
  }
  trajectory_builder_2d_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_3d_options_ != nullptr) {
    delete trajectory_builder_3d_options_;
  }
  trajectory_builder_3d_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initial_trajectory_pose_ != nullptr) {
    delete initial_trajectory_pose_;
  }
  initial_trajectory_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && overlapping_submaps_trimmer_2d_ != nullptr) {
    delete overlapping_submaps_trimmer_2d_;
  }
  overlapping_submaps_trimmer_2d_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pure_localization_trimmer_ != nullptr) {
    delete pure_localization_trimmer_;
  }
  pure_localization_trimmer_ = nullptr;
  ::memset(&pure_localization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collate_landmarks_) -
      reinterpret_cast<char*>(&pure_localization_)) + sizeof(collate_landmarks_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryBuilderOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrajectoryBuilderOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::_InternalParse;
        object = msg->mutable_trajectory_builder_2d_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::_InternalParse;
        object = msg->mutable_trajectory_builder_3d_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool pure_localization = 3 [deprecated = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_pure_localization(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::InitialTrajectoryPose::_InternalParse;
        object = msg->mutable_initial_trajectory_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::_InternalParse;
        object = msg->mutable_overlapping_submaps_trimmer_2d();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::_InternalParse;
        object = msg->mutable_pure_localization_trimmer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // bool collate_fixed_frame = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_collate_fixed_frame(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bool collate_landmarks = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_collate_landmarks(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_builder_2d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_builder_3d_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pure_localization = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pure_localization_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initial_trajectory_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overlapping_submaps_trimmer_2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pure_localization_trimmer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collate_fixed_frame = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_fixed_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool collate_landmarks = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &collate_landmarks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::trajectory_builder_2d_options(this), output);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::trajectory_builder_3d_options(this), output);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->pure_localization(), output);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::initial_trajectory_pose(this), output);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::overlapping_submaps_trimmer_2d(this), output);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::pure_localization_trimmer(this), output);
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->collate_fixed_frame(), output);
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->collate_landmarks(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
}

::google::protobuf::uint8* TrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::trajectory_builder_2d_options(this), target);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::trajectory_builder_3d_options(this), target);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->pure_localization(), target);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::initial_trajectory_pose(this), target);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::overlapping_submaps_trimmer_2d(this), target);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::pure_localization_trimmer(this), target);
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->collate_fixed_frame(), target);
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->collate_landmarks(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptions)
  return target;
}

size_t TrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions2D trajectory_builder_2d_options = 1;
  if (this->has_trajectory_builder_2d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_builder_2d_options_);
  }

  // .cartographer.mapping.proto.LocalTrajectoryBuilderOptions3D trajectory_builder_3d_options = 2;
  if (this->has_trajectory_builder_3d_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_builder_3d_options_);
  }

  // .cartographer.mapping.proto.InitialTrajectoryPose initial_trajectory_pose = 4;
  if (this->has_initial_trajectory_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *initial_trajectory_pose_);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.OverlappingSubmapsTrimmerOptions2D overlapping_submaps_trimmer_2d = 5;
  if (this->has_overlapping_submaps_trimmer_2d()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overlapping_submaps_trimmer_2d_);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions.PureLocalizationTrimmerOptions pure_localization_trimmer = 6;
  if (this->has_pure_localization_trimmer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pure_localization_trimmer_);
  }

  // bool pure_localization = 3 [deprecated = true];
  if (this->pure_localization() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_fixed_frame = 7;
  if (this->collate_fixed_frame() != 0) {
    total_size += 1 + 1;
  }

  // bool collate_landmarks = 8;
  if (this->collate_landmarks() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptions* source =
      ::google::protobuf::DynamicCastToGenerated<TrajectoryBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptions::MergeFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_builder_2d_options()) {
    mutable_trajectory_builder_2d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions2D::MergeFrom(from.trajectory_builder_2d_options());
  }
  if (from.has_trajectory_builder_3d_options()) {
    mutable_trajectory_builder_3d_options()->::cartographer::mapping::proto::LocalTrajectoryBuilderOptions3D::MergeFrom(from.trajectory_builder_3d_options());
  }
  if (from.has_initial_trajectory_pose()) {
    mutable_initial_trajectory_pose()->::cartographer::mapping::proto::InitialTrajectoryPose::MergeFrom(from.initial_trajectory_pose());
  }
  if (from.has_overlapping_submaps_trimmer_2d()) {
    mutable_overlapping_submaps_trimmer_2d()->::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D::MergeFrom(from.overlapping_submaps_trimmer_2d());
  }
  if (from.has_pure_localization_trimmer()) {
    mutable_pure_localization_trimmer()->::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions::MergeFrom(from.pure_localization_trimmer());
  }
  if (from.pure_localization() != 0) {
    set_pure_localization(from.pure_localization());
  }
  if (from.collate_fixed_frame() != 0) {
    set_collate_fixed_frame(from.collate_fixed_frame());
  }
  if (from.collate_landmarks() != 0) {
    set_collate_landmarks(from.collate_landmarks());
  }
}

void TrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptions::CopyFrom(const TrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptions::Swap(TrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptions::InternalSwap(TrajectoryBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_builder_2d_options_, other->trajectory_builder_2d_options_);
  swap(trajectory_builder_3d_options_, other->trajectory_builder_3d_options_);
  swap(initial_trajectory_pose_, other->initial_trajectory_pose_);
  swap(overlapping_submaps_trimmer_2d_, other->overlapping_submaps_trimmer_2d_);
  swap(pure_localization_trimmer_, other->pure_localization_trimmer_);
  swap(pure_localization_, other->pure_localization_);
  swap(collate_fixed_frame_, other->collate_fixed_frame_);
  swap(collate_landmarks_, other->collate_landmarks_);
}

::google::protobuf::Metadata TrajectoryBuilderOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SensorId::InitAsDefaultInstance() {
}
class SensorId::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorId::kTypeFieldNumber;
const int SensorId::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorId::SensorId()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.SensorId)
}
SensorId::SensorId(const SensorId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.SensorId)
}

void SensorId::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

SensorId::~SensorId() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.SensorId)
  SharedDtor();
}

void SensorId::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SensorId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorId& SensorId::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorId_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void SensorId::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorId::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorId*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.mapping.proto.SensorId.SensorType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::cartographer::mapping::proto::SensorId_SensorType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("cartographer.mapping.proto.SensorId.id");
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.SensorId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.mapping.proto.SensorId.SensorType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cartographer::mapping::proto::SensorId_SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cartographer.mapping.proto.SensorId.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.SensorId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.SensorId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.SensorId)
}

::google::protobuf::uint8* SensorId::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.SensorId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cartographer.mapping.proto.SensorId.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.SensorId)
  return target;
}

size_t SensorId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.SensorId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // .cartographer.mapping.proto.SensorId.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorId* source =
      ::google::protobuf::DynamicCastToGenerated<SensorId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.SensorId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.SensorId)
    MergeFrom(*source);
  }
}

void SensorId::MergeFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.SensorId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SensorId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorId::CopyFrom(const SensorId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.SensorId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorId::IsInitialized() const {
  return true;
}

void SensorId::Swap(SensorId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorId::InternalSwap(SensorId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::google::protobuf::Metadata SensorId::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TrajectoryBuilderOptionsWithSensorIds::InitAsDefaultInstance() {
  ::cartographer::mapping::proto::_TrajectoryBuilderOptionsWithSensorIds_default_instance_._instance.get_mutable()->trajectory_builder_options_ = const_cast< ::cartographer::mapping::proto::TrajectoryBuilderOptions*>(
      ::cartographer::mapping::proto::TrajectoryBuilderOptions::internal_default_instance());
}
class TrajectoryBuilderOptionsWithSensorIds::HasBitSetters {
 public:
  static const ::cartographer::mapping::proto::TrajectoryBuilderOptions& trajectory_builder_options(const TrajectoryBuilderOptionsWithSensorIds* msg);
};

const ::cartographer::mapping::proto::TrajectoryBuilderOptions&
TrajectoryBuilderOptionsWithSensorIds::HasBitSetters::trajectory_builder_options(const TrajectoryBuilderOptionsWithSensorIds* msg) {
  return *msg->trajectory_builder_options_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrajectoryBuilderOptionsWithSensorIds::kSensorIdFieldNumber;
const int TrajectoryBuilderOptionsWithSensorIds::kTrajectoryBuilderOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}
TrajectoryBuilderOptionsWithSensorIds::TrajectoryBuilderOptionsWithSensorIds(const TrajectoryBuilderOptionsWithSensorIds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_builder_options()) {
    trajectory_builder_options_ = new ::cartographer::mapping::proto::TrajectoryBuilderOptions(*from.trajectory_builder_options_);
  } else {
    trajectory_builder_options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

void TrajectoryBuilderOptionsWithSensorIds::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  trajectory_builder_options_ = nullptr;
}

TrajectoryBuilderOptionsWithSensorIds::~TrajectoryBuilderOptionsWithSensorIds() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  SharedDtor();
}

void TrajectoryBuilderOptionsWithSensorIds::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_builder_options_;
}

void TrajectoryBuilderOptionsWithSensorIds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryBuilderOptionsWithSensorIds& TrajectoryBuilderOptionsWithSensorIds::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TrajectoryBuilderOptionsWithSensorIds_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryBuilderOptionsWithSensorIds::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && trajectory_builder_options_ != nullptr) {
    delete trajectory_builder_options_;
  }
  trajectory_builder_options_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryBuilderOptionsWithSensorIds::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TrajectoryBuilderOptionsWithSensorIds*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::mapping::proto::SensorId::_InternalParse;
          object = msg->add_sensor_id();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::mapping::proto::TrajectoryBuilderOptions::_InternalParse;
        object = msg->mutable_trajectory_builder_options();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryBuilderOptionsWithSensorIds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_builder_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryBuilderOptionsWithSensorIds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_id(static_cast<int>(i)),
      output);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::trajectory_builder_options(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
}

::google::protobuf::uint8* TrajectoryBuilderOptionsWithSensorIds::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_id(static_cast<int>(i)), target);
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::trajectory_builder_options(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  return target;
}

size_t TrajectoryBuilderOptionsWithSensorIds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.SensorId sensor_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  // .cartographer.mapping.proto.TrajectoryBuilderOptions trajectory_builder_options = 2;
  if (this->has_trajectory_builder_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *trajectory_builder_options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryBuilderOptionsWithSensorIds* source =
      ::google::protobuf::DynamicCastToGenerated<TrajectoryBuilderOptionsWithSensorIds>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
    MergeFrom(*source);
  }
}

void TrajectoryBuilderOptionsWithSensorIds::MergeFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_trajectory_builder_options()) {
    mutable_trajectory_builder_options()->::cartographer::mapping::proto::TrajectoryBuilderOptions::MergeFrom(from.trajectory_builder_options());
  }
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryBuilderOptionsWithSensorIds::CopyFrom(const TrajectoryBuilderOptionsWithSensorIds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryBuilderOptionsWithSensorIds::IsInitialized() const {
  return true;
}

void TrajectoryBuilderOptionsWithSensorIds::Swap(TrajectoryBuilderOptionsWithSensorIds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrajectoryBuilderOptionsWithSensorIds::InternalSwap(TrajectoryBuilderOptionsWithSensorIds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_id_)->InternalSwap(CastToBase(&other->sensor_id_));
  swap(trajectory_builder_options_, other->trajectory_builder_options_);
}

::google::protobuf::Metadata TrajectoryBuilderOptionsWithSensorIds::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AllTrajectoryBuilderOptions::InitAsDefaultInstance() {
}
class AllTrajectoryBuilderOptions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AllTrajectoryBuilderOptions::kOptionsWithSensorIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}
AllTrajectoryBuilderOptions::AllTrajectoryBuilderOptions(const AllTrajectoryBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      options_with_sensor_ids_(from.options_with_sensor_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

void AllTrajectoryBuilderOptions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
}

AllTrajectoryBuilderOptions::~AllTrajectoryBuilderOptions() {
  // @@protoc_insertion_point(destructor:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  SharedDtor();
}

void AllTrajectoryBuilderOptions::SharedDtor() {
}

void AllTrajectoryBuilderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllTrajectoryBuilderOptions& AllTrajectoryBuilderOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AllTrajectoryBuilderOptions_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto.base);
  return *internal_default_instance();
}


void AllTrajectoryBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_with_sensor_ids_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AllTrajectoryBuilderOptions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AllTrajectoryBuilderOptions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds::_InternalParse;
          object = msg->add_options_with_sensor_ids();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AllTrajectoryBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_options_with_sensor_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AllTrajectoryBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_with_sensor_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->options_with_sensor_ids(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
}

::google::protobuf::uint8* AllTrajectoryBuilderOptions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->options_with_sensor_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->options_with_sensor_ids(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  return target;
}

size_t AllTrajectoryBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.mapping.proto.TrajectoryBuilderOptionsWithSensorIds options_with_sensor_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->options_with_sensor_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->options_with_sensor_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllTrajectoryBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AllTrajectoryBuilderOptions* source =
      ::google::protobuf::DynamicCastToGenerated<AllTrajectoryBuilderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
    MergeFrom(*source);
  }
}

void AllTrajectoryBuilderOptions::MergeFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_with_sensor_ids_.MergeFrom(from.options_with_sensor_ids_);
}

void AllTrajectoryBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTrajectoryBuilderOptions::CopyFrom(const AllTrajectoryBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.mapping.proto.AllTrajectoryBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTrajectoryBuilderOptions::IsInitialized() const {
  return true;
}

void AllTrajectoryBuilderOptions::Swap(AllTrajectoryBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AllTrajectoryBuilderOptions::InternalSwap(AllTrajectoryBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&options_with_sensor_ids_)->InternalSwap(CastToBase(&other->options_with_sensor_ids_));
}

::google::protobuf::Metadata AllTrajectoryBuilderOptions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto);
  return ::file_level_metadata_cartographer_2fmapping_2fproto_2ftrajectory_5fbuilder_5foptions_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace mapping
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::InitialTrajectoryPose* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::InitialTrajectoryPose >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::InitialTrajectoryPose >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptions_OverlappingSubmapsTrimmerOptions2D >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptions_PureLocalizationTrimmerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::SensorId* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::SensorId >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::SensorId >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::TrajectoryBuilderOptionsWithSensorIds >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::mapping::proto::AllTrajectoryBuilderOptions* Arena::CreateMaybeMessage< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::mapping::proto::AllTrajectoryBuilderOptions >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
