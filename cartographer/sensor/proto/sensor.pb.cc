// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/sensor/proto/sensor.proto

#include "cartographer/sensor/proto/sensor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2fsensor_2fproto_2fsensor_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector4f_cartographer_2ftransform_2fproto_2ftransform_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cartographer_2ftransform_2fproto_2ftransform_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto;
namespace cartographer {
namespace sensor {
namespace proto {
class RangefinderPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangefinderPoint> _instance;
} _RangefinderPoint_default_instance_;
class TimedRangefinderPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimedRangefinderPoint> _instance;
} _TimedRangefinderPoint_default_instance_;
class CompressedPointCloudDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CompressedPointCloud> _instance;
} _CompressedPointCloud_default_instance_;
class TimedPointCloudDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TimedPointCloudData> _instance;
} _TimedPointCloudData_default_instance_;
class RangeDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RangeData> _instance;
} _RangeData_default_instance_;
class ImuDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImuData> _instance;
} _ImuData_default_instance_;
class OdometryDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OdometryData> _instance;
} _OdometryData_default_instance_;
class FixedFramePoseDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedFramePoseData> _instance;
} _FixedFramePoseData_default_instance_;
class LandmarkData_LandmarkObservationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData_LandmarkObservation> _instance;
} _LandmarkData_LandmarkObservation_default_instance_;
class LandmarkDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandmarkData> _instance;
} _LandmarkData_default_instance_;
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
static void InitDefaultsRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_RangefinderPoint_default_instance_;
    new (ptr) ::cartographer::sensor::proto::RangefinderPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::RangefinderPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsTimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_;
    new (ptr) ::cartographer::sensor::proto::TimedRangefinderPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::TimedRangefinderPoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsCompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_CompressedPointCloud_default_instance_;
    new (ptr) ::cartographer::sensor::proto::CompressedPointCloud();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::CompressedPointCloud::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {}};

static void InitDefaultsTimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_TimedPointCloudData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::TimedPointCloudData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::TimedPointCloudData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_Vector4f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsRangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_RangeData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::RangeData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::RangeData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3f_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,
      &scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

static void InitDefaultsImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_ImuData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::ImuData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::ImuData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Vector3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsOdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_OdometryData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::OdometryData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::OdometryData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsOdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsFixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_FixedFramePoseData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::FixedFramePoseData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::FixedFramePoseData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsLandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_;
    new (ptr) ::cartographer::sensor::proto::LandmarkData_LandmarkObservation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::LandmarkData_LandmarkObservation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_Rigid3d_cartographer_2ftransform_2fproto_2ftransform_2eproto.base,}};

static void InitDefaultsLandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cartographer::sensor::proto::_LandmarkData_default_instance_;
    new (ptr) ::cartographer::sensor::proto::LandmarkData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cartographer::sensor::proto::LandmarkData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto}, {
      &scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base,}};

void InitDefaults_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[10];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangefinderPoint, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, position_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedRangefinderPoint, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, num_points_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::CompressedPointCloud, point_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, point_data_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::TimedPointCloudData, point_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, origin_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, returns_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, misses_legacy_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, returns_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::RangeData, misses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::ImuData, angular_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::OdometryData, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::FixedFramePoseData, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, id_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, landmark_to_tracking_transform_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, translation_weight_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData_LandmarkObservation, rotation_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::cartographer::sensor::proto::LandmarkData, landmark_observations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::cartographer::sensor::proto::RangefinderPoint)},
  { 6, -1, sizeof(::cartographer::sensor::proto::TimedRangefinderPoint)},
  { 13, -1, sizeof(::cartographer::sensor::proto::CompressedPointCloud)},
  { 20, -1, sizeof(::cartographer::sensor::proto::TimedPointCloudData)},
  { 29, -1, sizeof(::cartographer::sensor::proto::RangeData)},
  { 39, -1, sizeof(::cartographer::sensor::proto::ImuData)},
  { 47, -1, sizeof(::cartographer::sensor::proto::OdometryData)},
  { 54, -1, sizeof(::cartographer::sensor::proto::FixedFramePoseData)},
  { 61, -1, sizeof(::cartographer::sensor::proto::LandmarkData_LandmarkObservation)},
  { 70, -1, sizeof(::cartographer::sensor::proto::LandmarkData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_RangefinderPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_CompressedPointCloud_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_TimedPointCloudData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_RangeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_ImuData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_OdometryData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_FixedFramePoseData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::cartographer::sensor::proto::_LandmarkData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto = {
  {}, AddDescriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto, "cartographer/sensor/proto/sensor.proto", schemas,
  file_default_instances, TableStruct_cartographer_2fsensor_2fproto_2fsensor_2eproto::offsets,
  file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto, 10, file_level_enum_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto, file_level_service_descriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto,
};

const char descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto[] =
  "\n&cartographer/sensor/proto/sensor.proto"
  "\022\031cartographer.sensor.proto\032,cartographe"
  "r/transform/proto/transform.proto\"L\n\020Ran"
  "gefinderPoint\0228\n\010position\030\001 \001(\0132&.cartog"
  "rapher.transform.proto.Vector3f\"_\n\025Timed"
  "RangefinderPoint\0228\n\010position\030\001 \001(\0132&.car"
  "tographer.transform.proto.Vector3f\022\014\n\004ti"
  "me\030\002 \001(\002\">\n\024CompressedPointCloud\022\022\n\nnum_"
  "points\030\001 \001(\005\022\022\n\npoint_data\030\003 \003(\005\"\351\001\n\023Tim"
  "edPointCloudData\022\021\n\ttimestamp\030\001 \001(\003\0226\n\006o"
  "rigin\030\002 \001(\0132&.cartographer.transform.pro"
  "to.Vector3f\022A\n\021point_data_legacy\030\003 \003(\0132&"
  ".cartographer.transform.proto.Vector4f\022D"
  "\n\npoint_data\030\004 \003(\01320.cartographer.sensor"
  ".proto.TimedRangefinderPoint\"\275\002\n\tRangeDa"
  "ta\0226\n\006origin\030\001 \001(\0132&.cartographer.transf"
  "orm.proto.Vector3f\022>\n\016returns_legacy\030\002 \003"
  "(\0132&.cartographer.transform.proto.Vector"
  "3f\022=\n\rmisses_legacy\030\003 \003(\0132&.cartographer"
  ".transform.proto.Vector3f\022<\n\007returns\030\004 \003"
  "(\0132+.cartographer.sensor.proto.Rangefind"
  "erPoint\022;\n\006misses\030\005 \003(\0132+.cartographer.s"
  "ensor.proto.RangefinderPoint\"\243\001\n\007ImuData"
  "\022\021\n\ttimestamp\030\001 \001(\003\022C\n\023linear_accelerati"
  "on\030\002 \001(\0132&.cartographer.transform.proto."
  "Vector3d\022@\n\020angular_velocity\030\003 \001(\0132&.car"
  "tographer.transform.proto.Vector3d\"V\n\014Od"
  "ometryData\022\021\n\ttimestamp\030\001 \001(\003\0223\n\004pose\030\002 "
  "\001(\0132%.cartographer.transform.proto.Rigid"
  "3d\"\\\n\022FixedFramePoseData\022\021\n\ttimestamp\030\001 "
  "\001(\003\0223\n\004pose\030\002 \001(\0132%.cartographer.transfo"
  "rm.proto.Rigid3d\"\245\002\n\014LandmarkData\022\021\n\ttim"
  "estamp\030\001 \001(\003\022Z\n\025landmark_observations\030\002 "
  "\003(\0132;.cartographer.sensor.proto.Landmark"
  "Data.LandmarkObservation\032\245\001\n\023LandmarkObs"
  "ervation\022\n\n\002id\030\001 \001(\014\022M\n\036landmark_to_trac"
  "king_transform\030\002 \001(\0132%.cartographer.tran"
  "sform.proto.Rigid3d\022\032\n\022translation_weigh"
  "t\030\003 \001(\001\022\027\n\017rotation_weight\030\004 \001(\001B\010B\006Sens"
  "orb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto = {
  false, InitDefaults_cartographer_2fsensor_2fproto_2fsensor_2eproto, 
  descriptor_table_protodef_cartographer_2fsensor_2fproto_2fsensor_2eproto,
  "cartographer/sensor/proto/sensor.proto", &assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto, 1570,
};

void AddDescriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_cartographer_2ftransform_2fproto_2ftransform_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_cartographer_2fsensor_2fproto_2fsensor_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_cartographer_2fsensor_2fproto_2fsensor_2eproto = []() { AddDescriptors_cartographer_2fsensor_2fproto_2fsensor_2eproto(); return true; }();
namespace cartographer {
namespace sensor {
namespace proto {

// ===================================================================

void RangefinderPoint::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_RangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class RangefinderPoint::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const RangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangefinderPoint::HasBitSetters::position(const RangefinderPoint* msg) {
  return *msg->position_;
}
void RangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangefinderPoint::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangefinderPoint::RangefinderPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangefinderPoint)
}
RangefinderPoint::RangefinderPoint(const RangefinderPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::cartographer::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangefinderPoint)
}

void RangefinderPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  position_ = nullptr;
}

RangefinderPoint::~RangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangefinderPoint)
  SharedDtor();
}

void RangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void RangefinderPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangefinderPoint& RangefinderPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void RangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RangefinderPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RangefinderPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RangefinderPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.RangefinderPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.RangefinderPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.RangefinderPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RangefinderPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.RangefinderPoint)
}

::google::protobuf::uint8* RangefinderPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangefinderPoint)
  return target;
}

size_t RangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangefinderPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangefinderPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RangefinderPoint* source =
      ::google::protobuf::DynamicCastToGenerated<RangefinderPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangefinderPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangefinderPoint)
    MergeFrom(*source);
  }
}

void RangefinderPoint::MergeFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(from.position());
  }
}

void RangefinderPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangefinderPoint::CopyFrom(const RangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangefinderPoint::IsInitialized() const {
  return true;
}

void RangefinderPoint::Swap(RangefinderPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangefinderPoint::InternalSwap(RangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
}

::google::protobuf::Metadata RangefinderPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimedRangefinderPoint::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_TimedRangefinderPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class TimedRangefinderPoint::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector3f& position(const TimedRangefinderPoint* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedRangefinderPoint::HasBitSetters::position(const TimedRangefinderPoint* msg) {
  return *msg->position_;
}
void TimedRangefinderPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimedRangefinderPoint::kPositionFieldNumber;
const int TimedRangefinderPoint::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimedRangefinderPoint::TimedRangefinderPoint()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}
TimedRangefinderPoint::TimedRangefinderPoint(const TimedRangefinderPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::cartographer::transform::proto::Vector3f(*from.position_);
  } else {
    position_ = nullptr;
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedRangefinderPoint)
}

void TimedRangefinderPoint::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&position_)) + sizeof(time_));
}

TimedRangefinderPoint::~TimedRangefinderPoint() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedRangefinderPoint)
  SharedDtor();
}

void TimedRangefinderPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void TimedRangefinderPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedRangefinderPoint& TimedRangefinderPoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimedRangefinderPoint_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void TimedRangefinderPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimedRangefinderPoint::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimedRangefinderPoint*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // float time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimedRangefinderPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.TimedRangefinderPoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.TimedRangefinderPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.TimedRangefinderPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimedRangefinderPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // float time = 2;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.TimedRangefinderPoint)
}

::google::protobuf::uint8* TimedRangefinderPoint::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedRangefinderPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // float time = 2;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedRangefinderPoint)
  return target;
}

size_t TimedRangefinderPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedRangefinderPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // float time = 2;
  if (this->time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedRangefinderPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedRangefinderPoint* source =
      ::google::protobuf::DynamicCastToGenerated<TimedRangefinderPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedRangefinderPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedRangefinderPoint)
    MergeFrom(*source);
  }
}

void TimedRangefinderPoint::MergeFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::cartographer::transform::proto::Vector3f::MergeFrom(from.position());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
}

void TimedRangefinderPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedRangefinderPoint::CopyFrom(const TimedRangefinderPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedRangefinderPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedRangefinderPoint::IsInitialized() const {
  return true;
}

void TimedRangefinderPoint::Swap(TimedRangefinderPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimedRangefinderPoint::InternalSwap(TimedRangefinderPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata TimedRangefinderPoint::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CompressedPointCloud::InitAsDefaultInstance() {
}
class CompressedPointCloud::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CompressedPointCloud::kNumPointsFieldNumber;
const int CompressedPointCloud::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CompressedPointCloud::CompressedPointCloud()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.CompressedPointCloud)
}
CompressedPointCloud::CompressedPointCloud(const CompressedPointCloud& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      point_data_(from.point_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  num_points_ = from.num_points_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.CompressedPointCloud)
}

void CompressedPointCloud::SharedCtor() {
  num_points_ = 0;
}

CompressedPointCloud::~CompressedPointCloud() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.CompressedPointCloud)
  SharedDtor();
}

void CompressedPointCloud::SharedDtor() {
}

void CompressedPointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressedPointCloud& CompressedPointCloud::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CompressedPointCloud_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void CompressedPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_.Clear();
  num_points_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CompressedPointCloud::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CompressedPointCloud*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 num_points = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_num_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 point_data = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_point_data();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_point_data(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CompressedPointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.CompressedPointCloud)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 point_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_point_data())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_point_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.CompressedPointCloud)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.CompressedPointCloud)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CompressedPointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_points(), output);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_data_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->point_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->point_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.CompressedPointCloud)
}

::google::protobuf::uint8* CompressedPointCloud::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.CompressedPointCloud)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_points(), target);
  }

  // repeated int32 point_data = 3;
  if (this->point_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _point_data_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->point_data_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.CompressedPointCloud)
  return target;
}

size_t CompressedPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.CompressedPointCloud)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 point_data = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->point_data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _point_data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 num_points = 1;
  if (this->num_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressedPointCloud::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressedPointCloud* source =
      ::google::protobuf::DynamicCastToGenerated<CompressedPointCloud>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.CompressedPointCloud)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.CompressedPointCloud)
    MergeFrom(*source);
  }
}

void CompressedPointCloud::MergeFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.CompressedPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_.MergeFrom(from.point_data_);
  if (from.num_points() != 0) {
    set_num_points(from.num_points());
  }
}

void CompressedPointCloud::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedPointCloud::CopyFrom(const CompressedPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.CompressedPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedPointCloud::IsInitialized() const {
  return true;
}

void CompressedPointCloud::Swap(CompressedPointCloud* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CompressedPointCloud::InternalSwap(CompressedPointCloud* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  point_data_.InternalSwap(&other->point_data_);
  swap(num_points_, other->num_points_);
}

::google::protobuf::Metadata CompressedPointCloud::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void TimedPointCloudData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_TimedPointCloudData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class TimedPointCloudData::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const TimedPointCloudData* msg);
};

const ::cartographer::transform::proto::Vector3f&
TimedPointCloudData::HasBitSetters::origin(const TimedPointCloudData* msg) {
  return *msg->origin_;
}
void TimedPointCloudData::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void TimedPointCloudData::clear_point_data_legacy() {
  point_data_legacy_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimedPointCloudData::kTimestampFieldNumber;
const int TimedPointCloudData::kOriginFieldNumber;
const int TimedPointCloudData::kPointDataLegacyFieldNumber;
const int TimedPointCloudData::kPointDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimedPointCloudData::TimedPointCloudData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.TimedPointCloudData)
}
TimedPointCloudData::TimedPointCloudData(const TimedPointCloudData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      point_data_legacy_(from.point_data_legacy_),
      point_data_(from.point_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::cartographer::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.TimedPointCloudData)
}

void TimedPointCloudData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(timestamp_));
}

TimedPointCloudData::~TimedPointCloudData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.TimedPointCloudData)
  SharedDtor();
}

void TimedPointCloudData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void TimedPointCloudData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimedPointCloudData& TimedPointCloudData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_TimedPointCloudData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void TimedPointCloudData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_data_legacy_.Clear();
  point_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimedPointCloudData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<TimedPointCloudData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.transform.proto.Vector3f origin = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
        object = msg->mutable_origin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::transform::proto::Vector4f::_InternalParse;
          object = msg->add_point_data_legacy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::sensor::proto::TimedRangefinderPoint::_InternalParse;
          object = msg->add_point_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimedPointCloudData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.TimedPointCloudData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3f origin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_data_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.TimedPointCloudData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.TimedPointCloudData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimedPointCloudData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::origin(this), output);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->point_data_legacy(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->point_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.TimedPointCloudData)
}

::google::protobuf::uint8* TimedPointCloudData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.TimedPointCloudData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::origin(this), target);
  }

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->point_data_legacy(static_cast<int>(i)), target);
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->point_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.TimedPointCloudData)
  return target;
}

size_t TimedPointCloudData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.TimedPointCloudData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector4f point_data_legacy = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->point_data_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_data_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.TimedRangefinderPoint point_data = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->point_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point_data(static_cast<int>(i)));
    }
  }

  // .cartographer.transform.proto.Vector3f origin = 2;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimedPointCloudData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  const TimedPointCloudData* source =
      ::google::protobuf::DynamicCastToGenerated<TimedPointCloudData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.TimedPointCloudData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.TimedPointCloudData)
    MergeFrom(*source);
  }
}

void TimedPointCloudData::MergeFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.TimedPointCloudData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_data_legacy_.MergeFrom(from.point_data_legacy_);
  point_data_.MergeFrom(from.point_data_);
  if (from.has_origin()) {
    mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void TimedPointCloudData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimedPointCloudData::CopyFrom(const TimedPointCloudData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.TimedPointCloudData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedPointCloudData::IsInitialized() const {
  return true;
}

void TimedPointCloudData::Swap(TimedPointCloudData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimedPointCloudData::InternalSwap(TimedPointCloudData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&point_data_legacy_)->InternalSwap(CastToBase(&other->point_data_legacy_));
  CastToBase(&point_data_)->InternalSwap(CastToBase(&other->point_data_));
  swap(origin_, other->origin_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata TimedPointCloudData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RangeData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_RangeData_default_instance_._instance.get_mutable()->origin_ = const_cast< ::cartographer::transform::proto::Vector3f*>(
      ::cartographer::transform::proto::Vector3f::internal_default_instance());
}
class RangeData::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector3f& origin(const RangeData* msg);
};

const ::cartographer::transform::proto::Vector3f&
RangeData::HasBitSetters::origin(const RangeData* msg) {
  return *msg->origin_;
}
void RangeData::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void RangeData::clear_returns_legacy() {
  returns_legacy_.Clear();
}
void RangeData::clear_misses_legacy() {
  misses_legacy_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RangeData::kOriginFieldNumber;
const int RangeData::kReturnsLegacyFieldNumber;
const int RangeData::kMissesLegacyFieldNumber;
const int RangeData::kReturnsFieldNumber;
const int RangeData::kMissesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RangeData::RangeData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.RangeData)
}
RangeData::RangeData(const RangeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      returns_legacy_(from.returns_legacy_),
      misses_legacy_(from.misses_legacy_),
      returns_(from.returns_),
      misses_(from.misses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::cartographer::transform::proto::Vector3f(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.RangeData)
}

void RangeData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  origin_ = nullptr;
}

RangeData::~RangeData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.RangeData)
  SharedDtor();
}

void RangeData::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void RangeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RangeData& RangeData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RangeData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void RangeData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  returns_legacy_.Clear();
  misses_legacy_.Clear();
  returns_.Clear();
  misses_.Clear();
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RangeData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RangeData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
        object = msg->mutable_origin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
          object = msg->add_returns_legacy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::transform::proto::Vector3f::_InternalParse;
          object = msg->add_misses_legacy();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::sensor::proto::RangefinderPoint::_InternalParse;
          object = msg->add_returns();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::sensor::proto::RangefinderPoint::_InternalParse;
          object = msg->add_misses();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RangeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.RangeData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .cartographer.transform.proto.Vector3f origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_returns_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_misses_legacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_returns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_misses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.RangeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.RangeData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RangeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::origin(this), output);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->returns_legacy(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_legacy_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->misses_legacy(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->returns(static_cast<int>(i)),
      output);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->misses(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.RangeData)
}

::google::protobuf::uint8* RangeData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.RangeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::origin(this), target);
  }

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->returns_legacy(static_cast<int>(i)), target);
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_legacy_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->misses_legacy(static_cast<int>(i)), target);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->returns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->returns(static_cast<int>(i)), target);
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->misses_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->misses(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.RangeData)
  return target;
}

size_t RangeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.RangeData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.transform.proto.Vector3f returns_legacy = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->returns_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->returns_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.transform.proto.Vector3f misses_legacy = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->misses_legacy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->misses_legacy(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint returns = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->returns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->returns(static_cast<int>(i)));
    }
  }

  // repeated .cartographer.sensor.proto.RangefinderPoint misses = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->misses_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->misses(static_cast<int>(i)));
    }
  }

  // .cartographer.transform.proto.Vector3f origin = 1;
  if (this->has_origin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RangeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  const RangeData* source =
      ::google::protobuf::DynamicCastToGenerated<RangeData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.RangeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.RangeData)
    MergeFrom(*source);
  }
}

void RangeData::MergeFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.RangeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  returns_legacy_.MergeFrom(from.returns_legacy_);
  misses_legacy_.MergeFrom(from.misses_legacy_);
  returns_.MergeFrom(from.returns_);
  misses_.MergeFrom(from.misses_);
  if (from.has_origin()) {
    mutable_origin()->::cartographer::transform::proto::Vector3f::MergeFrom(from.origin());
  }
}

void RangeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeData::CopyFrom(const RangeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.RangeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeData::IsInitialized() const {
  return true;
}

void RangeData::Swap(RangeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RangeData::InternalSwap(RangeData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&returns_legacy_)->InternalSwap(CastToBase(&other->returns_legacy_));
  CastToBase(&misses_legacy_)->InternalSwap(CastToBase(&other->misses_legacy_));
  CastToBase(&returns_)->InternalSwap(CastToBase(&other->returns_));
  CastToBase(&misses_)->InternalSwap(CastToBase(&other->misses_));
  swap(origin_, other->origin_);
}

::google::protobuf::Metadata RangeData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ImuData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_ImuData_default_instance_._instance.get_mutable()->linear_acceleration_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
  ::cartographer::sensor::proto::_ImuData_default_instance_._instance.get_mutable()->angular_velocity_ = const_cast< ::cartographer::transform::proto::Vector3d*>(
      ::cartographer::transform::proto::Vector3d::internal_default_instance());
}
class ImuData::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Vector3d& linear_acceleration(const ImuData* msg);
  static const ::cartographer::transform::proto::Vector3d& angular_velocity(const ImuData* msg);
};

const ::cartographer::transform::proto::Vector3d&
ImuData::HasBitSetters::linear_acceleration(const ImuData* msg) {
  return *msg->linear_acceleration_;
}
const ::cartographer::transform::proto::Vector3d&
ImuData::HasBitSetters::angular_velocity(const ImuData* msg) {
  return *msg->angular_velocity_;
}
void ImuData::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
void ImuData::clear_angular_velocity() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImuData::kTimestampFieldNumber;
const int ImuData::kLinearAccelerationFieldNumber;
const int ImuData::kAngularVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImuData::ImuData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::cartographer::transform::proto::Vector3d(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::cartographer::transform::proto::Vector3d(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.ImuData)
}

void ImuData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&linear_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&linear_acceleration_)) + sizeof(timestamp_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.ImuData)
  SharedDtor();
}

void ImuData::SharedDtor() {
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
}

void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImuData& ImuData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImuData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImuData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImuData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3d::_InternalParse;
        object = msg->mutable_linear_acceleration();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Vector3d::_InternalParse;
        object = msg->mutable_angular_velocity();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.ImuData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Vector3d angular_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.ImuData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.ImuData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::linear_acceleration(this), output);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::angular_velocity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.ImuData)
}

::google::protobuf::uint8* ImuData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.ImuData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::linear_acceleration(this), target);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::angular_velocity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.ImuData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Vector3d linear_acceleration = 2;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .cartographer.transform.proto.Vector3d angular_velocity = 3;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImuData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  const ImuData* source =
      ::google::protobuf::DynamicCastToGenerated<ImuData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.ImuData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.ImuData)
    MergeFrom(*source);
  }
}

void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::cartographer::transform::proto::Vector3d::MergeFrom(from.linear_acceleration());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::cartographer::transform::proto::Vector3d::MergeFrom(from.angular_velocity());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ImuData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::Swap(ImuData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linear_acceleration_, other->linear_acceleration_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata ImuData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OdometryData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_OdometryData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class OdometryData::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const OdometryData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
OdometryData::HasBitSetters::pose(const OdometryData* msg) {
  return *msg->pose_;
}
void OdometryData::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OdometryData::kTimestampFieldNumber;
const int OdometryData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OdometryData::OdometryData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.OdometryData)
}
OdometryData::OdometryData(const OdometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.OdometryData)
}

void OdometryData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

OdometryData::~OdometryData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.OdometryData)
  SharedDtor();
}

void OdometryData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void OdometryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OdometryData& OdometryData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OdometryData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void OdometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OdometryData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OdometryData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OdometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.OdometryData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.OdometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.OdometryData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OdometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pose(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.OdometryData)
}

::google::protobuf::uint8* OdometryData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.OdometryData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pose(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.OdometryData)
  return target;
}

size_t OdometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.OdometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OdometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const OdometryData* source =
      ::google::protobuf::DynamicCastToGenerated<OdometryData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.OdometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.OdometryData)
    MergeFrom(*source);
  }
}

void OdometryData::MergeFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.OdometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void OdometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OdometryData::CopyFrom(const OdometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.OdometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OdometryData::IsInitialized() const {
  return true;
}

void OdometryData::Swap(OdometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OdometryData::InternalSwap(OdometryData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata OdometryData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FixedFramePoseData::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_FixedFramePoseData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class FixedFramePoseData::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& pose(const FixedFramePoseData* msg);
};

const ::cartographer::transform::proto::Rigid3d&
FixedFramePoseData::HasBitSetters::pose(const FixedFramePoseData* msg) {
  return *msg->pose_;
}
void FixedFramePoseData::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedFramePoseData::kTimestampFieldNumber;
const int FixedFramePoseData::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedFramePoseData::FixedFramePoseData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.FixedFramePoseData)
}
FixedFramePoseData::FixedFramePoseData(const FixedFramePoseData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::cartographer::transform::proto::Rigid3d(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.FixedFramePoseData)
}

void FixedFramePoseData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(timestamp_));
}

FixedFramePoseData::~FixedFramePoseData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.FixedFramePoseData)
  SharedDtor();
}

void FixedFramePoseData::SharedDtor() {
  if (this != internal_default_instance()) delete pose_;
}

void FixedFramePoseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FixedFramePoseData& FixedFramePoseData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FixedFramePoseData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void FixedFramePoseData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FixedFramePoseData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FixedFramePoseData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_pose();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FixedFramePoseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.FixedFramePoseData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.FixedFramePoseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.FixedFramePoseData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FixedFramePoseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::pose(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.FixedFramePoseData)
}

::google::protobuf::uint8* FixedFramePoseData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.FixedFramePoseData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::pose(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.FixedFramePoseData)
  return target;
}

size_t FixedFramePoseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.FixedFramePoseData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cartographer.transform.proto.Rigid3d pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedFramePoseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedFramePoseData* source =
      ::google::protobuf::DynamicCastToGenerated<FixedFramePoseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.FixedFramePoseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.FixedFramePoseData)
    MergeFrom(*source);
  }
}

void FixedFramePoseData::MergeFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.FixedFramePoseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    mutable_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.pose());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void FixedFramePoseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedFramePoseData::CopyFrom(const FixedFramePoseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.FixedFramePoseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedFramePoseData::IsInitialized() const {
  return true;
}

void FixedFramePoseData::Swap(FixedFramePoseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedFramePoseData::InternalSwap(FixedFramePoseData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata FixedFramePoseData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LandmarkData_LandmarkObservation::InitAsDefaultInstance() {
  ::cartographer::sensor::proto::_LandmarkData_LandmarkObservation_default_instance_._instance.get_mutable()->landmark_to_tracking_transform_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(
      ::cartographer::transform::proto::Rigid3d::internal_default_instance());
}
class LandmarkData_LandmarkObservation::HasBitSetters {
 public:
  static const ::cartographer::transform::proto::Rigid3d& landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg);
};

const ::cartographer::transform::proto::Rigid3d&
LandmarkData_LandmarkObservation::HasBitSetters::landmark_to_tracking_transform(const LandmarkData_LandmarkObservation* msg) {
  return *msg->landmark_to_tracking_transform_;
}
void LandmarkData_LandmarkObservation::clear_landmark_to_tracking_transform() {
  if (GetArenaNoVirtual() == nullptr && landmark_to_tracking_transform_ != nullptr) {
    delete landmark_to_tracking_transform_;
  }
  landmark_to_tracking_transform_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData_LandmarkObservation::kIdFieldNumber;
const int LandmarkData_LandmarkObservation::kLandmarkToTrackingTransformFieldNumber;
const int LandmarkData_LandmarkObservation::kTranslationWeightFieldNumber;
const int LandmarkData_LandmarkObservation::kRotationWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}
LandmarkData_LandmarkObservation::LandmarkData_LandmarkObservation(const LandmarkData_LandmarkObservation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    landmark_to_tracking_transform_ = new ::cartographer::transform::proto::Rigid3d(*from.landmark_to_tracking_transform_);
  } else {
    landmark_to_tracking_transform_ = nullptr;
  }
  ::memcpy(&translation_weight_, &from.translation_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_weight_) -
    reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

void LandmarkData_LandmarkObservation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&landmark_to_tracking_transform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&landmark_to_tracking_transform_)) + sizeof(rotation_weight_));
}

LandmarkData_LandmarkObservation::~LandmarkData_LandmarkObservation() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  SharedDtor();
}

void LandmarkData_LandmarkObservation::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete landmark_to_tracking_transform_;
}

void LandmarkData_LandmarkObservation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkData_LandmarkObservation& LandmarkData_LandmarkObservation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LandmarkData_LandmarkObservation_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void LandmarkData_LandmarkObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && landmark_to_tracking_transform_ != nullptr) {
    delete landmark_to_tracking_transform_;
  }
  landmark_to_tracking_transform_ = nullptr;
  ::memset(&translation_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_weight_) -
      reinterpret_cast<char*>(&translation_weight_)) + sizeof(rotation_weight_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LandmarkData_LandmarkObservation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LandmarkData_LandmarkObservation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_id();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::cartographer::transform::proto::Rigid3d::_InternalParse;
        object = msg->mutable_landmark_to_tracking_transform();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // double translation_weight = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_translation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      // double rotation_weight = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_rotation_weight(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LandmarkData_LandmarkObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmark_to_tracking_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double translation_weight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &translation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LandmarkData_LandmarkObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::landmark_to_tracking_transform(this), output);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->translation_weight(), output);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rotation_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
}

::google::protobuf::uint8* LandmarkData_LandmarkObservation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::landmark_to_tracking_transform(this), target);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->translation_weight(), target);
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rotation_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  return target;
}

size_t LandmarkData_LandmarkObservation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .cartographer.transform.proto.Rigid3d landmark_to_tracking_transform = 2;
  if (this->has_landmark_to_tracking_transform()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *landmark_to_tracking_transform_);
  }

  // double translation_weight = 3;
  if (this->translation_weight() != 0) {
    total_size += 1 + 8;
  }

  // double rotation_weight = 4;
  if (this->rotation_weight() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkData_LandmarkObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData_LandmarkObservation* source =
      ::google::protobuf::DynamicCastToGenerated<LandmarkData_LandmarkObservation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
    MergeFrom(*source);
  }
}

void LandmarkData_LandmarkObservation::MergeFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_landmark_to_tracking_transform()) {
    mutable_landmark_to_tracking_transform()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.landmark_to_tracking_transform());
  }
  if (from.translation_weight() != 0) {
    set_translation_weight(from.translation_weight());
  }
  if (from.rotation_weight() != 0) {
    set_rotation_weight(from.rotation_weight());
  }
}

void LandmarkData_LandmarkObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData_LandmarkObservation::CopyFrom(const LandmarkData_LandmarkObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData.LandmarkObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData_LandmarkObservation::IsInitialized() const {
  return true;
}

void LandmarkData_LandmarkObservation::Swap(LandmarkData_LandmarkObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData_LandmarkObservation::InternalSwap(LandmarkData_LandmarkObservation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(landmark_to_tracking_transform_, other->landmark_to_tracking_transform_);
  swap(translation_weight_, other->translation_weight_);
  swap(rotation_weight_, other->rotation_weight_);
}

::google::protobuf::Metadata LandmarkData_LandmarkObservation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// ===================================================================

void LandmarkData::InitAsDefaultInstance() {
}
class LandmarkData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkData::kTimestampFieldNumber;
const int LandmarkData::kLandmarkObservationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkData::LandmarkData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cartographer.sensor.proto.LandmarkData)
}
LandmarkData::LandmarkData(const LandmarkData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      landmark_observations_(from.landmark_observations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:cartographer.sensor.proto.LandmarkData)
}

void LandmarkData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  timestamp_ = PROTOBUF_LONGLONG(0);
}

LandmarkData::~LandmarkData() {
  // @@protoc_insertion_point(destructor:cartographer.sensor.proto.LandmarkData)
  SharedDtor();
}

void LandmarkData::SharedDtor() {
}

void LandmarkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LandmarkData& LandmarkData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_LandmarkData_cartographer_2fsensor_2fproto_2fsensor_2eproto.base);
  return *internal_default_instance();
}


void LandmarkData::Clear() {
// @@protoc_insertion_point(message_clear_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_observations_.Clear();
  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LandmarkData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<LandmarkData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::cartographer::sensor::proto::LandmarkData_LandmarkObservation::_InternalParse;
          object = msg->add_landmark_observations();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LandmarkData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cartographer.sensor.proto.LandmarkData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmark_observations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cartographer.sensor.proto.LandmarkData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cartographer.sensor.proto.LandmarkData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LandmarkData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_observations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->landmark_observations(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cartographer.sensor.proto.LandmarkData)
}

::google::protobuf::uint8* LandmarkData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cartographer.sensor.proto.LandmarkData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_observations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->landmark_observations(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cartographer.sensor.proto.LandmarkData)
  return target;
}

size_t LandmarkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cartographer.sensor.proto.LandmarkData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cartographer.sensor.proto.LandmarkData.LandmarkObservation landmark_observations = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_observations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmark_observations(static_cast<int>(i)));
    }
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkData* source =
      ::google::protobuf::DynamicCastToGenerated<LandmarkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cartographer.sensor.proto.LandmarkData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cartographer.sensor.proto.LandmarkData)
    MergeFrom(*source);
  }
}

void LandmarkData::MergeFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cartographer.sensor.proto.LandmarkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_observations_.MergeFrom(from.landmark_observations_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void LandmarkData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkData::CopyFrom(const LandmarkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cartographer.sensor.proto.LandmarkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkData::IsInitialized() const {
  return true;
}

void LandmarkData::Swap(LandmarkData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkData::InternalSwap(LandmarkData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&landmark_observations_)->InternalSwap(CastToBase(&other->landmark_observations_));
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata LandmarkData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_cartographer_2fsensor_2fproto_2fsensor_2eproto);
  return ::file_level_metadata_cartographer_2fsensor_2fproto_2fsensor_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sensor
}  // namespace cartographer
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangefinderPoint* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangefinderPoint >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::RangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedRangefinderPoint* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedRangefinderPoint >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::TimedRangefinderPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::CompressedPointCloud* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::CompressedPointCloud >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::CompressedPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::TimedPointCloudData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::TimedPointCloudData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::TimedPointCloudData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::RangeData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::RangeData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::RangeData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::ImuData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::ImuData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::OdometryData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::OdometryData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::OdometryData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::FixedFramePoseData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::FixedFramePoseData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::FixedFramePoseData >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData_LandmarkObservation* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::LandmarkData_LandmarkObservation >(arena);
}
template<> PROTOBUF_NOINLINE ::cartographer::sensor::proto::LandmarkData* Arena::CreateMaybeMessage< ::cartographer::sensor::proto::LandmarkData >(Arena* arena) {
  return Arena::CreateInternal< ::cartographer::sensor::proto::LandmarkData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
